
lab03-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a8  080042a8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042b0  080042b0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b4  080042b4  000142b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080042b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000060  08004318  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08004318  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c6ab  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001afb  00000000  00000000  0002c77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000954  00000000  00000000  0002ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015933  00000000  00000000  0002f7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1e8  00000000  00000000  000450e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c520  00000000  00000000  000522cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000373c  00000000  00000000  000de7f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e1f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004208 	.word	0x08004208

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004208 	.word	0x08004208

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */
int internalLEDEdgeCount = 0;
int externalLEDCount = 0;
int currentColor = 32;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af02      	add	r7, sp, #8
 8000592:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a27      	ldr	r2, [pc, #156]	; (8000634 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d109      	bne.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800059c:	2120      	movs	r1, #32
 800059e:	4826      	ldr	r0, [pc, #152]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005a0:	f001 f891 	bl	80016c6 <HAL_GPIO_TogglePin>
		internalLEDEdgeCount += 1;
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005ac:	6013      	str	r3, [r2, #0]
				currentColor, currentTime, internalLEDEdgeCount / 2, externalLEDCount/2);
		HAL_UART_Transmit(&huart2, message, strlen(message), 100);
		free(message);

	}
}
 80005ae:	e03c      	b.n	800062a <HAL_TIM_PeriodElapsedCallback+0x9e>
	} else if (htim == &htim2) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a23      	ldr	r2, [pc, #140]	; (8000640 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d109      	bne.n	80005cc <HAL_TIM_PeriodElapsedCallback+0x40>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80005b8:	2101      	movs	r1, #1
 80005ba:	481f      	ldr	r0, [pc, #124]	; (8000638 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80005bc:	f001 f883 	bl	80016c6 <HAL_GPIO_TogglePin>
		externalLEDCount += 1;
 80005c0:	4b20      	ldr	r3, [pc, #128]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a1f      	ldr	r2, [pc, #124]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	e02e      	b.n	800062a <HAL_TIM_PeriodElapsedCallback+0x9e>
	} else if (htim == &htim3) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d12a      	bne.n	800062a <HAL_TIM_PeriodElapsedCallback+0x9e>
		int currentTime = HAL_GetTick();
 80005d4:	f000 fdbc 	bl	8001150 <HAL_GetTick>
 80005d8:	4603      	mov	r3, r0
 80005da:	60fb      	str	r3, [r7, #12]
		char *message = (char*) malloc(sizeof(char) * 100);
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f003 f95f 	bl	80038a0 <malloc>
 80005e2:	4603      	mov	r3, r0
 80005e4:	60bb      	str	r3, [r7, #8]
		sprintf(message, "\e[0;%dmTime: %d, Internal LED: %d, External LED: %d\e[0m\r\n",
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	0fda      	lsrs	r2, r3, #31
 80005f0:	4413      	add	r3, r2
 80005f2:	105b      	asrs	r3, r3, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	0fda      	lsrs	r2, r3, #31
 80005fc:	4413      	add	r3, r2
 80005fe:	105b      	asrs	r3, r3, #1
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	9000      	str	r0, [sp, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	460a      	mov	r2, r1
 8000608:	4911      	ldr	r1, [pc, #68]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800060a:	68b8      	ldr	r0, [r7, #8]
 800060c:	f003 fa04 	bl	8003a18 <siprintf>
		HAL_UART_Transmit(&huart2, message, strlen(message), 100);
 8000610:	68b8      	ldr	r0, [r7, #8]
 8000612:	f7ff fde5 	bl	80001e0 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	2364      	movs	r3, #100	; 0x64
 800061c:	68b9      	ldr	r1, [r7, #8]
 800061e:	480d      	ldr	r0, [pc, #52]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000620:	f002 fd82 	bl	8003128 <HAL_UART_Transmit>
		free(message);
 8000624:	68b8      	ldr	r0, [r7, #8]
 8000626:	f003 f943 	bl	80038b0 <free>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000007c 	.word	0x2000007c
 8000638:	40020000 	.word	0x40020000
 800063c:	2000019c 	.word	0x2000019c
 8000640:	200000c4 	.word	0x200000c4
 8000644:	200001a0 	.word	0x200001a0
 8000648:	2000010c 	.word	0x2000010c
 800064c:	20000000 	.word	0x20000000
 8000650:	08004220 	.word	0x08004220
 8000654:	20000154 	.word	0x20000154

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fd12 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f81a 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 fa40 	bl	8000ae8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fa14 	bl	8000a94 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800066c:	f000 f87c 	bl	8000768 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000670:	f000 f920 	bl	80008b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000674:	f000 f996 	bl	80009a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <main+0x34>)
 800067a:	f001 fd4b 	bl	8002114 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800067e:	4804      	ldr	r0, [pc, #16]	; (8000690 <main+0x38>)
 8000680:	f001 fd48 	bl	8002114 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <main+0x3c>)
 8000686:	f001 fd45 	bl	8002114 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800068a:	e7fe      	b.n	800068a <main+0x32>
 800068c:	2000007c 	.word	0x2000007c
 8000690:	200000c4 	.word	0x200000c4
 8000694:	2000010c 	.word	0x2000010c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f9d6 	bl	8003a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <SystemClock_Config+0xc8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <SystemClock_Config+0xc8>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b21      	ldr	r3, [pc, #132]	; (8000764 <SystemClock_Config+0xcc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a20      	ldr	r2, [pc, #128]	; (8000764 <SystemClock_Config+0xcc>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <SystemClock_Config+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	2301      	movs	r3, #1
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	2310      	movs	r3, #16
 80006fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000700:	2302      	movs	r3, #2
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800070c:	2350      	movs	r3, #80	; 0x50
 800070e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f811 	bl	8001744 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000728:	f000 fa54 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000734:	23a0      	movs	r3, #160	; 0xa0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fa73 	bl	8001c34 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000754:	f000 fa3e 	bl	8000bd4 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	; 0x58
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 f959 	bl	8003a58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b41      	ldr	r3, [pc, #260]	; (80008ac <MX_TIM1_Init+0x144>)
 80007a8:	4a41      	ldr	r2, [pc, #260]	; (80008b0 <MX_TIM1_Init+0x148>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 80007ac:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <MX_TIM1_Init+0x144>)
 80007ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80007b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b3d      	ldr	r3, [pc, #244]	; (80008ac <MX_TIM1_Init+0x144>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 80007ba:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <MX_TIM1_Init+0x144>)
 80007bc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80007c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <MX_TIM1_Init+0x144>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c8:	4b38      	ldr	r3, [pc, #224]	; (80008ac <MX_TIM1_Init+0x144>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <MX_TIM1_Init+0x144>)
 80007d0:	2280      	movs	r2, #128	; 0x80
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d4:	4835      	ldr	r0, [pc, #212]	; (80008ac <MX_TIM1_Init+0x144>)
 80007d6:	f001 fc4d 	bl	8002074 <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007e0:	f000 f9f8 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007ee:	4619      	mov	r1, r3
 80007f0:	482e      	ldr	r0, [pc, #184]	; (80008ac <MX_TIM1_Init+0x144>)
 80007f2:	f001 ffad 	bl	8002750 <HAL_TIM_ConfigClockSource>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007fc:	f000 f9ea 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000800:	482a      	ldr	r0, [pc, #168]	; (80008ac <MX_TIM1_Init+0x144>)
 8000802:	f001 fce9 	bl	80021d8 <HAL_TIM_PWM_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800080c:	f000 f9e2 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000818:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800081c:	4619      	mov	r1, r3
 800081e:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_TIM1_Init+0x144>)
 8000820:	f002 fb5e 	bl	8002ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800082a:	f000 f9d3 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 250;
 8000832:	23fa      	movs	r3, #250	; 0xfa
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4816      	ldr	r0, [pc, #88]	; (80008ac <MX_TIM1_Init+0x144>)
 8000854:	f001 feba 	bl	80025cc <HAL_TIM_PWM_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800085e:	f000 f9b9 	bl	8000bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_TIM1_Init+0x144>)
 8000886:	f002 fb99 	bl	8002fbc <HAL_TIMEx_ConfigBreakDeadTime>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000890:	f000 f9a0 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000894:	2100      	movs	r1, #0
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_TIM1_Init+0x144>)
 8000898:	f001 fcf8 	bl	800228c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <MX_TIM1_Init+0x144>)
 800089e:	f000 fa41 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 80008a2:	bf00      	nop
 80008a4:	3758      	adds	r7, #88	; 0x58
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	40010000 	.word	0x40010000

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <MX_TIM2_Init+0xec>)
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80008ec:	4b2c      	ldr	r3, [pc, #176]	; (80009a0 <MX_TIM2_Init+0xec>)
 80008ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <MX_TIM2_Init+0xec>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4904;
 80008fa:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <MX_TIM2_Init+0xec>)
 80008fc:	f241 3228 	movw	r2, #4904	; 0x1328
 8000900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <MX_TIM2_Init+0xec>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_TIM2_Init+0xec>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090e:	4824      	ldr	r0, [pc, #144]	; (80009a0 <MX_TIM2_Init+0xec>)
 8000910:	f001 fbb0 	bl	8002074 <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 f95b 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000928:	4619      	mov	r1, r3
 800092a:	481d      	ldr	r0, [pc, #116]	; (80009a0 <MX_TIM2_Init+0xec>)
 800092c:	f001 ff10 	bl	8002750 <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000936:	f000 f94d 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800093a:	4819      	ldr	r0, [pc, #100]	; (80009a0 <MX_TIM2_Init+0xec>)
 800093c:	f001 fc4c 	bl	80021d8 <HAL_TIM_PWM_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000946:	f000 f945 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	4619      	mov	r1, r3
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_TIM2_Init+0xec>)
 800095a:	f002 fac1 	bl	8002ee0 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000964:	f000 f936 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000968:	2360      	movs	r3, #96	; 0x60
 800096a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2452;
 800096c:	f640 1394 	movw	r3, #2452	; 0x994
 8000970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	4807      	ldr	r0, [pc, #28]	; (80009a0 <MX_TIM2_Init+0xec>)
 8000982:	f001 fe23 	bl	80025cc <HAL_TIM_PWM_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800098c:	f000 f922 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000990:	4803      	ldr	r0, [pc, #12]	; (80009a0 <MX_TIM2_Init+0xec>)
 8000992:	f000 f9c7 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000996:	bf00      	nop
 8000998:	3738      	adds	r7, #56	; 0x38
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000c4 	.word	0x200000c4

080009a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	; 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
 80009d0:	615a      	str	r2, [r3, #20]
 80009d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009d4:	4b2d      	ldr	r3, [pc, #180]	; (8000a8c <MX_TIM3_Init+0xe8>)
 80009d6:	4a2e      	ldr	r2, [pc, #184]	; (8000a90 <MX_TIM3_Init+0xec>)
 80009d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80009da:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <MX_TIM3_Init+0xe8>)
 80009dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b2a      	ldr	r3, [pc, #168]	; (8000a8c <MX_TIM3_Init+0xe8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9998;
 80009e8:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_TIM3_Init+0xe8>)
 80009ea:	f242 720e 	movw	r2, #9998	; 0x270e
 80009ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_TIM3_Init+0xe8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_TIM3_Init+0xe8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009fc:	4823      	ldr	r0, [pc, #140]	; (8000a8c <MX_TIM3_Init+0xe8>)
 80009fe:	f001 fb39 	bl	8002074 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a08:	f000 f8e4 	bl	8000bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481c      	ldr	r0, [pc, #112]	; (8000a8c <MX_TIM3_Init+0xe8>)
 8000a1a:	f001 fe99 	bl	8002750 <HAL_TIM_ConfigClockSource>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000a24:	f000 f8d6 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <MX_TIM3_Init+0xe8>)
 8000a2a:	f001 fbd5 	bl	80021d8 <HAL_TIM_PWM_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a34:	f000 f8ce 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4619      	mov	r1, r3
 8000a46:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_TIM3_Init+0xe8>)
 8000a48:	f002 fa4a 	bl	8002ee0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a52:	f000 f8bf 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a56:	2360      	movs	r3, #96	; 0x60
 8000a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4999;
 8000a5a:	f241 3387 	movw	r3, #4999	; 0x1387
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4807      	ldr	r0, [pc, #28]	; (8000a8c <MX_TIM3_Init+0xe8>)
 8000a70:	f001 fdac 	bl	80025cc <HAL_TIM_PWM_ConfigChannel>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000a7a:	f000 f8ab 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a7e:	4803      	ldr	r0, [pc, #12]	; (8000a8c <MX_TIM3_Init+0xe8>)
 8000a80:	f000 f950 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	; 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000010c 	.word	0x2000010c
 8000a90:	40000400 	.word	0x40000400

08000a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <MX_USART2_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000acc:	f002 fadc 	bl	8003088 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f000 f87d 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000154 	.word	0x20000154
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b2e      	ldr	r3, [pc, #184]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2121      	movs	r1, #33	; 0x21
 8000b72:	4816      	ldr	r0, [pc, #88]	; (8000bcc <MX_GPIO_Init+0xe4>)
 8000b74:	f000 fd8e 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b7e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <MX_GPIO_Init+0xe8>)
 8000b90:	f000 fbfc 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 8000b94:	2321      	movs	r3, #33	; 0x21
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4808      	ldr	r0, [pc, #32]	; (8000bcc <MX_GPIO_Init+0xe4>)
 8000bac:	f000 fbee 	bl	800138c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2102      	movs	r1, #2
 8000bb4:	2028      	movs	r0, #40	; 0x28
 8000bb6:	f000 fbb2 	bl	800131e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bba:	2028      	movs	r0, #40	; 0x28
 8000bbc:	f000 fbcb 	bl	8001356 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020800 	.word	0x40020800

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	6413      	str	r3, [r2, #64]	; 0x40
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000c1e:	2005      	movs	r0, #5
 8000c20:	f000 fb72 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a36      	ldr	r2, [pc, #216]	; (8000d18 <HAL_TIM_Base_MspInit+0xe8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12e      	bne.n	8000ca0 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	4a34      	ldr	r2, [pc, #208]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6453      	str	r3, [r2, #68]	; 0x44
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2102      	movs	r1, #2
 8000c62:	2018      	movs	r0, #24
 8000c64:	f000 fb5b 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c68:	2018      	movs	r0, #24
 8000c6a:	f000 fb74 	bl	8001356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2102      	movs	r1, #2
 8000c72:	2019      	movs	r0, #25
 8000c74:	f000 fb53 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c78:	2019      	movs	r0, #25
 8000c7a:	f000 fb6c 	bl	8001356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	201a      	movs	r0, #26
 8000c84:	f000 fb4b 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c88:	201a      	movs	r0, #26
 8000c8a:	f000 fb64 	bl	8001356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 2, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2102      	movs	r1, #2
 8000c92:	201b      	movs	r0, #27
 8000c94:	f000 fb43 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c98:	201b      	movs	r0, #27
 8000c9a:	f000 fb5c 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c9e:	e036      	b.n	8000d0e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d116      	bne.n	8000cd8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2102      	movs	r1, #2
 8000cca:	201c      	movs	r0, #28
 8000ccc:	f000 fb27 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd0:	201c      	movs	r0, #28
 8000cd2:	f000 fb40 	bl	8001356 <HAL_NVIC_EnableIRQ>
}
 8000cd6:	e01a      	b.n	8000d0e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_TIM_Base_MspInit+0xf0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d115      	bne.n	8000d0e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_TIM_Base_MspInit+0xec>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2102      	movs	r1, #2
 8000d02:	201d      	movs	r0, #29
 8000d04:	f000 fb0b 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d08:	201d      	movs	r0, #29
 8000d0a:	f000 fb24 	bl	8001356 <HAL_NVIC_EnableIRQ>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40000400 	.word	0x40000400

08000d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a37      	ldr	r2, [pc, #220]	; (8000e20 <HAL_TIM_MspPostInit+0xfc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d11f      	bne.n	8000d86 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a35      	ldr	r2, [pc, #212]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	482a      	ldr	r0, [pc, #168]	; (8000e28 <HAL_TIM_MspPostInit+0x104>)
 8000d80:	f000 fb04 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d84:	e047      	b.n	8000e16 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d8e:	d11f      	bne.n	8000dd0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000d9a:	f043 0301 	orr.w	r3, r3, #1
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4817      	ldr	r0, [pc, #92]	; (8000e28 <HAL_TIM_MspPostInit+0x104>)
 8000dca:	f000 fadf 	bl	800138c <HAL_GPIO_Init>
}
 8000dce:	e022      	b.n	8000e16 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a15      	ldr	r2, [pc, #84]	; (8000e2c <HAL_TIM_MspPostInit+0x108>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d11d      	bne.n	8000e16 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_TIM_MspPostInit+0x100>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e06:	2302      	movs	r3, #2
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <HAL_TIM_MspPostInit+0x10c>)
 8000e12:	f000 fabb 	bl	800138c <HAL_GPIO_Init>
}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	; 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40010000 	.word	0x40010000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40000400 	.word	0x40000400
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_UART_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8e:	230c      	movs	r3, #12
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_UART_MspInit+0x8c>)
 8000eaa:	f000 fa6f 	bl	800138c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40004400 	.word	0x40004400
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f10:	f000 f90a 	bl	8001128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000f1e:	f001 fa65 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000007c 	.word	0x2000007c

08000f2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f32:	f001 fa5b 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000007c 	.word	0x2000007c

08000f40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f46:	f001 fa51 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000007c 	.word	0x2000007c

08000f54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM1_CC_IRQHandler+0x10>)
 8000f5a:	f001 fa47 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000007c 	.word	0x2000007c

08000f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM2_IRQHandler+0x10>)
 8000f6e:	f001 fa3d 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000c4 	.word	0x200000c4

08000f7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <TIM3_IRQHandler+0x10>)
 8000f82:	f001 fa33 	bl	80023ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000010c 	.word	0x2000010c

08000f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f98:	f000 fbb0 	bl	80016fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f002 fd5a 	bl	8003a88 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20020000 	.word	0x20020000
 8001000:	00000400 	.word	0x00000400
 8001004:	200001a4 	.word	0x200001a4
 8001008:	200002f8 	.word	0x200002f8

0800100c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	; (800107c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f002 fd19 	bl	8003a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff faf9 	bl	8000658 <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001074:	080042b8 	.word	0x080042b8
  ldr r2, =_sbss
 8001078:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800107c:	200002f4 	.word	0x200002f4

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f92b 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fd92 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f943 	bl	8001372 <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f90b 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000004 	.word	0x20000004
 8001120:	2000000c 	.word	0x2000000c
 8001124:	20000008 	.word	0x20000008

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	2000000c 	.word	0x2000000c
 800114c:	200001a8 	.word	0x200001a8

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200001a8 	.word	0x200001a8

08001168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119a:	4a04      	ldr	r2, [pc, #16]	; (80011ac <__NVIC_SetPriorityGrouping+0x44>)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	60d3      	str	r3, [r2, #12]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <__NVIC_GetPriorityGrouping+0x18>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0307 	and.w	r3, r3, #7
}
 80011be:	4618      	mov	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	db0b      	blt.n	80011f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f003 021f 	and.w	r2, r3, #31
 80011e4:	4907      	ldr	r1, [pc, #28]	; (8001204 <__NVIC_EnableIRQ+0x38>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	095b      	lsrs	r3, r3, #5
 80011ec:	2001      	movs	r0, #1
 80011ee:	fa00 f202 	lsl.w	r2, r0, r2
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	; (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	; (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	; 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff8e 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff29 	bl	8001168 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff3e 	bl	80011b0 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff8e 	bl	800125c <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5d 	bl	8001208 <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff31 	bl	80011cc <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e159      	b.n	800165c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 8148 	bne.w	8001656 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a2 	beq.w	8001656 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b57      	ldr	r3, [pc, #348]	; (8001674 <HAL_GPIO_Init+0x2e8>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a56      	ldr	r2, [pc, #344]	; (8001674 <HAL_GPIO_Init+0x2e8>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b54      	ldr	r3, [pc, #336]	; (8001674 <HAL_GPIO_Init+0x2e8>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a52      	ldr	r2, [pc, #328]	; (8001678 <HAL_GPIO_Init+0x2ec>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <HAL_GPIO_Init+0x2f0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d019      	beq.n	800158e <HAL_GPIO_Init+0x202>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <HAL_GPIO_Init+0x2f4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d013      	beq.n	800158a <HAL_GPIO_Init+0x1fe>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <HAL_GPIO_Init+0x2f8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d00d      	beq.n	8001586 <HAL_GPIO_Init+0x1fa>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <HAL_GPIO_Init+0x2fc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d007      	beq.n	8001582 <HAL_GPIO_Init+0x1f6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <HAL_GPIO_Init+0x300>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d101      	bne.n	800157e <HAL_GPIO_Init+0x1f2>
 800157a:	2304      	movs	r3, #4
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x204>
 800157e:	2307      	movs	r3, #7
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x204>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x204>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x204>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x204>
 800158e:	2300      	movs	r3, #0
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <HAL_GPIO_Init+0x2ec>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <HAL_GPIO_Init+0x304>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <HAL_GPIO_Init+0x304>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_GPIO_Init+0x304>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015fc:	4a24      	ldr	r2, [pc, #144]	; (8001690 <HAL_GPIO_Init+0x304>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001602:	4b23      	ldr	r3, [pc, #140]	; (8001690 <HAL_GPIO_Init+0x304>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001626:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <HAL_GPIO_Init+0x304>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <HAL_GPIO_Init+0x304>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001650:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <HAL_GPIO_Init+0x304>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	f67f aea2 	bls.w	80013a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021000 	.word	0x40021000
 8001690:	40013c00 	.word	0x40013c00

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	619a      	str	r2, [r3, #24]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d8:	887a      	ldrh	r2, [r7, #2]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4013      	ands	r3, r2
 80016de:	041a      	lsls	r2, r3, #16
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	400b      	ands	r3, r1
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	619a      	str	r2, [r3, #24]
}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f806 	bl	800172c <HAL_GPIO_EXTI_Callback>
  }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e267      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d075      	beq.n	800184e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001762:	4b88      	ldr	r3, [pc, #544]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b04      	cmp	r3, #4
 800176c:	d00c      	beq.n	8001788 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4b85      	ldr	r3, [pc, #532]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001776:	2b08      	cmp	r3, #8
 8001778:	d112      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177a:	4b82      	ldr	r3, [pc, #520]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001786:	d10b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05b      	beq.n	800184c <HAL_RCC_OscConfig+0x108>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d157      	bne.n	800184c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e242      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x74>
 80017aa:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e01d      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b70      	ldr	r3, [pc, #448]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6f      	ldr	r2, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6c      	ldr	r2, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0xb0>
 80017dc:	4b69      	ldr	r3, [pc, #420]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a68      	ldr	r2, [pc, #416]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b66      	ldr	r3, [pc, #408]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a65      	ldr	r2, [pc, #404]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80017ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fca8 	bl	8001150 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fca4 	bl	8001150 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e207      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0xc0>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fc94 	bl	8001150 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fc90 	bl	8001150 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1f3      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	4b51      	ldr	r3, [pc, #324]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0xe8>
 800184a:	e000      	b.n	800184e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d063      	beq.n	8001922 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186e:	2b08      	cmp	r3, #8
 8001870:	d11c      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d116      	bne.n	80018ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	4b41      	ldr	r3, [pc, #260]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e1c7      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	e03a      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d020      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b4:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fc49 	bl	8001150 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc45 	bl	8001150 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e1a8      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0f0      	beq.n	80018c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4925      	ldr	r1, [pc, #148]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_OscConfig+0x244>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fc28 	bl	8001150 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff fc24 	bl	8001150 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e187      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b00      	cmp	r3, #0
 800192c:	d036      	beq.n	800199c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d016      	beq.n	8001964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fc08 	bl	8001150 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fc04 	bl	8001150 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e167      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <HAL_RCC_OscConfig+0x240>)
 8001958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x200>
 8001962:	e01b      	b.n	800199c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x248>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff fbf1 	bl	8001150 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	e00e      	b.n	8001990 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff fbed 	bl	8001150 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d907      	bls.n	8001990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e150      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001990:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ea      	bne.n	8001972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8097 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ae:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ca:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019da:	4b77      	ldr	r3, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d118      	bne.n	8001a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e6:	4b74      	ldr	r3, [pc, #464]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a73      	ldr	r2, [pc, #460]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fbad 	bl	8001150 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fa:	f7ff fba9 	bl	8001150 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e10c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x474>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d106      	bne.n	8001a2e <HAL_RCC_OscConfig+0x2ea>
 8001a20:	4b64      	ldr	r3, [pc, #400]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	e01c      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d10c      	bne.n	8001a50 <HAL_RCC_OscConfig+0x30c>
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a5e      	ldr	r2, [pc, #376]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a46:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4e:	e00b      	b.n	8001a68 <HAL_RCC_OscConfig+0x324>
 8001a50:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a57      	ldr	r2, [pc, #348]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a54      	ldr	r2, [pc, #336]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	f023 0304 	bic.w	r3, r3, #4
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d015      	beq.n	8001a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff fb6e 	bl	8001150 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a78:	f7ff fb6a 	bl	8001150 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e0cb      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0ee      	beq.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fb58 	bl	8001150 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb54 	bl	8001150 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0b5      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aba:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1ee      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80a1 	beq.w	8001c24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ae2:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d05c      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d141      	bne.n	8001b7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fb28 	bl	8001150 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff fb24 	bl	8001150 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e087      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	019b      	lsls	r3, r3, #6
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	085b      	lsrs	r3, r3, #1
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	491b      	ldr	r1, [pc, #108]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fafd 	bl	8001150 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff faf9 	bl	8001150 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e05c      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x416>
 8001b78:	e054      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_RCC_OscConfig+0x478>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fae6 	bl	8001150 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fae2 	bl	8001150 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e045      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
 8001ba6:	e03d      	b.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e038      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40007000 	.word	0x40007000
 8001bbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x4ec>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d028      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d121      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d11a      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d111      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0cc      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d90c      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b65      	ldr	r3, [pc, #404]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0b8      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c88:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a52      	ldr	r2, [pc, #328]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	494d      	ldr	r1, [pc, #308]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d044      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d119      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e07f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e06f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e067      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d12:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f023 0203 	bic.w	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4934      	ldr	r1, [pc, #208]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7ff fa14 	bl	8001150 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2c:	f7ff fa10 	bl	8001150 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e04f      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 020c 	and.w	r2, r3, #12
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1eb      	bne.n	8001d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d20c      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_ClockConfig+0x1b8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e032      	b.n	8001de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4916      	ldr	r1, [pc, #88]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dba:	f000 f821 	bl	8001e00 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	490a      	ldr	r1, [pc, #40]	; (8001df4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	5ccb      	ldrb	r3, [r1, r3]
 8001dce:	fa22 f303 	lsr.w	r3, r2, r3
 8001dd2:	4a09      	ldr	r2, [pc, #36]	; (8001df8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f974 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00
 8001df0:	40023800 	.word	0x40023800
 8001df4:	0800425c 	.word	0x0800425c
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	20000008 	.word	0x20000008

08001e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e04:	b094      	sub	sp, #80	; 0x50
 8001e06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e10:	2300      	movs	r3, #0
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e18:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d00d      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x40>
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	f200 80e1 	bhi.w	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x34>
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e32:	e0db      	b.n	8001fec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e34:	4b73      	ldr	r3, [pc, #460]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e38:	e0db      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e3a:	4b73      	ldr	r3, [pc, #460]	; (8002008 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3e:	e0d8      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d063      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e72:	4622      	mov	r2, r4
 8001e74:	462b      	mov	r3, r5
 8001e76:	f04f 0000 	mov.w	r0, #0
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	0159      	lsls	r1, r3, #5
 8001e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e84:	0150      	lsls	r0, r2, #5
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	1a51      	subs	r1, r2, r1
 8001e8e:	6139      	str	r1, [r7, #16]
 8001e90:	4629      	mov	r1, r5
 8001e92:	eb63 0301 	sbc.w	r3, r3, r1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ea4:	4659      	mov	r1, fp
 8001ea6:	018b      	lsls	r3, r1, #6
 8001ea8:	4651      	mov	r1, sl
 8001eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001eae:	4651      	mov	r1, sl
 8001eb0:	018a      	lsls	r2, r1, #6
 8001eb2:	4651      	mov	r1, sl
 8001eb4:	ebb2 0801 	subs.w	r8, r2, r1
 8001eb8:	4659      	mov	r1, fp
 8001eba:	eb63 0901 	sbc.w	r9, r3, r1
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ed2:	4690      	mov	r8, r2
 8001ed4:	4699      	mov	r9, r3
 8001ed6:	4623      	mov	r3, r4
 8001ed8:	eb18 0303 	adds.w	r3, r8, r3
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	462b      	mov	r3, r5
 8001ee0:	eb49 0303 	adc.w	r3, r9, r3
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	024b      	lsls	r3, r1, #9
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001efc:	4621      	mov	r1, r4
 8001efe:	024a      	lsls	r2, r1, #9
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	2200      	movs	r2, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f10:	f7fe f9be 	bl	8000290 <__aeabi_uldivmod>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4613      	mov	r3, r2
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f1c:	e058      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	2200      	movs	r2, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	4611      	mov	r1, r2
 8001f2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f38:	4642      	mov	r2, r8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	f04f 0000 	mov.w	r0, #0
 8001f40:	f04f 0100 	mov.w	r1, #0
 8001f44:	0159      	lsls	r1, r3, #5
 8001f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4a:	0150      	lsls	r0, r2, #5
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4641      	mov	r1, r8
 8001f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f56:	4649      	mov	r1, r9
 8001f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f70:	ebb2 040a 	subs.w	r4, r2, sl
 8001f74:	eb63 050b 	sbc.w	r5, r3, fp
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	00eb      	lsls	r3, r5, #3
 8001f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f86:	00e2      	lsls	r2, r4, #3
 8001f88:	4614      	mov	r4, r2
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	4643      	mov	r3, r8
 8001f8e:	18e3      	adds	r3, r4, r3
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	464b      	mov	r3, r9
 8001f94:	eb45 0303 	adc.w	r3, r5, r3
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	028b      	lsls	r3, r1, #10
 8001faa:	4621      	mov	r1, r4
 8001fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb0:	4621      	mov	r1, r4
 8001fb2:	028a      	lsls	r2, r1, #10
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	61fa      	str	r2, [r7, #28]
 8001fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc4:	f7fe f964 	bl	8000290 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fea:	e002      	b.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3750      	adds	r7, #80	; 0x50
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	00f42400 	.word	0x00f42400
 8002008:	007a1200 	.word	0x007a1200

0800200c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <HAL_RCC_GetHCLKFreq+0x14>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002028:	f7ff fff0 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800202c:	4602      	mov	r2, r0
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a9b      	lsrs	r3, r3, #10
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4903      	ldr	r1, [pc, #12]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203a:	5ccb      	ldrb	r3, [r1, r3]
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002040:	4618      	mov	r0, r3
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	0800426c 	.word	0x0800426c

0800204c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002050:	f7ff ffdc 	bl	800200c <HAL_RCC_GetHCLKFreq>
 8002054:	4602      	mov	r2, r0
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0b5b      	lsrs	r3, r3, #13
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002062:	5ccb      	ldrb	r3, [r1, r3]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002068:	4618      	mov	r0, r3
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	0800426c 	.word	0x0800426c

08002074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e041      	b.n	800210a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fdc8 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4610      	mov	r0, r2
 80020b4:	f000 fc3c 	bl	8002930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e044      	b.n	80021b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d018      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002156:	d013      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00e      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_TIM_Base_Start_IT+0xb8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_TIM_Base_Start_IT+0x6c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d111      	bne.n	80021a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b06      	cmp	r3, #6
 8002190:	d010      	beq.n	80021b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a2:	e007      	b.n	80021b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0201 	orr.w	r2, r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40000800 	.word	0x40000800
 80021d0:	40000c00 	.word	0x40000c00
 80021d4:	40014000 	.word	0x40014000

080021d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e041      	b.n	800226e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f839 	bl	8002276 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fb8a 	bl	8002930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d109      	bne.n	80022b0 <HAL_TIM_PWM_Start+0x24>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e022      	b.n	80022f6 <HAL_TIM_PWM_Start+0x6a>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d109      	bne.n	80022ca <HAL_TIM_PWM_Start+0x3e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	e015      	b.n	80022f6 <HAL_TIM_PWM_Start+0x6a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d109      	bne.n	80022e4 <HAL_TIM_PWM_Start+0x58>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e008      	b.n	80022f6 <HAL_TIM_PWM_Start+0x6a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e068      	b.n	80023d0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <HAL_TIM_PWM_Start+0x82>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800230c:	e013      	b.n	8002336 <HAL_TIM_PWM_Start+0xaa>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d104      	bne.n	800231e <HAL_TIM_PWM_Start+0x92>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2202      	movs	r2, #2
 8002318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800231c:	e00b      	b.n	8002336 <HAL_TIM_PWM_Start+0xaa>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d104      	bne.n	800232e <HAL_TIM_PWM_Start+0xa2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800232c:	e003      	b.n	8002336 <HAL_TIM_PWM_Start+0xaa>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fda8 	bl	8002e94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_TIM_PWM_Start+0x14c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d107      	bne.n	800235e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_TIM_PWM_Start+0x14c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d018      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002370:	d013      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_TIM_PWM_Start+0x150>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00e      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a17      	ldr	r2, [pc, #92]	; (80023e0 <HAL_TIM_PWM_Start+0x154>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_TIM_PWM_Start+0x158>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_TIM_PWM_Start+0x10e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <HAL_TIM_PWM_Start+0x15c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d111      	bne.n	80023be <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b06      	cmp	r3, #6
 80023aa:	d010      	beq.n	80023ce <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023bc:	e007      	b.n	80023ce <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0201 	orr.w	r2, r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800
 80023e4:	40000c00 	.word	0x40000c00
 80023e8:	40014000 	.word	0x40014000

080023ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d020      	beq.n	8002450 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01b      	beq.n	8002450 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0202 	mvn.w	r2, #2
 8002420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa5b 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa4d 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa5e 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	d020      	beq.n	800249c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0204 	mvn.w	r2, #4
 800246c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa35 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 8002488:	e005      	b.n	8002496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa27 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa38 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d020      	beq.n	80024e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01b      	beq.n	80024e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0208 	mvn.w	r2, #8
 80024b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2204      	movs	r2, #4
 80024be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 fa0f 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 80024d4:	e005      	b.n	80024e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa01 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fa12 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d020      	beq.n	8002534 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01b      	beq.n	8002534 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0210 	mvn.w	r2, #16
 8002504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2208      	movs	r2, #8
 800250a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9e9 	bl	80028f2 <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9db 	bl	80028de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9ec 	bl	8002906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0201 	mvn.w	r2, #1
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe f81a 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 fd7c 	bl	8003074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f9bd 	bl	800291a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 0320 	and.w	r3, r3, #32
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0220 	mvn.w	r2, #32
 80025bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fd4e 	bl	8003060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e0ae      	b.n	8002748 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b0c      	cmp	r3, #12
 80025f6:	f200 809f 	bhi.w	8002738 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025fa:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002600:	08002635 	.word	0x08002635
 8002604:	08002739 	.word	0x08002739
 8002608:	08002739 	.word	0x08002739
 800260c:	08002739 	.word	0x08002739
 8002610:	08002675 	.word	0x08002675
 8002614:	08002739 	.word	0x08002739
 8002618:	08002739 	.word	0x08002739
 800261c:	08002739 	.word	0x08002739
 8002620:	080026b7 	.word	0x080026b7
 8002624:	08002739 	.word	0x08002739
 8002628:	08002739 	.word	0x08002739
 800262c:	08002739 	.word	0x08002739
 8002630:	080026f7 	.word	0x080026f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fa04 	bl	8002a48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0208 	orr.w	r2, r2, #8
 800264e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6999      	ldr	r1, [r3, #24]
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	619a      	str	r2, [r3, #24]
      break;
 8002672:	e064      	b.n	800273e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68b9      	ldr	r1, [r7, #8]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fa4a 	bl	8002b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699a      	ldr	r2, [r3, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6999      	ldr	r1, [r3, #24]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	021a      	lsls	r2, r3, #8
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	619a      	str	r2, [r3, #24]
      break;
 80026b4:	e043      	b.n	800273e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fa95 	bl	8002bec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69da      	ldr	r2, [r3, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0208 	orr.w	r2, r2, #8
 80026d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0204 	bic.w	r2, r2, #4
 80026e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69d9      	ldr	r1, [r3, #28]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	61da      	str	r2, [r3, #28]
      break;
 80026f4:	e023      	b.n	800273e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 fadf 	bl	8002cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69da      	ldr	r2, [r3, #28]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69d9      	ldr	r1, [r3, #28]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	021a      	lsls	r2, r3, #8
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	61da      	str	r2, [r3, #28]
      break;
 8002736:	e002      	b.n	800273e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	75fb      	strb	r3, [r7, #23]
      break;
 800273c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002746:	7dfb      	ldrb	r3, [r7, #23]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_TIM_ConfigClockSource+0x1c>
 8002768:	2302      	movs	r3, #2
 800276a:	e0b4      	b.n	80028d6 <HAL_TIM_ConfigClockSource+0x186>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800278a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a4:	d03e      	beq.n	8002824 <HAL_TIM_ConfigClockSource+0xd4>
 80027a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027aa:	f200 8087 	bhi.w	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b2:	f000 8086 	beq.w	80028c2 <HAL_TIM_ConfigClockSource+0x172>
 80027b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ba:	d87f      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b70      	cmp	r3, #112	; 0x70
 80027be:	d01a      	beq.n	80027f6 <HAL_TIM_ConfigClockSource+0xa6>
 80027c0:	2b70      	cmp	r3, #112	; 0x70
 80027c2:	d87b      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027c4:	2b60      	cmp	r3, #96	; 0x60
 80027c6:	d050      	beq.n	800286a <HAL_TIM_ConfigClockSource+0x11a>
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d877      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b50      	cmp	r3, #80	; 0x50
 80027ce:	d03c      	beq.n	800284a <HAL_TIM_ConfigClockSource+0xfa>
 80027d0:	2b50      	cmp	r3, #80	; 0x50
 80027d2:	d873      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d058      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x13a>
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d86f      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b30      	cmp	r3, #48	; 0x30
 80027de:	d064      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d86b      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d060      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d867      	bhi.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d05c      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d05a      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x15a>
 80027f4:	e062      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002806:	f000 fb25 	bl	8002e54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	609a      	str	r2, [r3, #8]
      break;
 8002822:	e04f      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	f000 fb0e 	bl	8002e54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002846:	609a      	str	r2, [r3, #8]
      break;
 8002848:	e03c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	461a      	mov	r2, r3
 8002858:	f000 fa82 	bl	8002d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2150      	movs	r1, #80	; 0x50
 8002862:	4618      	mov	r0, r3
 8002864:	f000 fadb 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002868:	e02c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002876:	461a      	mov	r2, r3
 8002878:	f000 faa1 	bl	8002dbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2160      	movs	r1, #96	; 0x60
 8002882:	4618      	mov	r0, r3
 8002884:	f000 facb 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 8002888:	e01c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	461a      	mov	r2, r3
 8002898:	f000 fa62 	bl	8002d60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fabb 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 80028a8:	e00c      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 fab2 	bl	8002e1e <TIM_ITRx_SetConfig>
      break;
 80028ba:	e003      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
      break;
 80028c0:	e000      	b.n	80028c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a3a      	ldr	r2, [pc, #232]	; (8002a2c <TIM_Base_SetConfig+0xfc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00f      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d00b      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a37      	ldr	r2, [pc, #220]	; (8002a30 <TIM_Base_SetConfig+0x100>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a36      	ldr	r2, [pc, #216]	; (8002a34 <TIM_Base_SetConfig+0x104>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0x38>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a35      	ldr	r2, [pc, #212]	; (8002a38 <TIM_Base_SetConfig+0x108>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d108      	bne.n	800297a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a2b      	ldr	r2, [pc, #172]	; (8002a2c <TIM_Base_SetConfig+0xfc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01b      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d017      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a28      	ldr	r2, [pc, #160]	; (8002a30 <TIM_Base_SetConfig+0x100>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d013      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <TIM_Base_SetConfig+0x104>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00f      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <TIM_Base_SetConfig+0x108>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a25      	ldr	r2, [pc, #148]	; (8002a3c <TIM_Base_SetConfig+0x10c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a24      	ldr	r2, [pc, #144]	; (8002a40 <TIM_Base_SetConfig+0x110>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_Base_SetConfig+0x8a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <TIM_Base_SetConfig+0x114>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d108      	bne.n	80029cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a0e      	ldr	r2, [pc, #56]	; (8002a2c <TIM_Base_SetConfig+0xfc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d103      	bne.n	8002a00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d105      	bne.n	8002a1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	611a      	str	r2, [r3, #16]
  }
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	40000400 	.word	0x40000400
 8002a34:	40000800 	.word	0x40000800
 8002a38:	40000c00 	.word	0x40000c00
 8002a3c:	40014000 	.word	0x40014000
 8002a40:	40014400 	.word	0x40014400
 8002a44:	40014800 	.word	0x40014800

08002a48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	f023 0201 	bic.w	r2, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 0302 	bic.w	r3, r3, #2
 8002a90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <TIM_OC1_SetConfig+0xc8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d10c      	bne.n	8002abe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0308 	bic.w	r3, r3, #8
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <TIM_OC1_SetConfig+0xc8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d111      	bne.n	8002aea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	621a      	str	r2, [r3, #32]
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40010000 	.word	0x40010000

08002b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 0210 	bic.w	r2, r3, #16
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0320 	bic.w	r3, r3, #32
 8002b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <TIM_OC2_SetConfig+0xd4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d10d      	bne.n	8002b90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <TIM_OC2_SetConfig+0xd4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d113      	bne.n	8002bc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40010000 	.word	0x40010000

08002bec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <TIM_OC3_SetConfig+0xd0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10d      	bne.n	8002c66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <TIM_OC3_SetConfig+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d113      	bne.n	8002c96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	621a      	str	r2, [r3, #32]
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40010000 	.word	0x40010000

08002cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	031b      	lsls	r3, r3, #12
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <TIM_OC4_SetConfig+0x9c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d109      	bne.n	8002d34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	019b      	lsls	r3, r3, #6
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	621a      	str	r2, [r3, #32]
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000

08002d60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f023 030a 	bic.w	r3, r3, #10
 8002d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b087      	sub	sp, #28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f023 0210 	bic.w	r2, r3, #16
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	031b      	lsls	r3, r3, #12
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f043 0307 	orr.w	r3, r3, #7
 8002e40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	021a      	lsls	r2, r3, #8
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a1a      	ldr	r2, [r3, #32]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e050      	b.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d018      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f44:	d013      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10c      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000800 	.word	0x40000800
 8002fb4:	40000c00 	.word	0x40000c00
 8002fb8:	40014000 	.word	0x40014000

08002fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e03d      	b.n	8003054 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e042      	b.n	8003120 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fec0 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f973 	bl	80033b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	d175      	bne.n	8003234 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_UART_Transmit+0x2c>
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e06e      	b.n	8003236 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2221      	movs	r2, #33	; 0x21
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003166:	f7fd fff3 	bl	8001150 <HAL_GetTick>
 800316a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	88fa      	ldrh	r2, [r7, #6]
 8003176:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003180:	d108      	bne.n	8003194 <HAL_UART_Transmit+0x6c>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e003      	b.n	800319c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800319c:	e02e      	b.n	80031fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f000 f848 	bl	800323e <UART_WaitOnFlagUntilTimeout>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03a      	b.n	8003236 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	3302      	adds	r3, #2
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e007      	b.n	80031ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	781a      	ldrb	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1cb      	bne.n	800319e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2200      	movs	r2, #0
 800320e:	2140      	movs	r1, #64	; 0x40
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f814 	bl	800323e <UART_WaitOnFlagUntilTimeout>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e006      	b.n	8003236 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	e000      	b.n	8003236 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	4613      	mov	r3, r2
 800324c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800324e:	e03b      	b.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d037      	beq.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7fd ff7a 	bl	8001150 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	6a3a      	ldr	r2, [r7, #32]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <UART_WaitOnFlagUntilTimeout+0x30>
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e03a      	b.n	80032e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d023      	beq.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b80      	cmp	r3, #128	; 0x80
 8003284:	d020      	beq.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d01d      	beq.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b08      	cmp	r3, #8
 8003298:	d116      	bne.n	80032c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f81d 	bl	80032f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2208      	movs	r2, #8
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e00f      	b.n	80032e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d0b4      	beq.n	8003250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b095      	sub	sp, #84	; 0x54
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003302:	e853 3f00 	ldrex	r3, [r3]
 8003306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003318:	643a      	str	r2, [r7, #64]	; 0x40
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800331e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003320:	e841 2300 	strex	r3, r2, [r1]
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e5      	bne.n	80032f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	3314      	adds	r3, #20
 8003332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	61fb      	str	r3, [r7, #28]
   return(result);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f023 0301 	bic.w	r3, r3, #1
 8003342:	64bb      	str	r3, [r7, #72]	; 0x48
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3314      	adds	r3, #20
 800334a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003354:	e841 2300 	strex	r3, r2, [r1]
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1e5      	bne.n	800332c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	2b01      	cmp	r3, #1
 8003366:	d119      	bne.n	800339c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	60bb      	str	r3, [r7, #8]
   return(result);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f023 0310 	bic.w	r3, r3, #16
 800337e:	647b      	str	r3, [r7, #68]	; 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003388:	61ba      	str	r2, [r7, #24]
 800338a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6979      	ldr	r1, [r7, #20]
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	613b      	str	r3, [r7, #16]
   return(result);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033aa:	bf00      	nop
 80033ac:	3754      	adds	r7, #84	; 0x54
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b0c0      	sub	sp, #256	; 0x100
 80033be:	af00      	add	r7, sp, #0
 80033c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	ea40 0301 	orr.w	r3, r0, r1
 80033e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003410:	f021 010c 	bic.w	r1, r1, #12
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800341e:	430b      	orrs	r3, r1
 8003420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	6999      	ldr	r1, [r3, #24]
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	ea40 0301 	orr.w	r3, r0, r1
 800343e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b8f      	ldr	r3, [pc, #572]	; (8003684 <UART_SetConfig+0x2cc>)
 8003448:	429a      	cmp	r2, r3
 800344a:	d005      	beq.n	8003458 <UART_SetConfig+0xa0>
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b8d      	ldr	r3, [pc, #564]	; (8003688 <UART_SetConfig+0x2d0>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d104      	bne.n	8003462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7fe fdf8 	bl	800204c <HAL_RCC_GetPCLK2Freq>
 800345c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003460:	e003      	b.n	800346a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003462:	f7fe fddf 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8003466:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	f040 810c 	bne.w	8003690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347c:	2200      	movs	r2, #0
 800347e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003482:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	1891      	adds	r1, r2, r2
 8003490:	65b9      	str	r1, [r7, #88]	; 0x58
 8003492:	415b      	adcs	r3, r3
 8003494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800349a:	4621      	mov	r1, r4
 800349c:	eb12 0801 	adds.w	r8, r2, r1
 80034a0:	4629      	mov	r1, r5
 80034a2:	eb43 0901 	adc.w	r9, r3, r1
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ba:	4690      	mov	r8, r2
 80034bc:	4699      	mov	r9, r3
 80034be:	4623      	mov	r3, r4
 80034c0:	eb18 0303 	adds.w	r3, r8, r3
 80034c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034c8:	462b      	mov	r3, r5
 80034ca:	eb49 0303 	adc.w	r3, r9, r3
 80034ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034e6:	460b      	mov	r3, r1
 80034e8:	18db      	adds	r3, r3, r3
 80034ea:	653b      	str	r3, [r7, #80]	; 0x50
 80034ec:	4613      	mov	r3, r2
 80034ee:	eb42 0303 	adc.w	r3, r2, r3
 80034f2:	657b      	str	r3, [r7, #84]	; 0x54
 80034f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034fc:	f7fc fec8 	bl	8000290 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <UART_SetConfig+0x2d4>)
 8003506:	fba3 2302 	umull	r2, r3, r3, r2
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	011c      	lsls	r4, r3, #4
 800350e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800351c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	1891      	adds	r1, r2, r2
 8003526:	64b9      	str	r1, [r7, #72]	; 0x48
 8003528:	415b      	adcs	r3, r3
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800352c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003530:	4641      	mov	r1, r8
 8003532:	eb12 0a01 	adds.w	sl, r2, r1
 8003536:	4649      	mov	r1, r9
 8003538:	eb43 0b01 	adc.w	fp, r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800354c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003550:	4692      	mov	sl, r2
 8003552:	469b      	mov	fp, r3
 8003554:	4643      	mov	r3, r8
 8003556:	eb1a 0303 	adds.w	r3, sl, r3
 800355a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800355e:	464b      	mov	r3, r9
 8003560:	eb4b 0303 	adc.w	r3, fp, r3
 8003564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800357c:	460b      	mov	r3, r1
 800357e:	18db      	adds	r3, r3, r3
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
 8003582:	4613      	mov	r3, r2
 8003584:	eb42 0303 	adc.w	r3, r2, r3
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
 800358a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800358e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003592:	f7fc fe7d 	bl	8000290 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4611      	mov	r1, r2
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <UART_SetConfig+0x2d4>)
 800359e:	fba3 2301 	umull	r2, r3, r3, r1
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	2264      	movs	r2, #100	; 0x64
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	1acb      	subs	r3, r1, r3
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <UART_SetConfig+0x2d4>)
 80035b4:	fba3 2302 	umull	r2, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035c0:	441c      	add	r4, r3
 80035c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035d4:	4642      	mov	r2, r8
 80035d6:	464b      	mov	r3, r9
 80035d8:	1891      	adds	r1, r2, r2
 80035da:	63b9      	str	r1, [r7, #56]	; 0x38
 80035dc:	415b      	adcs	r3, r3
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035e4:	4641      	mov	r1, r8
 80035e6:	1851      	adds	r1, r2, r1
 80035e8:	6339      	str	r1, [r7, #48]	; 0x30
 80035ea:	4649      	mov	r1, r9
 80035ec:	414b      	adcs	r3, r1
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035fc:	4659      	mov	r1, fp
 80035fe:	00cb      	lsls	r3, r1, #3
 8003600:	4651      	mov	r1, sl
 8003602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003606:	4651      	mov	r1, sl
 8003608:	00ca      	lsls	r2, r1, #3
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	4603      	mov	r3, r0
 8003610:	4642      	mov	r2, r8
 8003612:	189b      	adds	r3, r3, r2
 8003614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003618:	464b      	mov	r3, r9
 800361a:	460a      	mov	r2, r1
 800361c:	eb42 0303 	adc.w	r3, r2, r3
 8003620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003630:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003638:	460b      	mov	r3, r1
 800363a:	18db      	adds	r3, r3, r3
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
 800363e:	4613      	mov	r3, r2
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800364a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800364e:	f7fc fe1f 	bl	8000290 <__aeabi_uldivmod>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <UART_SetConfig+0x2d4>)
 8003658:	fba3 1302 	umull	r1, r3, r3, r2
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	2164      	movs	r1, #100	; 0x64
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	3332      	adds	r3, #50	; 0x32
 800366a:	4a08      	ldr	r2, [pc, #32]	; (800368c <UART_SetConfig+0x2d4>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	f003 0207 	and.w	r2, r3, #7
 8003676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4422      	add	r2, r4
 800367e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003680:	e106      	b.n	8003890 <UART_SetConfig+0x4d8>
 8003682:	bf00      	nop
 8003684:	40011000 	.word	0x40011000
 8003688:	40011400 	.word	0x40011400
 800368c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800369a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800369e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036a2:	4642      	mov	r2, r8
 80036a4:	464b      	mov	r3, r9
 80036a6:	1891      	adds	r1, r2, r2
 80036a8:	6239      	str	r1, [r7, #32]
 80036aa:	415b      	adcs	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036b2:	4641      	mov	r1, r8
 80036b4:	1854      	adds	r4, r2, r1
 80036b6:	4649      	mov	r1, r9
 80036b8:	eb43 0501 	adc.w	r5, r3, r1
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	00eb      	lsls	r3, r5, #3
 80036c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ca:	00e2      	lsls	r2, r4, #3
 80036cc:	4614      	mov	r4, r2
 80036ce:	461d      	mov	r5, r3
 80036d0:	4643      	mov	r3, r8
 80036d2:	18e3      	adds	r3, r4, r3
 80036d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d8:	464b      	mov	r3, r9
 80036da:	eb45 0303 	adc.w	r3, r5, r3
 80036de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036fe:	4629      	mov	r1, r5
 8003700:	008b      	lsls	r3, r1, #2
 8003702:	4621      	mov	r1, r4
 8003704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003708:	4621      	mov	r1, r4
 800370a:	008a      	lsls	r2, r1, #2
 800370c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003710:	f7fc fdbe 	bl	8000290 <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4b60      	ldr	r3, [pc, #384]	; (800389c <UART_SetConfig+0x4e4>)
 800371a:	fba3 2302 	umull	r2, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	011c      	lsls	r4, r3, #4
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800372c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	61b9      	str	r1, [r7, #24]
 800373c:	415b      	adcs	r3, r3
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003744:	4641      	mov	r1, r8
 8003746:	1851      	adds	r1, r2, r1
 8003748:	6139      	str	r1, [r7, #16]
 800374a:	4649      	mov	r1, r9
 800374c:	414b      	adcs	r3, r1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800375c:	4659      	mov	r1, fp
 800375e:	00cb      	lsls	r3, r1, #3
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003766:	4651      	mov	r1, sl
 8003768:	00ca      	lsls	r2, r1, #3
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	4603      	mov	r3, r0
 8003770:	4642      	mov	r2, r8
 8003772:	189b      	adds	r3, r3, r2
 8003774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003778:	464b      	mov	r3, r9
 800377a:	460a      	mov	r2, r1
 800377c:	eb42 0303 	adc.w	r3, r2, r3
 8003780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	67bb      	str	r3, [r7, #120]	; 0x78
 800378e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800379c:	4649      	mov	r1, r9
 800379e:	008b      	lsls	r3, r1, #2
 80037a0:	4641      	mov	r1, r8
 80037a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a6:	4641      	mov	r1, r8
 80037a8:	008a      	lsls	r2, r1, #2
 80037aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037ae:	f7fc fd6f 	bl	8000290 <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	4b38      	ldr	r3, [pc, #224]	; (800389c <UART_SetConfig+0x4e4>)
 80037ba:	fba3 2301 	umull	r2, r3, r3, r1
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	2264      	movs	r2, #100	; 0x64
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	1acb      	subs	r3, r1, r3
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	3332      	adds	r3, #50	; 0x32
 80037cc:	4a33      	ldr	r2, [pc, #204]	; (800389c <UART_SetConfig+0x4e4>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d8:	441c      	add	r4, r3
 80037da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037de:	2200      	movs	r2, #0
 80037e0:	673b      	str	r3, [r7, #112]	; 0x70
 80037e2:	677a      	str	r2, [r7, #116]	; 0x74
 80037e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037e8:	4642      	mov	r2, r8
 80037ea:	464b      	mov	r3, r9
 80037ec:	1891      	adds	r1, r2, r2
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	415b      	adcs	r3, r3
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f8:	4641      	mov	r1, r8
 80037fa:	1851      	adds	r1, r2, r1
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	4649      	mov	r1, r9
 8003800:	414b      	adcs	r3, r1
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003810:	4659      	mov	r1, fp
 8003812:	00cb      	lsls	r3, r1, #3
 8003814:	4651      	mov	r1, sl
 8003816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800381a:	4651      	mov	r1, sl
 800381c:	00ca      	lsls	r2, r1, #3
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	4603      	mov	r3, r0
 8003824:	4642      	mov	r2, r8
 8003826:	189b      	adds	r3, r3, r2
 8003828:	66bb      	str	r3, [r7, #104]	; 0x68
 800382a:	464b      	mov	r3, r9
 800382c:	460a      	mov	r2, r1
 800382e:	eb42 0303 	adc.w	r3, r2, r3
 8003832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	663b      	str	r3, [r7, #96]	; 0x60
 800383e:	667a      	str	r2, [r7, #100]	; 0x64
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800384c:	4649      	mov	r1, r9
 800384e:	008b      	lsls	r3, r1, #2
 8003850:	4641      	mov	r1, r8
 8003852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003856:	4641      	mov	r1, r8
 8003858:	008a      	lsls	r2, r1, #2
 800385a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800385e:	f7fc fd17 	bl	8000290 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <UART_SetConfig+0x4e4>)
 8003868:	fba3 1302 	umull	r1, r3, r3, r2
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	2164      	movs	r1, #100	; 0x64
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	3332      	adds	r3, #50	; 0x32
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <UART_SetConfig+0x4e4>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	f003 020f 	and.w	r2, r3, #15
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4422      	add	r2, r4
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003896:	46bd      	mov	sp, r7
 8003898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800389c:	51eb851f 	.word	0x51eb851f

080038a0 <malloc>:
 80038a0:	4b02      	ldr	r3, [pc, #8]	; (80038ac <malloc+0xc>)
 80038a2:	4601      	mov	r1, r0
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	f000 b82b 	b.w	8003900 <_malloc_r>
 80038aa:	bf00      	nop
 80038ac:	2000005c 	.word	0x2000005c

080038b0 <free>:
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <free+0xc>)
 80038b2:	4601      	mov	r1, r0
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	f000 b913 	b.w	8003ae0 <_free_r>
 80038ba:	bf00      	nop
 80038bc:	2000005c 	.word	0x2000005c

080038c0 <sbrk_aligned>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4e0e      	ldr	r6, [pc, #56]	; (80038fc <sbrk_aligned+0x3c>)
 80038c4:	460c      	mov	r4, r1
 80038c6:	6831      	ldr	r1, [r6, #0]
 80038c8:	4605      	mov	r5, r0
 80038ca:	b911      	cbnz	r1, 80038d2 <sbrk_aligned+0x12>
 80038cc:	f000 f8cc 	bl	8003a68 <_sbrk_r>
 80038d0:	6030      	str	r0, [r6, #0]
 80038d2:	4621      	mov	r1, r4
 80038d4:	4628      	mov	r0, r5
 80038d6:	f000 f8c7 	bl	8003a68 <_sbrk_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d00a      	beq.n	80038f4 <sbrk_aligned+0x34>
 80038de:	1cc4      	adds	r4, r0, #3
 80038e0:	f024 0403 	bic.w	r4, r4, #3
 80038e4:	42a0      	cmp	r0, r4
 80038e6:	d007      	beq.n	80038f8 <sbrk_aligned+0x38>
 80038e8:	1a21      	subs	r1, r4, r0
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 f8bc 	bl	8003a68 <_sbrk_r>
 80038f0:	3001      	adds	r0, #1
 80038f2:	d101      	bne.n	80038f8 <sbrk_aligned+0x38>
 80038f4:	f04f 34ff 	mov.w	r4, #4294967295
 80038f8:	4620      	mov	r0, r4
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	200001b0 	.word	0x200001b0

08003900 <_malloc_r>:
 8003900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003904:	1ccd      	adds	r5, r1, #3
 8003906:	f025 0503 	bic.w	r5, r5, #3
 800390a:	3508      	adds	r5, #8
 800390c:	2d0c      	cmp	r5, #12
 800390e:	bf38      	it	cc
 8003910:	250c      	movcc	r5, #12
 8003912:	2d00      	cmp	r5, #0
 8003914:	4607      	mov	r7, r0
 8003916:	db01      	blt.n	800391c <_malloc_r+0x1c>
 8003918:	42a9      	cmp	r1, r5
 800391a:	d905      	bls.n	8003928 <_malloc_r+0x28>
 800391c:	230c      	movs	r3, #12
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	2600      	movs	r6, #0
 8003922:	4630      	mov	r0, r6
 8003924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003928:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80039fc <_malloc_r+0xfc>
 800392c:	f000 f868 	bl	8003a00 <__malloc_lock>
 8003930:	f8d8 3000 	ldr.w	r3, [r8]
 8003934:	461c      	mov	r4, r3
 8003936:	bb5c      	cbnz	r4, 8003990 <_malloc_r+0x90>
 8003938:	4629      	mov	r1, r5
 800393a:	4638      	mov	r0, r7
 800393c:	f7ff ffc0 	bl	80038c0 <sbrk_aligned>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	4604      	mov	r4, r0
 8003944:	d155      	bne.n	80039f2 <_malloc_r+0xf2>
 8003946:	f8d8 4000 	ldr.w	r4, [r8]
 800394a:	4626      	mov	r6, r4
 800394c:	2e00      	cmp	r6, #0
 800394e:	d145      	bne.n	80039dc <_malloc_r+0xdc>
 8003950:	2c00      	cmp	r4, #0
 8003952:	d048      	beq.n	80039e6 <_malloc_r+0xe6>
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	4631      	mov	r1, r6
 8003958:	4638      	mov	r0, r7
 800395a:	eb04 0903 	add.w	r9, r4, r3
 800395e:	f000 f883 	bl	8003a68 <_sbrk_r>
 8003962:	4581      	cmp	r9, r0
 8003964:	d13f      	bne.n	80039e6 <_malloc_r+0xe6>
 8003966:	6821      	ldr	r1, [r4, #0]
 8003968:	1a6d      	subs	r5, r5, r1
 800396a:	4629      	mov	r1, r5
 800396c:	4638      	mov	r0, r7
 800396e:	f7ff ffa7 	bl	80038c0 <sbrk_aligned>
 8003972:	3001      	adds	r0, #1
 8003974:	d037      	beq.n	80039e6 <_malloc_r+0xe6>
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	442b      	add	r3, r5
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	f8d8 3000 	ldr.w	r3, [r8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d038      	beq.n	80039f6 <_malloc_r+0xf6>
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	42a2      	cmp	r2, r4
 8003988:	d12b      	bne.n	80039e2 <_malloc_r+0xe2>
 800398a:	2200      	movs	r2, #0
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e00f      	b.n	80039b0 <_malloc_r+0xb0>
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	1b52      	subs	r2, r2, r5
 8003994:	d41f      	bmi.n	80039d6 <_malloc_r+0xd6>
 8003996:	2a0b      	cmp	r2, #11
 8003998:	d917      	bls.n	80039ca <_malloc_r+0xca>
 800399a:	1961      	adds	r1, r4, r5
 800399c:	42a3      	cmp	r3, r4
 800399e:	6025      	str	r5, [r4, #0]
 80039a0:	bf18      	it	ne
 80039a2:	6059      	strne	r1, [r3, #4]
 80039a4:	6863      	ldr	r3, [r4, #4]
 80039a6:	bf08      	it	eq
 80039a8:	f8c8 1000 	streq.w	r1, [r8]
 80039ac:	5162      	str	r2, [r4, r5]
 80039ae:	604b      	str	r3, [r1, #4]
 80039b0:	4638      	mov	r0, r7
 80039b2:	f104 060b 	add.w	r6, r4, #11
 80039b6:	f000 f829 	bl	8003a0c <__malloc_unlock>
 80039ba:	f026 0607 	bic.w	r6, r6, #7
 80039be:	1d23      	adds	r3, r4, #4
 80039c0:	1af2      	subs	r2, r6, r3
 80039c2:	d0ae      	beq.n	8003922 <_malloc_r+0x22>
 80039c4:	1b9b      	subs	r3, r3, r6
 80039c6:	50a3      	str	r3, [r4, r2]
 80039c8:	e7ab      	b.n	8003922 <_malloc_r+0x22>
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	6862      	ldr	r2, [r4, #4]
 80039ce:	d1dd      	bne.n	800398c <_malloc_r+0x8c>
 80039d0:	f8c8 2000 	str.w	r2, [r8]
 80039d4:	e7ec      	b.n	80039b0 <_malloc_r+0xb0>
 80039d6:	4623      	mov	r3, r4
 80039d8:	6864      	ldr	r4, [r4, #4]
 80039da:	e7ac      	b.n	8003936 <_malloc_r+0x36>
 80039dc:	4634      	mov	r4, r6
 80039de:	6876      	ldr	r6, [r6, #4]
 80039e0:	e7b4      	b.n	800394c <_malloc_r+0x4c>
 80039e2:	4613      	mov	r3, r2
 80039e4:	e7cc      	b.n	8003980 <_malloc_r+0x80>
 80039e6:	230c      	movs	r3, #12
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4638      	mov	r0, r7
 80039ec:	f000 f80e 	bl	8003a0c <__malloc_unlock>
 80039f0:	e797      	b.n	8003922 <_malloc_r+0x22>
 80039f2:	6025      	str	r5, [r4, #0]
 80039f4:	e7dc      	b.n	80039b0 <_malloc_r+0xb0>
 80039f6:	605b      	str	r3, [r3, #4]
 80039f8:	deff      	udf	#255	; 0xff
 80039fa:	bf00      	nop
 80039fc:	200001ac 	.word	0x200001ac

08003a00 <__malloc_lock>:
 8003a00:	4801      	ldr	r0, [pc, #4]	; (8003a08 <__malloc_lock+0x8>)
 8003a02:	f000 b86b 	b.w	8003adc <__retarget_lock_acquire_recursive>
 8003a06:	bf00      	nop
 8003a08:	200002f0 	.word	0x200002f0

08003a0c <__malloc_unlock>:
 8003a0c:	4801      	ldr	r0, [pc, #4]	; (8003a14 <__malloc_unlock+0x8>)
 8003a0e:	f000 b866 	b.w	8003ade <__retarget_lock_release_recursive>
 8003a12:	bf00      	nop
 8003a14:	200002f0 	.word	0x200002f0

08003a18 <siprintf>:
 8003a18:	b40e      	push	{r1, r2, r3}
 8003a1a:	b500      	push	{lr}
 8003a1c:	b09c      	sub	sp, #112	; 0x70
 8003a1e:	ab1d      	add	r3, sp, #116	; 0x74
 8003a20:	9002      	str	r0, [sp, #8]
 8003a22:	9006      	str	r0, [sp, #24]
 8003a24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <siprintf+0x38>)
 8003a2a:	9107      	str	r1, [sp, #28]
 8003a2c:	9104      	str	r1, [sp, #16]
 8003a2e:	4909      	ldr	r1, [pc, #36]	; (8003a54 <siprintf+0x3c>)
 8003a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a34:	9105      	str	r1, [sp, #20]
 8003a36:	6800      	ldr	r0, [r0, #0]
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	a902      	add	r1, sp, #8
 8003a3c:	f000 f8f6 	bl	8003c2c <_svfiprintf_r>
 8003a40:	9b02      	ldr	r3, [sp, #8]
 8003a42:	2200      	movs	r2, #0
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	b01c      	add	sp, #112	; 0x70
 8003a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a4c:	b003      	add	sp, #12
 8003a4e:	4770      	bx	lr
 8003a50:	2000005c 	.word	0x2000005c
 8003a54:	ffff0208 	.word	0xffff0208

08003a58 <memset>:
 8003a58:	4402      	add	r2, r0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <memset+0xa>
 8003a60:	4770      	bx	lr
 8003a62:	f803 1b01 	strb.w	r1, [r3], #1
 8003a66:	e7f9      	b.n	8003a5c <memset+0x4>

08003a68 <_sbrk_r>:
 8003a68:	b538      	push	{r3, r4, r5, lr}
 8003a6a:	4d06      	ldr	r5, [pc, #24]	; (8003a84 <_sbrk_r+0x1c>)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	4604      	mov	r4, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	602b      	str	r3, [r5, #0]
 8003a74:	f7fd fa94 	bl	8000fa0 <_sbrk>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d102      	bne.n	8003a82 <_sbrk_r+0x1a>
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	b103      	cbz	r3, 8003a82 <_sbrk_r+0x1a>
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	bd38      	pop	{r3, r4, r5, pc}
 8003a84:	200002ec 	.word	0x200002ec

08003a88 <__errno>:
 8003a88:	4b01      	ldr	r3, [pc, #4]	; (8003a90 <__errno+0x8>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000005c 	.word	0x2000005c

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	4d0d      	ldr	r5, [pc, #52]	; (8003acc <__libc_init_array+0x38>)
 8003a98:	4c0d      	ldr	r4, [pc, #52]	; (8003ad0 <__libc_init_array+0x3c>)
 8003a9a:	1b64      	subs	r4, r4, r5
 8003a9c:	10a4      	asrs	r4, r4, #2
 8003a9e:	2600      	movs	r6, #0
 8003aa0:	42a6      	cmp	r6, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	4d0b      	ldr	r5, [pc, #44]	; (8003ad4 <__libc_init_array+0x40>)
 8003aa6:	4c0c      	ldr	r4, [pc, #48]	; (8003ad8 <__libc_init_array+0x44>)
 8003aa8:	f000 fbae 	bl	8004208 <_init>
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	2600      	movs	r6, #0
 8003ab2:	42a6      	cmp	r6, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abc:	4798      	blx	r3
 8003abe:	3601      	adds	r6, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac6:	4798      	blx	r3
 8003ac8:	3601      	adds	r6, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	080042b0 	.word	0x080042b0
 8003ad0:	080042b0 	.word	0x080042b0
 8003ad4:	080042b0 	.word	0x080042b0
 8003ad8:	080042b4 	.word	0x080042b4

08003adc <__retarget_lock_acquire_recursive>:
 8003adc:	4770      	bx	lr

08003ade <__retarget_lock_release_recursive>:
 8003ade:	4770      	bx	lr

08003ae0 <_free_r>:
 8003ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ae2:	2900      	cmp	r1, #0
 8003ae4:	d044      	beq.n	8003b70 <_free_r+0x90>
 8003ae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aea:	9001      	str	r0, [sp, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f1a1 0404 	sub.w	r4, r1, #4
 8003af2:	bfb8      	it	lt
 8003af4:	18e4      	addlt	r4, r4, r3
 8003af6:	f7ff ff83 	bl	8003a00 <__malloc_lock>
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <_free_r+0x94>)
 8003afc:	9801      	ldr	r0, [sp, #4]
 8003afe:	6813      	ldr	r3, [r2, #0]
 8003b00:	b933      	cbnz	r3, 8003b10 <_free_r+0x30>
 8003b02:	6063      	str	r3, [r4, #4]
 8003b04:	6014      	str	r4, [r2, #0]
 8003b06:	b003      	add	sp, #12
 8003b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b0c:	f7ff bf7e 	b.w	8003a0c <__malloc_unlock>
 8003b10:	42a3      	cmp	r3, r4
 8003b12:	d908      	bls.n	8003b26 <_free_r+0x46>
 8003b14:	6825      	ldr	r5, [r4, #0]
 8003b16:	1961      	adds	r1, r4, r5
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	bf01      	itttt	eq
 8003b1c:	6819      	ldreq	r1, [r3, #0]
 8003b1e:	685b      	ldreq	r3, [r3, #4]
 8003b20:	1949      	addeq	r1, r1, r5
 8003b22:	6021      	streq	r1, [r4, #0]
 8003b24:	e7ed      	b.n	8003b02 <_free_r+0x22>
 8003b26:	461a      	mov	r2, r3
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b10b      	cbz	r3, 8003b30 <_free_r+0x50>
 8003b2c:	42a3      	cmp	r3, r4
 8003b2e:	d9fa      	bls.n	8003b26 <_free_r+0x46>
 8003b30:	6811      	ldr	r1, [r2, #0]
 8003b32:	1855      	adds	r5, r2, r1
 8003b34:	42a5      	cmp	r5, r4
 8003b36:	d10b      	bne.n	8003b50 <_free_r+0x70>
 8003b38:	6824      	ldr	r4, [r4, #0]
 8003b3a:	4421      	add	r1, r4
 8003b3c:	1854      	adds	r4, r2, r1
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	6011      	str	r1, [r2, #0]
 8003b42:	d1e0      	bne.n	8003b06 <_free_r+0x26>
 8003b44:	681c      	ldr	r4, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	6053      	str	r3, [r2, #4]
 8003b4a:	440c      	add	r4, r1
 8003b4c:	6014      	str	r4, [r2, #0]
 8003b4e:	e7da      	b.n	8003b06 <_free_r+0x26>
 8003b50:	d902      	bls.n	8003b58 <_free_r+0x78>
 8003b52:	230c      	movs	r3, #12
 8003b54:	6003      	str	r3, [r0, #0]
 8003b56:	e7d6      	b.n	8003b06 <_free_r+0x26>
 8003b58:	6825      	ldr	r5, [r4, #0]
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	428b      	cmp	r3, r1
 8003b5e:	bf04      	itt	eq
 8003b60:	6819      	ldreq	r1, [r3, #0]
 8003b62:	685b      	ldreq	r3, [r3, #4]
 8003b64:	6063      	str	r3, [r4, #4]
 8003b66:	bf04      	itt	eq
 8003b68:	1949      	addeq	r1, r1, r5
 8003b6a:	6021      	streq	r1, [r4, #0]
 8003b6c:	6054      	str	r4, [r2, #4]
 8003b6e:	e7ca      	b.n	8003b06 <_free_r+0x26>
 8003b70:	b003      	add	sp, #12
 8003b72:	bd30      	pop	{r4, r5, pc}
 8003b74:	200001ac 	.word	0x200001ac

08003b78 <__ssputs_r>:
 8003b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b7c:	688e      	ldr	r6, [r1, #8]
 8003b7e:	461f      	mov	r7, r3
 8003b80:	42be      	cmp	r6, r7
 8003b82:	680b      	ldr	r3, [r1, #0]
 8003b84:	4682      	mov	sl, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	4690      	mov	r8, r2
 8003b8a:	d82c      	bhi.n	8003be6 <__ssputs_r+0x6e>
 8003b8c:	898a      	ldrh	r2, [r1, #12]
 8003b8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b92:	d026      	beq.n	8003be2 <__ssputs_r+0x6a>
 8003b94:	6965      	ldr	r5, [r4, #20]
 8003b96:	6909      	ldr	r1, [r1, #16]
 8003b98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b9c:	eba3 0901 	sub.w	r9, r3, r1
 8003ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ba4:	1c7b      	adds	r3, r7, #1
 8003ba6:	444b      	add	r3, r9
 8003ba8:	106d      	asrs	r5, r5, #1
 8003baa:	429d      	cmp	r5, r3
 8003bac:	bf38      	it	cc
 8003bae:	461d      	movcc	r5, r3
 8003bb0:	0553      	lsls	r3, r2, #21
 8003bb2:	d527      	bpl.n	8003c04 <__ssputs_r+0x8c>
 8003bb4:	4629      	mov	r1, r5
 8003bb6:	f7ff fea3 	bl	8003900 <_malloc_r>
 8003bba:	4606      	mov	r6, r0
 8003bbc:	b360      	cbz	r0, 8003c18 <__ssputs_r+0xa0>
 8003bbe:	6921      	ldr	r1, [r4, #16]
 8003bc0:	464a      	mov	r2, r9
 8003bc2:	f000 fadb 	bl	800417c <memcpy>
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd0:	81a3      	strh	r3, [r4, #12]
 8003bd2:	6126      	str	r6, [r4, #16]
 8003bd4:	6165      	str	r5, [r4, #20]
 8003bd6:	444e      	add	r6, r9
 8003bd8:	eba5 0509 	sub.w	r5, r5, r9
 8003bdc:	6026      	str	r6, [r4, #0]
 8003bde:	60a5      	str	r5, [r4, #8]
 8003be0:	463e      	mov	r6, r7
 8003be2:	42be      	cmp	r6, r7
 8003be4:	d900      	bls.n	8003be8 <__ssputs_r+0x70>
 8003be6:	463e      	mov	r6, r7
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	4632      	mov	r2, r6
 8003bec:	4641      	mov	r1, r8
 8003bee:	f000 faab 	bl	8004148 <memmove>
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	1b9b      	subs	r3, r3, r6
 8003bf6:	60a3      	str	r3, [r4, #8]
 8003bf8:	6823      	ldr	r3, [r4, #0]
 8003bfa:	4433      	add	r3, r6
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c04:	462a      	mov	r2, r5
 8003c06:	f000 fac7 	bl	8004198 <_realloc_r>
 8003c0a:	4606      	mov	r6, r0
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	d1e0      	bne.n	8003bd2 <__ssputs_r+0x5a>
 8003c10:	6921      	ldr	r1, [r4, #16]
 8003c12:	4650      	mov	r0, sl
 8003c14:	f7ff ff64 	bl	8003ae0 <_free_r>
 8003c18:	230c      	movs	r3, #12
 8003c1a:	f8ca 3000 	str.w	r3, [sl]
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c24:	81a3      	strh	r3, [r4, #12]
 8003c26:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2a:	e7e9      	b.n	8003c00 <__ssputs_r+0x88>

08003c2c <_svfiprintf_r>:
 8003c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c30:	4698      	mov	r8, r3
 8003c32:	898b      	ldrh	r3, [r1, #12]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	b09d      	sub	sp, #116	; 0x74
 8003c38:	4607      	mov	r7, r0
 8003c3a:	460d      	mov	r5, r1
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	d50e      	bpl.n	8003c5e <_svfiprintf_r+0x32>
 8003c40:	690b      	ldr	r3, [r1, #16]
 8003c42:	b963      	cbnz	r3, 8003c5e <_svfiprintf_r+0x32>
 8003c44:	2140      	movs	r1, #64	; 0x40
 8003c46:	f7ff fe5b 	bl	8003900 <_malloc_r>
 8003c4a:	6028      	str	r0, [r5, #0]
 8003c4c:	6128      	str	r0, [r5, #16]
 8003c4e:	b920      	cbnz	r0, 8003c5a <_svfiprintf_r+0x2e>
 8003c50:	230c      	movs	r3, #12
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	e0d0      	b.n	8003dfc <_svfiprintf_r+0x1d0>
 8003c5a:	2340      	movs	r3, #64	; 0x40
 8003c5c:	616b      	str	r3, [r5, #20]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9309      	str	r3, [sp, #36]	; 0x24
 8003c62:	2320      	movs	r3, #32
 8003c64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c68:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c6c:	2330      	movs	r3, #48	; 0x30
 8003c6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e14 <_svfiprintf_r+0x1e8>
 8003c72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c76:	f04f 0901 	mov.w	r9, #1
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c82:	b10a      	cbz	r2, 8003c88 <_svfiprintf_r+0x5c>
 8003c84:	2a25      	cmp	r2, #37	; 0x25
 8003c86:	d1f9      	bne.n	8003c7c <_svfiprintf_r+0x50>
 8003c88:	ebba 0b04 	subs.w	fp, sl, r4
 8003c8c:	d00b      	beq.n	8003ca6 <_svfiprintf_r+0x7a>
 8003c8e:	465b      	mov	r3, fp
 8003c90:	4622      	mov	r2, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	4638      	mov	r0, r7
 8003c96:	f7ff ff6f 	bl	8003b78 <__ssputs_r>
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	f000 80a9 	beq.w	8003df2 <_svfiprintf_r+0x1c6>
 8003ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca2:	445a      	add	r2, fp
 8003ca4:	9209      	str	r2, [sp, #36]	; 0x24
 8003ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80a1 	beq.w	8003df2 <_svfiprintf_r+0x1c6>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cba:	f10a 0a01 	add.w	sl, sl, #1
 8003cbe:	9304      	str	r3, [sp, #16]
 8003cc0:	9307      	str	r3, [sp, #28]
 8003cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8003cc8:	4654      	mov	r4, sl
 8003cca:	2205      	movs	r2, #5
 8003ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd0:	4850      	ldr	r0, [pc, #320]	; (8003e14 <_svfiprintf_r+0x1e8>)
 8003cd2:	f7fc fa8d 	bl	80001f0 <memchr>
 8003cd6:	9a04      	ldr	r2, [sp, #16]
 8003cd8:	b9d8      	cbnz	r0, 8003d12 <_svfiprintf_r+0xe6>
 8003cda:	06d0      	lsls	r0, r2, #27
 8003cdc:	bf44      	itt	mi
 8003cde:	2320      	movmi	r3, #32
 8003ce0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce4:	0711      	lsls	r1, r2, #28
 8003ce6:	bf44      	itt	mi
 8003ce8:	232b      	movmi	r3, #43	; 0x2b
 8003cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cee:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf4:	d015      	beq.n	8003d22 <_svfiprintf_r+0xf6>
 8003cf6:	9a07      	ldr	r2, [sp, #28]
 8003cf8:	4654      	mov	r4, sl
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f04f 0c0a 	mov.w	ip, #10
 8003d00:	4621      	mov	r1, r4
 8003d02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d06:	3b30      	subs	r3, #48	; 0x30
 8003d08:	2b09      	cmp	r3, #9
 8003d0a:	d94d      	bls.n	8003da8 <_svfiprintf_r+0x17c>
 8003d0c:	b1b0      	cbz	r0, 8003d3c <_svfiprintf_r+0x110>
 8003d0e:	9207      	str	r2, [sp, #28]
 8003d10:	e014      	b.n	8003d3c <_svfiprintf_r+0x110>
 8003d12:	eba0 0308 	sub.w	r3, r0, r8
 8003d16:	fa09 f303 	lsl.w	r3, r9, r3
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	9304      	str	r3, [sp, #16]
 8003d1e:	46a2      	mov	sl, r4
 8003d20:	e7d2      	b.n	8003cc8 <_svfiprintf_r+0x9c>
 8003d22:	9b03      	ldr	r3, [sp, #12]
 8003d24:	1d19      	adds	r1, r3, #4
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	9103      	str	r1, [sp, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	bfbb      	ittet	lt
 8003d2e:	425b      	neglt	r3, r3
 8003d30:	f042 0202 	orrlt.w	r2, r2, #2
 8003d34:	9307      	strge	r3, [sp, #28]
 8003d36:	9307      	strlt	r3, [sp, #28]
 8003d38:	bfb8      	it	lt
 8003d3a:	9204      	strlt	r2, [sp, #16]
 8003d3c:	7823      	ldrb	r3, [r4, #0]
 8003d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d40:	d10c      	bne.n	8003d5c <_svfiprintf_r+0x130>
 8003d42:	7863      	ldrb	r3, [r4, #1]
 8003d44:	2b2a      	cmp	r3, #42	; 0x2a
 8003d46:	d134      	bne.n	8003db2 <_svfiprintf_r+0x186>
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	9203      	str	r2, [sp, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	bfb8      	it	lt
 8003d54:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d58:	3402      	adds	r4, #2
 8003d5a:	9305      	str	r3, [sp, #20]
 8003d5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e24 <_svfiprintf_r+0x1f8>
 8003d60:	7821      	ldrb	r1, [r4, #0]
 8003d62:	2203      	movs	r2, #3
 8003d64:	4650      	mov	r0, sl
 8003d66:	f7fc fa43 	bl	80001f0 <memchr>
 8003d6a:	b138      	cbz	r0, 8003d7c <_svfiprintf_r+0x150>
 8003d6c:	9b04      	ldr	r3, [sp, #16]
 8003d6e:	eba0 000a 	sub.w	r0, r0, sl
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	4082      	lsls	r2, r0
 8003d76:	4313      	orrs	r3, r2
 8003d78:	3401      	adds	r4, #1
 8003d7a:	9304      	str	r3, [sp, #16]
 8003d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d80:	4825      	ldr	r0, [pc, #148]	; (8003e18 <_svfiprintf_r+0x1ec>)
 8003d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d86:	2206      	movs	r2, #6
 8003d88:	f7fc fa32 	bl	80001f0 <memchr>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	d038      	beq.n	8003e02 <_svfiprintf_r+0x1d6>
 8003d90:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <_svfiprintf_r+0x1f0>)
 8003d92:	bb1b      	cbnz	r3, 8003ddc <_svfiprintf_r+0x1b0>
 8003d94:	9b03      	ldr	r3, [sp, #12]
 8003d96:	3307      	adds	r3, #7
 8003d98:	f023 0307 	bic.w	r3, r3, #7
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	9303      	str	r3, [sp, #12]
 8003da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da2:	4433      	add	r3, r6
 8003da4:	9309      	str	r3, [sp, #36]	; 0x24
 8003da6:	e768      	b.n	8003c7a <_svfiprintf_r+0x4e>
 8003da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dac:	460c      	mov	r4, r1
 8003dae:	2001      	movs	r0, #1
 8003db0:	e7a6      	b.n	8003d00 <_svfiprintf_r+0xd4>
 8003db2:	2300      	movs	r3, #0
 8003db4:	3401      	adds	r4, #1
 8003db6:	9305      	str	r3, [sp, #20]
 8003db8:	4619      	mov	r1, r3
 8003dba:	f04f 0c0a 	mov.w	ip, #10
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc4:	3a30      	subs	r2, #48	; 0x30
 8003dc6:	2a09      	cmp	r2, #9
 8003dc8:	d903      	bls.n	8003dd2 <_svfiprintf_r+0x1a6>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0c6      	beq.n	8003d5c <_svfiprintf_r+0x130>
 8003dce:	9105      	str	r1, [sp, #20]
 8003dd0:	e7c4      	b.n	8003d5c <_svfiprintf_r+0x130>
 8003dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e7f0      	b.n	8003dbe <_svfiprintf_r+0x192>
 8003ddc:	ab03      	add	r3, sp, #12
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	462a      	mov	r2, r5
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <_svfiprintf_r+0x1f4>)
 8003de4:	a904      	add	r1, sp, #16
 8003de6:	4638      	mov	r0, r7
 8003de8:	f3af 8000 	nop.w
 8003dec:	1c42      	adds	r2, r0, #1
 8003dee:	4606      	mov	r6, r0
 8003df0:	d1d6      	bne.n	8003da0 <_svfiprintf_r+0x174>
 8003df2:	89ab      	ldrh	r3, [r5, #12]
 8003df4:	065b      	lsls	r3, r3, #25
 8003df6:	f53f af2d 	bmi.w	8003c54 <_svfiprintf_r+0x28>
 8003dfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dfc:	b01d      	add	sp, #116	; 0x74
 8003dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e02:	ab03      	add	r3, sp, #12
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	462a      	mov	r2, r5
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <_svfiprintf_r+0x1f4>)
 8003e0a:	a904      	add	r1, sp, #16
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	f000 f879 	bl	8003f04 <_printf_i>
 8003e12:	e7eb      	b.n	8003dec <_svfiprintf_r+0x1c0>
 8003e14:	08004274 	.word	0x08004274
 8003e18:	0800427e 	.word	0x0800427e
 8003e1c:	00000000 	.word	0x00000000
 8003e20:	08003b79 	.word	0x08003b79
 8003e24:	0800427a 	.word	0x0800427a

08003e28 <_printf_common>:
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	4616      	mov	r6, r2
 8003e2e:	4699      	mov	r9, r3
 8003e30:	688a      	ldr	r2, [r1, #8]
 8003e32:	690b      	ldr	r3, [r1, #16]
 8003e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	bfb8      	it	lt
 8003e3c:	4613      	movlt	r3, r2
 8003e3e:	6033      	str	r3, [r6, #0]
 8003e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e44:	4607      	mov	r7, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	b10a      	cbz	r2, 8003e4e <_printf_common+0x26>
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	6033      	str	r3, [r6, #0]
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	0699      	lsls	r1, r3, #26
 8003e52:	bf42      	ittt	mi
 8003e54:	6833      	ldrmi	r3, [r6, #0]
 8003e56:	3302      	addmi	r3, #2
 8003e58:	6033      	strmi	r3, [r6, #0]
 8003e5a:	6825      	ldr	r5, [r4, #0]
 8003e5c:	f015 0506 	ands.w	r5, r5, #6
 8003e60:	d106      	bne.n	8003e70 <_printf_common+0x48>
 8003e62:	f104 0a19 	add.w	sl, r4, #25
 8003e66:	68e3      	ldr	r3, [r4, #12]
 8003e68:	6832      	ldr	r2, [r6, #0]
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	42ab      	cmp	r3, r5
 8003e6e:	dc26      	bgt.n	8003ebe <_printf_common+0x96>
 8003e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e74:	1e13      	subs	r3, r2, #0
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	bf18      	it	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	0692      	lsls	r2, r2, #26
 8003e7e:	d42b      	bmi.n	8003ed8 <_printf_common+0xb0>
 8003e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e84:	4649      	mov	r1, r9
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c0      	blx	r8
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d01e      	beq.n	8003ecc <_printf_common+0xa4>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	6922      	ldr	r2, [r4, #16]
 8003e92:	f003 0306 	and.w	r3, r3, #6
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	bf02      	ittt	eq
 8003e9a:	68e5      	ldreq	r5, [r4, #12]
 8003e9c:	6833      	ldreq	r3, [r6, #0]
 8003e9e:	1aed      	subeq	r5, r5, r3
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	bf0c      	ite	eq
 8003ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ea8:	2500      	movne	r5, #0
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	bfc4      	itt	gt
 8003eae:	1a9b      	subgt	r3, r3, r2
 8003eb0:	18ed      	addgt	r5, r5, r3
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	341a      	adds	r4, #26
 8003eb6:	42b5      	cmp	r5, r6
 8003eb8:	d11a      	bne.n	8003ef0 <_printf_common+0xc8>
 8003eba:	2000      	movs	r0, #0
 8003ebc:	e008      	b.n	8003ed0 <_printf_common+0xa8>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4652      	mov	r2, sl
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	47c0      	blx	r8
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d103      	bne.n	8003ed4 <_printf_common+0xac>
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	e7c6      	b.n	8003e66 <_printf_common+0x3e>
 8003ed8:	18e1      	adds	r1, r4, r3
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	2030      	movs	r0, #48	; 0x30
 8003ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ee2:	4422      	add	r2, r4
 8003ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eec:	3302      	adds	r3, #2
 8003eee:	e7c7      	b.n	8003e80 <_printf_common+0x58>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	47c0      	blx	r8
 8003efa:	3001      	adds	r0, #1
 8003efc:	d0e6      	beq.n	8003ecc <_printf_common+0xa4>
 8003efe:	3601      	adds	r6, #1
 8003f00:	e7d9      	b.n	8003eb6 <_printf_common+0x8e>
	...

08003f04 <_printf_i>:
 8003f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	7e0f      	ldrb	r7, [r1, #24]
 8003f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f0c:	2f78      	cmp	r7, #120	; 0x78
 8003f0e:	4691      	mov	r9, r2
 8003f10:	4680      	mov	r8, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	469a      	mov	sl, r3
 8003f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f1a:	d807      	bhi.n	8003f2c <_printf_i+0x28>
 8003f1c:	2f62      	cmp	r7, #98	; 0x62
 8003f1e:	d80a      	bhi.n	8003f36 <_printf_i+0x32>
 8003f20:	2f00      	cmp	r7, #0
 8003f22:	f000 80d4 	beq.w	80040ce <_printf_i+0x1ca>
 8003f26:	2f58      	cmp	r7, #88	; 0x58
 8003f28:	f000 80c0 	beq.w	80040ac <_printf_i+0x1a8>
 8003f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f34:	e03a      	b.n	8003fac <_printf_i+0xa8>
 8003f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f3a:	2b15      	cmp	r3, #21
 8003f3c:	d8f6      	bhi.n	8003f2c <_printf_i+0x28>
 8003f3e:	a101      	add	r1, pc, #4	; (adr r1, 8003f44 <_printf_i+0x40>)
 8003f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f44:	08003f9d 	.word	0x08003f9d
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003f2d 	.word	0x08003f2d
 8003f50:	08003f2d 	.word	0x08003f2d
 8003f54:	08003f2d 	.word	0x08003f2d
 8003f58:	08003f2d 	.word	0x08003f2d
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003f2d 	.word	0x08003f2d
 8003f64:	08003f2d 	.word	0x08003f2d
 8003f68:	08003f2d 	.word	0x08003f2d
 8003f6c:	08003f2d 	.word	0x08003f2d
 8003f70:	080040b5 	.word	0x080040b5
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	0800406f 	.word	0x0800406f
 8003f7c:	08003f2d 	.word	0x08003f2d
 8003f80:	08003f2d 	.word	0x08003f2d
 8003f84:	080040d7 	.word	0x080040d7
 8003f88:	08003f2d 	.word	0x08003f2d
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003f2d 	.word	0x08003f2d
 8003f94:	08003f2d 	.word	0x08003f2d
 8003f98:	08004077 	.word	0x08004077
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	602a      	str	r2, [r5, #0]
 8003fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fac:	2301      	movs	r3, #1
 8003fae:	e09f      	b.n	80040f0 <_printf_i+0x1ec>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	0607      	lsls	r7, r0, #24
 8003fb6:	f103 0104 	add.w	r1, r3, #4
 8003fba:	6029      	str	r1, [r5, #0]
 8003fbc:	d501      	bpl.n	8003fc2 <_printf_i+0xbe>
 8003fbe:	681e      	ldr	r6, [r3, #0]
 8003fc0:	e003      	b.n	8003fca <_printf_i+0xc6>
 8003fc2:	0646      	lsls	r6, r0, #25
 8003fc4:	d5fb      	bpl.n	8003fbe <_printf_i+0xba>
 8003fc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	da03      	bge.n	8003fd6 <_printf_i+0xd2>
 8003fce:	232d      	movs	r3, #45	; 0x2d
 8003fd0:	4276      	negs	r6, r6
 8003fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd6:	485a      	ldr	r0, [pc, #360]	; (8004140 <_printf_i+0x23c>)
 8003fd8:	230a      	movs	r3, #10
 8003fda:	e012      	b.n	8004002 <_printf_i+0xfe>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	1d19      	adds	r1, r3, #4
 8003fe2:	6029      	str	r1, [r5, #0]
 8003fe4:	0605      	lsls	r5, r0, #24
 8003fe6:	d501      	bpl.n	8003fec <_printf_i+0xe8>
 8003fe8:	681e      	ldr	r6, [r3, #0]
 8003fea:	e002      	b.n	8003ff2 <_printf_i+0xee>
 8003fec:	0641      	lsls	r1, r0, #25
 8003fee:	d5fb      	bpl.n	8003fe8 <_printf_i+0xe4>
 8003ff0:	881e      	ldrh	r6, [r3, #0]
 8003ff2:	4853      	ldr	r0, [pc, #332]	; (8004140 <_printf_i+0x23c>)
 8003ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2308      	moveq	r3, #8
 8003ffa:	230a      	movne	r3, #10
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004002:	6865      	ldr	r5, [r4, #4]
 8004004:	60a5      	str	r5, [r4, #8]
 8004006:	2d00      	cmp	r5, #0
 8004008:	bfa2      	ittt	ge
 800400a:	6821      	ldrge	r1, [r4, #0]
 800400c:	f021 0104 	bicge.w	r1, r1, #4
 8004010:	6021      	strge	r1, [r4, #0]
 8004012:	b90e      	cbnz	r6, 8004018 <_printf_i+0x114>
 8004014:	2d00      	cmp	r5, #0
 8004016:	d04b      	beq.n	80040b0 <_printf_i+0x1ac>
 8004018:	4615      	mov	r5, r2
 800401a:	fbb6 f1f3 	udiv	r1, r6, r3
 800401e:	fb03 6711 	mls	r7, r3, r1, r6
 8004022:	5dc7      	ldrb	r7, [r0, r7]
 8004024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004028:	4637      	mov	r7, r6
 800402a:	42bb      	cmp	r3, r7
 800402c:	460e      	mov	r6, r1
 800402e:	d9f4      	bls.n	800401a <_printf_i+0x116>
 8004030:	2b08      	cmp	r3, #8
 8004032:	d10b      	bne.n	800404c <_printf_i+0x148>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	07de      	lsls	r6, r3, #31
 8004038:	d508      	bpl.n	800404c <_printf_i+0x148>
 800403a:	6923      	ldr	r3, [r4, #16]
 800403c:	6861      	ldr	r1, [r4, #4]
 800403e:	4299      	cmp	r1, r3
 8004040:	bfde      	ittt	le
 8004042:	2330      	movle	r3, #48	; 0x30
 8004044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800404c:	1b52      	subs	r2, r2, r5
 800404e:	6122      	str	r2, [r4, #16]
 8004050:	f8cd a000 	str.w	sl, [sp]
 8004054:	464b      	mov	r3, r9
 8004056:	aa03      	add	r2, sp, #12
 8004058:	4621      	mov	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff fee4 	bl	8003e28 <_printf_common>
 8004060:	3001      	adds	r0, #1
 8004062:	d14a      	bne.n	80040fa <_printf_i+0x1f6>
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	b004      	add	sp, #16
 800406a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	f043 0320 	orr.w	r3, r3, #32
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	4833      	ldr	r0, [pc, #204]	; (8004144 <_printf_i+0x240>)
 8004078:	2778      	movs	r7, #120	; 0x78
 800407a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	6829      	ldr	r1, [r5, #0]
 8004082:	061f      	lsls	r7, r3, #24
 8004084:	f851 6b04 	ldr.w	r6, [r1], #4
 8004088:	d402      	bmi.n	8004090 <_printf_i+0x18c>
 800408a:	065f      	lsls	r7, r3, #25
 800408c:	bf48      	it	mi
 800408e:	b2b6      	uxthmi	r6, r6
 8004090:	07df      	lsls	r7, r3, #31
 8004092:	bf48      	it	mi
 8004094:	f043 0320 	orrmi.w	r3, r3, #32
 8004098:	6029      	str	r1, [r5, #0]
 800409a:	bf48      	it	mi
 800409c:	6023      	strmi	r3, [r4, #0]
 800409e:	b91e      	cbnz	r6, 80040a8 <_printf_i+0x1a4>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	f023 0320 	bic.w	r3, r3, #32
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	2310      	movs	r3, #16
 80040aa:	e7a7      	b.n	8003ffc <_printf_i+0xf8>
 80040ac:	4824      	ldr	r0, [pc, #144]	; (8004140 <_printf_i+0x23c>)
 80040ae:	e7e4      	b.n	800407a <_printf_i+0x176>
 80040b0:	4615      	mov	r5, r2
 80040b2:	e7bd      	b.n	8004030 <_printf_i+0x12c>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	6826      	ldr	r6, [r4, #0]
 80040b8:	6961      	ldr	r1, [r4, #20]
 80040ba:	1d18      	adds	r0, r3, #4
 80040bc:	6028      	str	r0, [r5, #0]
 80040be:	0635      	lsls	r5, r6, #24
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	d501      	bpl.n	80040c8 <_printf_i+0x1c4>
 80040c4:	6019      	str	r1, [r3, #0]
 80040c6:	e002      	b.n	80040ce <_printf_i+0x1ca>
 80040c8:	0670      	lsls	r0, r6, #25
 80040ca:	d5fb      	bpl.n	80040c4 <_printf_i+0x1c0>
 80040cc:	8019      	strh	r1, [r3, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	6123      	str	r3, [r4, #16]
 80040d2:	4615      	mov	r5, r2
 80040d4:	e7bc      	b.n	8004050 <_printf_i+0x14c>
 80040d6:	682b      	ldr	r3, [r5, #0]
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	602a      	str	r2, [r5, #0]
 80040dc:	681d      	ldr	r5, [r3, #0]
 80040de:	6862      	ldr	r2, [r4, #4]
 80040e0:	2100      	movs	r1, #0
 80040e2:	4628      	mov	r0, r5
 80040e4:	f7fc f884 	bl	80001f0 <memchr>
 80040e8:	b108      	cbz	r0, 80040ee <_printf_i+0x1ea>
 80040ea:	1b40      	subs	r0, r0, r5
 80040ec:	6060      	str	r0, [r4, #4]
 80040ee:	6863      	ldr	r3, [r4, #4]
 80040f0:	6123      	str	r3, [r4, #16]
 80040f2:	2300      	movs	r3, #0
 80040f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f8:	e7aa      	b.n	8004050 <_printf_i+0x14c>
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	462a      	mov	r2, r5
 80040fe:	4649      	mov	r1, r9
 8004100:	4640      	mov	r0, r8
 8004102:	47d0      	blx	sl
 8004104:	3001      	adds	r0, #1
 8004106:	d0ad      	beq.n	8004064 <_printf_i+0x160>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	079b      	lsls	r3, r3, #30
 800410c:	d413      	bmi.n	8004136 <_printf_i+0x232>
 800410e:	68e0      	ldr	r0, [r4, #12]
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	4298      	cmp	r0, r3
 8004114:	bfb8      	it	lt
 8004116:	4618      	movlt	r0, r3
 8004118:	e7a6      	b.n	8004068 <_printf_i+0x164>
 800411a:	2301      	movs	r3, #1
 800411c:	4632      	mov	r2, r6
 800411e:	4649      	mov	r1, r9
 8004120:	4640      	mov	r0, r8
 8004122:	47d0      	blx	sl
 8004124:	3001      	adds	r0, #1
 8004126:	d09d      	beq.n	8004064 <_printf_i+0x160>
 8004128:	3501      	adds	r5, #1
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	9903      	ldr	r1, [sp, #12]
 800412e:	1a5b      	subs	r3, r3, r1
 8004130:	42ab      	cmp	r3, r5
 8004132:	dcf2      	bgt.n	800411a <_printf_i+0x216>
 8004134:	e7eb      	b.n	800410e <_printf_i+0x20a>
 8004136:	2500      	movs	r5, #0
 8004138:	f104 0619 	add.w	r6, r4, #25
 800413c:	e7f5      	b.n	800412a <_printf_i+0x226>
 800413e:	bf00      	nop
 8004140:	08004285 	.word	0x08004285
 8004144:	08004296 	.word	0x08004296

08004148 <memmove>:
 8004148:	4288      	cmp	r0, r1
 800414a:	b510      	push	{r4, lr}
 800414c:	eb01 0402 	add.w	r4, r1, r2
 8004150:	d902      	bls.n	8004158 <memmove+0x10>
 8004152:	4284      	cmp	r4, r0
 8004154:	4623      	mov	r3, r4
 8004156:	d807      	bhi.n	8004168 <memmove+0x20>
 8004158:	1e43      	subs	r3, r0, #1
 800415a:	42a1      	cmp	r1, r4
 800415c:	d008      	beq.n	8004170 <memmove+0x28>
 800415e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004166:	e7f8      	b.n	800415a <memmove+0x12>
 8004168:	4402      	add	r2, r0
 800416a:	4601      	mov	r1, r0
 800416c:	428a      	cmp	r2, r1
 800416e:	d100      	bne.n	8004172 <memmove+0x2a>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800417a:	e7f7      	b.n	800416c <memmove+0x24>

0800417c <memcpy>:
 800417c:	440a      	add	r2, r1
 800417e:	4291      	cmp	r1, r2
 8004180:	f100 33ff 	add.w	r3, r0, #4294967295
 8004184:	d100      	bne.n	8004188 <memcpy+0xc>
 8004186:	4770      	bx	lr
 8004188:	b510      	push	{r4, lr}
 800418a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800418e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004192:	4291      	cmp	r1, r2
 8004194:	d1f9      	bne.n	800418a <memcpy+0xe>
 8004196:	bd10      	pop	{r4, pc}

08004198 <_realloc_r>:
 8004198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800419c:	4680      	mov	r8, r0
 800419e:	4614      	mov	r4, r2
 80041a0:	460e      	mov	r6, r1
 80041a2:	b921      	cbnz	r1, 80041ae <_realloc_r+0x16>
 80041a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a8:	4611      	mov	r1, r2
 80041aa:	f7ff bba9 	b.w	8003900 <_malloc_r>
 80041ae:	b92a      	cbnz	r2, 80041bc <_realloc_r+0x24>
 80041b0:	f7ff fc96 	bl	8003ae0 <_free_r>
 80041b4:	4625      	mov	r5, r4
 80041b6:	4628      	mov	r0, r5
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	f000 f81b 	bl	80041f6 <_malloc_usable_size_r>
 80041c0:	4284      	cmp	r4, r0
 80041c2:	4607      	mov	r7, r0
 80041c4:	d802      	bhi.n	80041cc <_realloc_r+0x34>
 80041c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041ca:	d812      	bhi.n	80041f2 <_realloc_r+0x5a>
 80041cc:	4621      	mov	r1, r4
 80041ce:	4640      	mov	r0, r8
 80041d0:	f7ff fb96 	bl	8003900 <_malloc_r>
 80041d4:	4605      	mov	r5, r0
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0ed      	beq.n	80041b6 <_realloc_r+0x1e>
 80041da:	42bc      	cmp	r4, r7
 80041dc:	4622      	mov	r2, r4
 80041de:	4631      	mov	r1, r6
 80041e0:	bf28      	it	cs
 80041e2:	463a      	movcs	r2, r7
 80041e4:	f7ff ffca 	bl	800417c <memcpy>
 80041e8:	4631      	mov	r1, r6
 80041ea:	4640      	mov	r0, r8
 80041ec:	f7ff fc78 	bl	8003ae0 <_free_r>
 80041f0:	e7e1      	b.n	80041b6 <_realloc_r+0x1e>
 80041f2:	4635      	mov	r5, r6
 80041f4:	e7df      	b.n	80041b6 <_realloc_r+0x1e>

080041f6 <_malloc_usable_size_r>:
 80041f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041fa:	1f18      	subs	r0, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bfbc      	itt	lt
 8004200:	580b      	ldrlt	r3, [r1, r0]
 8004202:	18c0      	addlt	r0, r0, r3
 8004204:	4770      	bx	lr
	...

08004208 <_init>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr

08004214 <_fini>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr
