
lab06-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005144  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080052e4  080052e4  000152e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800548c  0800548c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005494  08005494  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800549c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004180  20000060  080054fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200041e0  080054fc  000241e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc54  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002599  00000000  00000000  0002dd27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c30  00000000  00000000  000302c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094c  00000000  00000000  00030ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016958  00000000  00000000  0003183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e40a  00000000  00000000  00048194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e458  00000000  00000000  0005659e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035e8  00000000  00000000  000e49f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e7fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052cc 	.word	0x080052cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080052cc 	.word	0x080052cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800059c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <vApplicationGetIdleTaskMemory+0x30>)
 80005a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	200000d0 	.word	0x200000d0

080005c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b0b6      	sub	sp, #216	; 0xd8
 80005c4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005c6:	f000 fba9 	bl	8000d1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005ca:	f000 f8b9 	bl	8000740 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ce:	f000 f94b 	bl	8000868 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005d2:	f000 f91f 	bl	8000814 <MX_USART2_UART_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of messageQueue */
	osMessageQDef(messageQueue, 16, uint32_t);
 80005d6:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <main+0x140>)
 80005d8:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 80005dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	messageQueueHandle = osMessageCreate(osMessageQ(messageQueue), NULL);
 80005e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 ffdc 	bl	80025a6 <osMessageCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a44      	ldr	r2, [pc, #272]	; (8000704 <main+0x144>)
 80005f2:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005f4:	4b44      	ldr	r3, [pc, #272]	; (8000708 <main+0x148>)
 80005f6:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80005fa:	461d      	mov	r5, r3
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000608:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 ff69 	bl	80024e6 <osThreadCreate>
 8000614:	4603      	mov	r3, r0
 8000616:	4a3d      	ldr	r2, [pc, #244]	; (800070c <main+0x14c>)
 8000618:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask02 */
	osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <main+0x150>)
 800061c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000620:	461d      	mov	r5, r3
 8000622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000626:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800062e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff56 	bl	80024e6 <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a35      	ldr	r2, [pc, #212]	; (8000714 <main+0x154>)
 800063e:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask03 */
	osThreadDef(myTask03, StartTask03, osPriorityIdle, 0, 128);
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <main+0x158>)
 8000642:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000646:	461d      	mov	r5, r3
 8000648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000650:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000654:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 ff43 	bl	80024e6 <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a2e      	ldr	r2, [pc, #184]	; (800071c <main+0x15c>)
 8000664:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask04 */
	osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8000666:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <main+0x160>)
 8000668:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 800067a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f001 ff30 	bl	80024e6 <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <main+0x164>)
 800068a:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask05 */
	osThreadDef(myTask05, StartTask05, osPriorityIdle, 0, 128);
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <main+0x168>)
 800068e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000692:	461d      	mov	r5, r3
 8000694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000696:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000698:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 80006a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 ff1d 	bl	80024e6 <osThreadCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a1f      	ldr	r2, [pc, #124]	; (800072c <main+0x16c>)
 80006b0:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask06 */
	osThreadDef(myTask06, StartTask06, osPriorityIdle, 0, 128);
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <main+0x170>)
 80006b4:	f107 0420 	add.w	r4, r7, #32
 80006b8:	461d      	mov	r5, r3
 80006ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ff0a 	bl	80024e6 <osThreadCreate>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <main+0x174>)
 80006d6:	6013      	str	r3, [r2, #0]

	/* definition and creation of myTask07 */
	osThreadDef(myTask07, StartTask07, osPriorityIdle, 0, 128);
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <main+0x178>)
 80006da:	1d3c      	adds	r4, r7, #4
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fef9 	bl	80024e6 <osThreadCreate>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4a11      	ldr	r2, [pc, #68]	; (800073c <main+0x17c>)
 80006f8:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006fa:	f001 feed 	bl	80024d8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006fe:	e7fe      	b.n	80006fe <main+0x13e>
 8000700:	080052e4 	.word	0x080052e4
 8000704:	20000334 	.word	0x20000334
 8000708:	08005300 	.word	0x08005300
 800070c:	20000318 	.word	0x20000318
 8000710:	08005328 	.word	0x08005328
 8000714:	2000031c 	.word	0x2000031c
 8000718:	08005350 	.word	0x08005350
 800071c:	20000320 	.word	0x20000320
 8000720:	08005378 	.word	0x08005378
 8000724:	20000324 	.word	0x20000324
 8000728:	080053a0 	.word	0x080053a0
 800072c:	20000328 	.word	0x20000328
 8000730:	080053c8 	.word	0x080053c8
 8000734:	2000032c 	.word	0x2000032c
 8000738:	080053f0 	.word	0x080053f0
 800073c:	20000330 	.word	0x20000330

08000740 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f004 f938 	bl	80049c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a27      	ldr	r2, [pc, #156]	; (800080c <SystemClock_Config+0xcc>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b25      	ldr	r3, [pc, #148]	; (800080c <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <SystemClock_Config+0xd0>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007b0:	2310      	movs	r3, #16
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fdb8 	bl	800133c <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x96>
		Error_Handler();
 80007d2:	f000 f993 	bl	8000afc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f81a 	bl	800182c <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xc2>
		Error_Handler();
 80007fe:	f000 f97d 	bl	8000afc <Error_Handler>
	}
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART2_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800084c:	f001 fa0e 	bl	8001c6c <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000856:	f000 f951 	bl	8000afc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	200002d0 	.word	0x200002d0
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b37      	ldr	r3, [pc, #220]	; (8000960 <MX_GPIO_Init+0xf8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a36      	ldr	r2, [pc, #216]	; (8000960 <MX_GPIO_Init+0xf8>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b34      	ldr	r3, [pc, #208]	; (8000960 <MX_GPIO_Init+0xf8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b30      	ldr	r3, [pc, #192]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b29      	ldr	r3, [pc, #164]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a28      	ldr	r2, [pc, #160]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_GPIO_Init+0xf8>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2123      	movs	r1, #35	; 0x23
 80008f2:	481c      	ldr	r0, [pc, #112]	; (8000964 <MX_GPIO_Init+0xfc>)
 80008f4:	f000 fcee 	bl	80012d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2101      	movs	r1, #1
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <MX_GPIO_Init+0x100>)
 80008fe:	f000 fce9 	bl	80012d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000906:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000908:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800090c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4814      	ldr	r0, [pc, #80]	; (800096c <MX_GPIO_Init+0x104>)
 800091a:	f000 fb57 	bl	8000fcc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 LD2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | LD2_Pin;
 800091e:	2323      	movs	r3, #35	; 0x23
 8000920:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	480b      	ldr	r0, [pc, #44]	; (8000964 <MX_GPIO_Init+0xfc>)
 8000936:	f000 fb49 	bl	8000fcc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_GPIO_Init+0x100>)
 8000952:	f000 fb3b 	bl	8000fcc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	40020400 	.word	0x40020400
 800096c:	40020800 	.word	0x40020800

08000970 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000978:	2120      	movs	r1, #32
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <StartDefaultTask+0x18>)
 800097c:	f000 fcc3 	bl	8001306 <HAL_GPIO_TogglePin>
		osDelay(25);
 8000980:	2019      	movs	r0, #25
 8000982:	f001 fdfc 	bl	800257e <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000986:	e7f7      	b.n	8000978 <StartDefaultTask+0x8>
 8000988:	40020000 	.word	0x40020000

0800098c <StartTask02>:
 * @brief Function implementing the myTask02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000994:	2101      	movs	r1, #1
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <StartTask02+0x18>)
 8000998:	f000 fcb5 	bl	8001306 <HAL_GPIO_TogglePin>
		osDelay(9);
 800099c:	2009      	movs	r0, #9
 800099e:	f001 fdee 	bl	800257e <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80009a2:	e7f7      	b.n	8000994 <StartTask02+0x8>
 80009a4:	40020000 	.word	0x40020000

080009a8 <StartTask03>:
 * @brief Function implementing the myTask03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80009b0:	2102      	movs	r1, #2
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <StartTask03+0x18>)
 80009b4:	f000 fca7 	bl	8001306 <HAL_GPIO_TogglePin>
		osDelay(64);
 80009b8:	2040      	movs	r0, #64	; 0x40
 80009ba:	f001 fde0 	bl	800257e <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80009be:	e7f7      	b.n	80009b0 <StartTask03+0x8>
 80009c0:	40020000 	.word	0x40020000

080009c4 <StartTask04>:
 * @brief Function implementing the myTask04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void const *argument) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009cc:	2101      	movs	r1, #1
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <StartTask04+0x18>)
 80009d0:	f000 fc99 	bl	8001306 <HAL_GPIO_TogglePin>
		osDelay(32);
 80009d4:	2020      	movs	r0, #32
 80009d6:	f001 fdd2 	bl	800257e <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80009da:	e7f7      	b.n	80009cc <StartTask04+0x8>
 80009dc:	40020400 	.word	0x40020400

080009e0 <StartTask05>:
 * @brief Function implementing the myTask05 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void const *argument) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0a0      	sub	sp, #128	; 0x80
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	uint32_t count = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	677b      	str	r3, [r7, #116]	; 0x74
	Message_t msg1; // Assuming Message_t is structured to include a char array for the message
	msg1.threadID = 1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	723b      	strb	r3, [r7, #8]
	while (1) {
		msg1.count = count++;
 80009f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	677a      	str	r2, [r7, #116]	; 0x74
 80009f6:	60fb      	str	r3, [r7, #12]
		// Assuming Message_t includes a char array named 'message' for storing formatted text
		snprintf(msg1.message, sizeof(msg1.message), "ID: %d, Count: %lu",
				msg1.threadID, msg1.count);
 80009f8:	7a3b      	ldrb	r3, [r7, #8]
		snprintf(msg1.message, sizeof(msg1.message), "ID: %d, Count: %lu",
 80009fa:	4619      	mov	r1, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	f102 0008 	add.w	r0, r2, #8
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <StartTask05+0x50>)
 8000a0c:	2164      	movs	r1, #100	; 0x64
 8000a0e:	f003 ffa5 	bl	800495c <sniprintf>
		osMessagePut(messageQueueHandle, (uint32_t) &msg1, osWaitForever);
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <StartTask05+0x54>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f107 0108 	add.w	r1, r7, #8
 8000a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fdea 	bl	80025f8 <osMessagePut>
		osDelay(300); // 1-second delay
 8000a24:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a28:	f001 fda9 	bl	800257e <osDelay>
	while (1) {
 8000a2c:	e7e0      	b.n	80009f0 <StartTask05+0x10>
 8000a2e:	bf00      	nop
 8000a30:	0800540c 	.word	0x0800540c
 8000a34:	20000334 	.word	0x20000334

08000a38 <StartTask06>:
 * @brief Function implementing the myTask06 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void const *argument) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0a0      	sub	sp, #128	; 0x80
 8000a3c:	af02      	add	r7, sp, #8
 8000a3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask06 */
	/* Infinite loop */
	static uint32_t count2 = 0; // Added a counter for Task 2
	Message_t msg2;
	msg2.threadID = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	733b      	strb	r3, [r7, #12]
	while (1) {
		msg2.count = count2++;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <StartTask06+0x50>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1c5a      	adds	r2, r3, #1
 8000a4a:	490f      	ldr	r1, [pc, #60]	; (8000a88 <StartTask06+0x50>)
 8000a4c:	600a      	str	r2, [r1, #0]
 8000a4e:	613b      	str	r3, [r7, #16]
		// Correcting the sprintf usage
		snprintf(msg2.message, sizeof(msg2.message), "ID: %d, Count: %lu",
				msg2.threadID, msg2.count);
 8000a50:	7b3b      	ldrb	r3, [r7, #12]
		snprintf(msg2.message, sizeof(msg2.message), "ID: %d, Count: %lu",
 8000a52:	4619      	mov	r1, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	f107 020c 	add.w	r2, r7, #12
 8000a5a:	f102 0008 	add.w	r0, r2, #8
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	460b      	mov	r3, r1
 8000a62:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <StartTask06+0x54>)
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	f003 ff79 	bl	800495c <sniprintf>
		osMessagePut(messageQueueHandle, (uint32_t) &msg2, osWaitForever);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <StartTask06+0x58>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f107 010c 	add.w	r1, r7, #12
 8000a72:	f04f 32ff 	mov.w	r2, #4294967295
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fdbe 	bl	80025f8 <osMessagePut>
		osDelay(300); // 2-second delay
 8000a7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a80:	f001 fd7d 	bl	800257e <osDelay>
	while (1) {
 8000a84:	e7de      	b.n	8000a44 <StartTask06+0xc>
 8000a86:	bf00      	nop
 8000a88:	20000338 	.word	0x20000338
 8000a8c:	0800540c 	.word	0x0800540c
 8000a90:	20000334 	.word	0x20000334

08000a94 <StartTask07>:
 * @brief Function implementing the myTask07 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask07 */
void StartTask07(void const *argument) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0a2      	sub	sp, #136	; 0x88
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask07 */
	/* Infinite loop */
	osEvent evt;
	while (1) {
		evt = osMessageGet(messageQueueHandle, osWaitForever);
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <StartTask07+0x5c>)
 8000a9e:	6819      	ldr	r1, [r3, #0]
 8000aa0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fde5 	bl	8002678 <osMessageGet>
		if (evt.status == osEventMessage) {
 8000aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab0:	2b10      	cmp	r3, #16
 8000ab2:	d1f3      	bne.n	8000a9c <StartTask07+0x8>
			Message_t *msg = (Message_t*) evt.value.p;
 8000ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
			char buffer[100]; // Buffer size adjusted as needed
			snprintf(buffer, sizeof(buffer), "ID: %d, Count: %lu \r\n",
					msg->threadID, msg->count);
 8000ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000aba:	781b      	ldrb	r3, [r3, #0]
			snprintf(buffer, sizeof(buffer), "ID: %d, Count: %lu \r\n",
 8000abc:	461a      	mov	r2, r3
 8000abe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f107 000c 	add.w	r0, r7, #12
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <StartTask07+0x60>)
 8000acc:	2164      	movs	r1, #100	; 0x64
 8000ace:	f003 ff45 	bl	800495c <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer),
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fb82 	bl	80001e0 <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f107 010c 	add.w	r1, r7, #12
 8000ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <StartTask07+0x64>)
 8000aea:	f001 f90f 	bl	8001d0c <HAL_UART_Transmit>
		evt = osMessageGet(messageQueueHandle, osWaitForever);
 8000aee:	e7d5      	b.n	8000a9c <StartTask07+0x8>
 8000af0:	20000334 	.word	0x20000334
 8000af4:	08005420 	.word	0x08005420
 8000af8:	200002d0 	.word	0x200002d0

08000afc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_MspInit+0x54>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <HAL_MspInit+0x54>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f000 fa14 	bl	8000f7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <HAL_UART_MspInit+0x84>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12b      	bne.n	8000bda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_UART_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bba:	230c      	movs	r3, #12
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bca:	2307      	movs	r3, #7
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_UART_MspInit+0x8c>)
 8000bd6:	f000 f9f9 	bl	8000fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f8ce 	bl	8000dc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c24:	f003 f95a 	bl	8003edc <xTaskGetSchedulerState>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d001      	beq.n	8000c32 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c2e:	f003 fc1b 	bl	8004468 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f003 feb4 	bl	80049d4 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20020000 	.word	0x20020000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	2000033c 	.word	0x2000033c
 8000ca0:	200041e0 	.word	0x200041e0

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	; (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 fe73 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc61 	bl	80005c0 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d0c:	0800549c 	.word	0x0800549c
  ldr r2, =_sbss
 8000d10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d14:	200041e0 	.word	0x200041e0

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f90d 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff feda 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f917 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f8ed 	bl	8000f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000340 	.word	0x20000340

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000340 	.word	0x20000340

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff47 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5c 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff8e 	bl	8000eb8 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5d 	bl	8000e64 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb0 	bl	8000f20 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e159      	b.n	800129c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 8148 	bne.w	8001296 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80a2 	beq.w	8001296 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <HAL_GPIO_Init+0x2e8>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a52      	ldr	r2, [pc, #328]	; (80012b8 <HAL_GPIO_Init+0x2ec>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_GPIO_Init+0x2f0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d019      	beq.n	80011ce <HAL_GPIO_Init+0x202>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a48      	ldr	r2, [pc, #288]	; (80012c0 <HAL_GPIO_Init+0x2f4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0x1fe>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a47      	ldr	r2, [pc, #284]	; (80012c4 <HAL_GPIO_Init+0x2f8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d00d      	beq.n	80011c6 <HAL_GPIO_Init+0x1fa>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a46      	ldr	r2, [pc, #280]	; (80012c8 <HAL_GPIO_Init+0x2fc>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d007      	beq.n	80011c2 <HAL_GPIO_Init+0x1f6>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a45      	ldr	r2, [pc, #276]	; (80012cc <HAL_GPIO_Init+0x300>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_GPIO_Init+0x1f2>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011be:	2307      	movs	r3, #7
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x204>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x2ec>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b38      	ldr	r3, [pc, #224]	; (80012d0 <HAL_GPIO_Init+0x304>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a2f      	ldr	r2, [pc, #188]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_GPIO_Init+0x304>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <HAL_GPIO_Init+0x304>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_GPIO_Init+0x304>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_GPIO_Init+0x304>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f aea2 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40013c00 	.word	0x40013c00

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	460b      	mov	r3, r1
 8001310:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	041a      	lsls	r2, r3, #16
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43d9      	mvns	r1, r3
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	400b      	ands	r3, r1
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e267      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d112      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b7e      	ldr	r3, [pc, #504]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e242      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a75      	ldr	r2, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b70      	ldr	r3, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6f      	ldr	r2, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b6d      	ldr	r3, [pc, #436]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6c      	ldr	r2, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a68      	ldr	r2, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b66      	ldr	r3, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fcf8 	bl	8000de8 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fcf4 	bl	8000de8 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e207      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fce4 	bl	8000de8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fce0 	bl	8000de8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1f3      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c7      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fc99 	bl	8000de8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc95 	bl	8000de8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a8      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4925      	ldr	r1, [pc, #148]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc78 	bl	8000de8 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc74 	bl	8000de8 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e187      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d036      	beq.n	8001594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fc58 	bl	8000de8 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fc54 	bl	8000de8 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e167      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
 800155a:	e01b      	b.n	8001594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fc41 	bl	8000de8 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	e00e      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fc3d 	bl	8000de8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d907      	bls.n	8001588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e150      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 800157c:	40023800 	.word	0x40023800
 8001580:	42470000 	.word	0x42470000
 8001584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ea      	bne.n	800156a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8097 	beq.w	80016d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b7d      	ldr	r3, [pc, #500]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a7c      	ldr	r2, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b77      	ldr	r3, [pc, #476]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b74      	ldr	r3, [pc, #464]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a73      	ldr	r2, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fbfd 	bl	8000de8 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fbf9 	bl	8000de8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e10c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x2ea>
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	4a63      	ldr	r2, [pc, #396]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	; 0x70
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x30c>
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a5b      	ldr	r2, [pc, #364]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a54      	ldr	r2, [pc, #336]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d015      	beq.n	8001694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fbbe 	bl	8000de8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fbba 	bl	8000de8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0cb      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ee      	beq.n	8001670 <HAL_RCC_OscConfig+0x334>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fba8 	bl	8000de8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff fba4 	bl	8000de8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0b5      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ee      	bne.n	800169c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a1 	beq.w	800181c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d05c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d141      	bne.n	8001772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb78 	bl	8000de8 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb74 	bl	8000de8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e087      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	491b      	ldr	r1, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fb4d 	bl	8000de8 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fb49 	bl	8000de8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e05c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x416>
 8001770:	e054      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fb36 	bl	8000de8 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fb32 	bl	8000de8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e045      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x444>
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e038      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d028      	beq.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d121      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11a      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d111      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	3b01      	subs	r3, #1
 8001802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cc      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d044      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e067      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4934      	ldr	r1, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff fa64 	bl	8000de8 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff fa60 	bl	8000de8 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d20c      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f9c4 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08005440 	.word	0x08005440
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b094      	sub	sp, #80	; 0x50
 80019fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
 8001a04:	2300      	movs	r3, #0
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a08:	2300      	movs	r3, #0
 8001a0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a10:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d00d      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	f200 80e1 	bhi.w	8001be4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e0db      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a30:	e0db      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a36:	e0d8      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a38:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a42:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
 8001a66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a6a:	4622      	mov	r2, r4
 8001a6c:	462b      	mov	r3, r5
 8001a6e:	f04f 0000 	mov.w	r0, #0
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	0159      	lsls	r1, r3, #5
 8001a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7c:	0150      	lsls	r0, r2, #5
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4621      	mov	r1, r4
 8001a84:	1a51      	subs	r1, r2, r1
 8001a86:	6139      	str	r1, [r7, #16]
 8001a88:	4629      	mov	r1, r5
 8001a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a9c:	4659      	mov	r1, fp
 8001a9e:	018b      	lsls	r3, r1, #6
 8001aa0:	4651      	mov	r1, sl
 8001aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aa6:	4651      	mov	r1, sl
 8001aa8:	018a      	lsls	r2, r1, #6
 8001aaa:	4651      	mov	r1, sl
 8001aac:	ebb2 0801 	subs.w	r8, r2, r1
 8001ab0:	4659      	mov	r1, fp
 8001ab2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 0300 	mov.w	r3, #0
 8001abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aca:	4690      	mov	r8, r2
 8001acc:	4699      	mov	r9, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	eb18 0303 	adds.w	r3, r8, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	eb49 0303 	adc.w	r3, r9, r3
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aea:	4629      	mov	r1, r5
 8001aec:	024b      	lsls	r3, r1, #9
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001af4:	4621      	mov	r1, r4
 8001af6:	024a      	lsls	r2, r1, #9
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b08:	f7fe fbc2 	bl	8000290 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b14:	e058      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	099b      	lsrs	r3, r3, #6
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4611      	mov	r1, r2
 8001b22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b30:	4642      	mov	r2, r8
 8001b32:	464b      	mov	r3, r9
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	0159      	lsls	r1, r3, #5
 8001b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b42:	0150      	lsls	r0, r2, #5
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4641      	mov	r1, r8
 8001b4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b4e:	4649      	mov	r1, r9
 8001b50:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b68:	ebb2 040a 	subs.w	r4, r2, sl
 8001b6c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	00eb      	lsls	r3, r5, #3
 8001b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7e:	00e2      	lsls	r2, r4, #3
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	18e3      	adds	r3, r4, r3
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	61fa      	str	r2, [r7, #28]
 8001bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bbc:	f7fe fb68 	bl	8000290 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be2:	e002      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x204>)
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3750      	adds	r7, #80	; 0x50
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	007a1200 	.word	0x007a1200

08001c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c08:	4b03      	ldr	r3, [pc, #12]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c20:	f7ff fff0 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0a9b      	lsrs	r3, r3, #10
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08005450 	.word	0x08005450

08001c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c48:	f7ff ffdc 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0b5b      	lsrs	r3, r3, #13
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	08005450 	.word	0x08005450

08001c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e042      	b.n	8001d04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d106      	bne.n	8001c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe ff64 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2224      	movs	r2, #36	; 0x24
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f973 	bl	8001f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d175      	bne.n	8001e18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d002      	beq.n	8001d38 <HAL_UART_Transmit+0x2c>
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e06e      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d4a:	f7ff f84d 	bl	8000de8 <HAL_GetTick>
 8001d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d64:	d108      	bne.n	8001d78 <HAL_UART_Transmit+0x6c>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	e003      	b.n	8001d80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d80:	e02e      	b.n	8001de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 f848 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e03a      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	e007      	b.n	8001dd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1cb      	bne.n	8001d82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f814 	bl	8001e22 <UART_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e006      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3720      	adds	r7, #32
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e32:	e03b      	b.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3a:	d037      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e3c:	f7fe ffd4 	bl	8000de8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	6a3a      	ldr	r2, [r7, #32]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d302      	bcc.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e03a      	b.n	8001ecc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d023      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b80      	cmp	r3, #128	; 0x80
 8001e68:	d020      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b40      	cmp	r3, #64	; 0x40
 8001e6e:	d01d      	beq.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d116      	bne.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	f000 f81d 	bl	8001ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e00f      	b.n	8001ecc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d0b4      	beq.n	8001e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b095      	sub	sp, #84	; 0x54
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	330c      	adds	r3, #12
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee6:	e853 3f00 	ldrex	r3, [r3]
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001efc:	643a      	str	r2, [r7, #64]	; 0x40
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f04:	e841 2300 	strex	r3, r2, [r1]
 8001f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e5      	bne.n	8001edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3314      	adds	r3, #20
 8001f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	e853 3f00 	ldrex	r3, [r3]
 8001f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3314      	adds	r3, #20
 8001f2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f38:	e841 2300 	strex	r3, r2, [r1]
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1e5      	bne.n	8001f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d119      	bne.n	8001f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	330c      	adds	r3, #12
 8001f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	e853 3f00 	ldrex	r3, [r3]
 8001f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f023 0310 	bic.w	r3, r3, #16
 8001f62:	647b      	str	r3, [r7, #68]	; 0x44
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f6c:	61ba      	str	r2, [r7, #24]
 8001f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f70:	6979      	ldr	r1, [r7, #20]
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	e841 2300 	strex	r3, r2, [r1]
 8001f78:	613b      	str	r3, [r7, #16]
   return(result);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e5      	bne.n	8001f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f8e:	bf00      	nop
 8001f90:	3754      	adds	r7, #84	; 0x54
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fa0:	b0c0      	sub	sp, #256	; 0x100
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fb8:	68d9      	ldr	r1, [r3, #12]
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	ea40 0301 	orr.w	r3, r0, r1
 8001fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ff4:	f021 010c 	bic.w	r1, r1, #12
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002002:	430b      	orrs	r3, r1
 8002004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002016:	6999      	ldr	r1, [r3, #24]
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	ea40 0301 	orr.w	r3, r0, r1
 8002022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b8f      	ldr	r3, [pc, #572]	; (8002268 <UART_SetConfig+0x2cc>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d005      	beq.n	800203c <UART_SetConfig+0xa0>
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b8d      	ldr	r3, [pc, #564]	; (800226c <UART_SetConfig+0x2d0>)
 8002038:	429a      	cmp	r2, r3
 800203a:	d104      	bne.n	8002046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800203c:	f7ff fe02 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8002040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002044:	e003      	b.n	800204e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002046:	f7ff fde9 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 800204a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800204e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002058:	f040 810c 	bne.w	8002274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800205c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002060:	2200      	movs	r2, #0
 8002062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800206a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800206e:	4622      	mov	r2, r4
 8002070:	462b      	mov	r3, r5
 8002072:	1891      	adds	r1, r2, r2
 8002074:	65b9      	str	r1, [r7, #88]	; 0x58
 8002076:	415b      	adcs	r3, r3
 8002078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800207a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800207e:	4621      	mov	r1, r4
 8002080:	eb12 0801 	adds.w	r8, r2, r1
 8002084:	4629      	mov	r1, r5
 8002086:	eb43 0901 	adc.w	r9, r3, r1
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800209a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800209e:	4690      	mov	r8, r2
 80020a0:	4699      	mov	r9, r3
 80020a2:	4623      	mov	r3, r4
 80020a4:	eb18 0303 	adds.w	r3, r8, r3
 80020a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020ac:	462b      	mov	r3, r5
 80020ae:	eb49 0303 	adc.w	r3, r9, r3
 80020b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80020c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80020c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80020ca:	460b      	mov	r3, r1
 80020cc:	18db      	adds	r3, r3, r3
 80020ce:	653b      	str	r3, [r7, #80]	; 0x50
 80020d0:	4613      	mov	r3, r2
 80020d2:	eb42 0303 	adc.w	r3, r2, r3
 80020d6:	657b      	str	r3, [r7, #84]	; 0x54
 80020d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80020dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80020e0:	f7fe f8d6 	bl	8000290 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4b61      	ldr	r3, [pc, #388]	; (8002270 <UART_SetConfig+0x2d4>)
 80020ea:	fba3 2302 	umull	r2, r3, r3, r2
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	011c      	lsls	r4, r3, #4
 80020f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80020fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	1891      	adds	r1, r2, r2
 800210a:	64b9      	str	r1, [r7, #72]	; 0x48
 800210c:	415b      	adcs	r3, r3
 800210e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002114:	4641      	mov	r1, r8
 8002116:	eb12 0a01 	adds.w	sl, r2, r1
 800211a:	4649      	mov	r1, r9
 800211c:	eb43 0b01 	adc.w	fp, r3, r1
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800212c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002134:	4692      	mov	sl, r2
 8002136:	469b      	mov	fp, r3
 8002138:	4643      	mov	r3, r8
 800213a:	eb1a 0303 	adds.w	r3, sl, r3
 800213e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002142:	464b      	mov	r3, r9
 8002144:	eb4b 0303 	adc.w	r3, fp, r3
 8002148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800214c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800215c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002160:	460b      	mov	r3, r1
 8002162:	18db      	adds	r3, r3, r3
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
 8002166:	4613      	mov	r3, r2
 8002168:	eb42 0303 	adc.w	r3, r2, r3
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
 800216e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002176:	f7fe f88b 	bl	8000290 <__aeabi_uldivmod>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4611      	mov	r1, r2
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <UART_SetConfig+0x2d4>)
 8002182:	fba3 2301 	umull	r2, r3, r3, r1
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2264      	movs	r2, #100	; 0x64
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	1acb      	subs	r3, r1, r3
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002196:	4b36      	ldr	r3, [pc, #216]	; (8002270 <UART_SetConfig+0x2d4>)
 8002198:	fba3 2302 	umull	r2, r3, r3, r2
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021a4:	441c      	add	r4, r3
 80021a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021b8:	4642      	mov	r2, r8
 80021ba:	464b      	mov	r3, r9
 80021bc:	1891      	adds	r1, r2, r2
 80021be:	63b9      	str	r1, [r7, #56]	; 0x38
 80021c0:	415b      	adcs	r3, r3
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021c8:	4641      	mov	r1, r8
 80021ca:	1851      	adds	r1, r2, r1
 80021cc:	6339      	str	r1, [r7, #48]	; 0x30
 80021ce:	4649      	mov	r1, r9
 80021d0:	414b      	adcs	r3, r1
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80021e0:	4659      	mov	r1, fp
 80021e2:	00cb      	lsls	r3, r1, #3
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ea:	4651      	mov	r1, sl
 80021ec:	00ca      	lsls	r2, r1, #3
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	4642      	mov	r2, r8
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80021fc:	464b      	mov	r3, r9
 80021fe:	460a      	mov	r2, r1
 8002200:	eb42 0303 	adc.w	r3, r2, r3
 8002204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800221c:	460b      	mov	r3, r1
 800221e:	18db      	adds	r3, r3, r3
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
 8002222:	4613      	mov	r3, r2
 8002224:	eb42 0303 	adc.w	r3, r2, r3
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800222e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002232:	f7fe f82d 	bl	8000290 <__aeabi_uldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <UART_SetConfig+0x2d4>)
 800223c:	fba3 1302 	umull	r1, r3, r3, r2
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	2164      	movs	r1, #100	; 0x64
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	3332      	adds	r3, #50	; 0x32
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <UART_SetConfig+0x2d4>)
 8002250:	fba2 2303 	umull	r2, r3, r2, r3
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4422      	add	r2, r4
 8002262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002264:	e106      	b.n	8002474 <UART_SetConfig+0x4d8>
 8002266:	bf00      	nop
 8002268:	40011000 	.word	0x40011000
 800226c:	40011400 	.word	0x40011400
 8002270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002278:	2200      	movs	r2, #0
 800227a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800227e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002286:	4642      	mov	r2, r8
 8002288:	464b      	mov	r3, r9
 800228a:	1891      	adds	r1, r2, r2
 800228c:	6239      	str	r1, [r7, #32]
 800228e:	415b      	adcs	r3, r3
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
 8002292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002296:	4641      	mov	r1, r8
 8002298:	1854      	adds	r4, r2, r1
 800229a:	4649      	mov	r1, r9
 800229c:	eb43 0501 	adc.w	r5, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	00eb      	lsls	r3, r5, #3
 80022aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ae:	00e2      	lsls	r2, r4, #3
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4643      	mov	r3, r8
 80022b6:	18e3      	adds	r3, r4, r3
 80022b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022bc:	464b      	mov	r3, r9
 80022be:	eb45 0303 	adc.w	r3, r5, r3
 80022c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022e2:	4629      	mov	r1, r5
 80022e4:	008b      	lsls	r3, r1, #2
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022ec:	4621      	mov	r1, r4
 80022ee:	008a      	lsls	r2, r1, #2
 80022f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80022f4:	f7fd ffcc 	bl	8000290 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4b60      	ldr	r3, [pc, #384]	; (8002480 <UART_SetConfig+0x4e4>)
 80022fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	011c      	lsls	r4, r3, #4
 8002306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002318:	4642      	mov	r2, r8
 800231a:	464b      	mov	r3, r9
 800231c:	1891      	adds	r1, r2, r2
 800231e:	61b9      	str	r1, [r7, #24]
 8002320:	415b      	adcs	r3, r3
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002328:	4641      	mov	r1, r8
 800232a:	1851      	adds	r1, r2, r1
 800232c:	6139      	str	r1, [r7, #16]
 800232e:	4649      	mov	r1, r9
 8002330:	414b      	adcs	r3, r1
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002340:	4659      	mov	r1, fp
 8002342:	00cb      	lsls	r3, r1, #3
 8002344:	4651      	mov	r1, sl
 8002346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800234a:	4651      	mov	r1, sl
 800234c:	00ca      	lsls	r2, r1, #3
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	4603      	mov	r3, r0
 8002354:	4642      	mov	r2, r8
 8002356:	189b      	adds	r3, r3, r2
 8002358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800235c:	464b      	mov	r3, r9
 800235e:	460a      	mov	r2, r1
 8002360:	eb42 0303 	adc.w	r3, r2, r3
 8002364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	67bb      	str	r3, [r7, #120]	; 0x78
 8002372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002380:	4649      	mov	r1, r9
 8002382:	008b      	lsls	r3, r1, #2
 8002384:	4641      	mov	r1, r8
 8002386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800238a:	4641      	mov	r1, r8
 800238c:	008a      	lsls	r2, r1, #2
 800238e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002392:	f7fd ff7d 	bl	8000290 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4611      	mov	r1, r2
 800239c:	4b38      	ldr	r3, [pc, #224]	; (8002480 <UART_SetConfig+0x4e4>)
 800239e:	fba3 2301 	umull	r2, r3, r3, r1
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2264      	movs	r2, #100	; 0x64
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	1acb      	subs	r3, r1, r3
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	3332      	adds	r3, #50	; 0x32
 80023b0:	4a33      	ldr	r2, [pc, #204]	; (8002480 <UART_SetConfig+0x4e4>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023bc:	441c      	add	r4, r3
 80023be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023c2:	2200      	movs	r2, #0
 80023c4:	673b      	str	r3, [r7, #112]	; 0x70
 80023c6:	677a      	str	r2, [r7, #116]	; 0x74
 80023c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80023cc:	4642      	mov	r2, r8
 80023ce:	464b      	mov	r3, r9
 80023d0:	1891      	adds	r1, r2, r2
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	415b      	adcs	r3, r3
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023dc:	4641      	mov	r1, r8
 80023de:	1851      	adds	r1, r2, r1
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	4649      	mov	r1, r9
 80023e4:	414b      	adcs	r3, r1
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023f4:	4659      	mov	r1, fp
 80023f6:	00cb      	lsls	r3, r1, #3
 80023f8:	4651      	mov	r1, sl
 80023fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023fe:	4651      	mov	r1, sl
 8002400:	00ca      	lsls	r2, r1, #3
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	4603      	mov	r3, r0
 8002408:	4642      	mov	r2, r8
 800240a:	189b      	adds	r3, r3, r2
 800240c:	66bb      	str	r3, [r7, #104]	; 0x68
 800240e:	464b      	mov	r3, r9
 8002410:	460a      	mov	r2, r1
 8002412:	eb42 0303 	adc.w	r3, r2, r3
 8002416:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
 8002422:	667a      	str	r2, [r7, #100]	; 0x64
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002430:	4649      	mov	r1, r9
 8002432:	008b      	lsls	r3, r1, #2
 8002434:	4641      	mov	r1, r8
 8002436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800243a:	4641      	mov	r1, r8
 800243c:	008a      	lsls	r2, r1, #2
 800243e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002442:	f7fd ff25 	bl	8000290 <__aeabi_uldivmod>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <UART_SetConfig+0x4e4>)
 800244c:	fba3 1302 	umull	r1, r3, r3, r2
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	2164      	movs	r1, #100	; 0x64
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	3332      	adds	r3, #50	; 0x32
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <UART_SetConfig+0x4e4>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4422      	add	r2, r4
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002480:	51eb851f 	.word	0x51eb851f

08002484 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002496:	2b84      	cmp	r3, #132	; 0x84
 8002498:	d005      	beq.n	80024a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800249a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4413      	add	r3, r2
 80024a2:	3303      	adds	r3, #3
 80024a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ba:	f3ef 8305 	mrs	r3, IPSR
 80024be:	607b      	str	r3, [r7, #4]
  return(result);
 80024c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024dc:	f001 f900 	bl	80036e0 <vTaskStartScheduler>
  
  return osOK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80024e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e8:	b089      	sub	sp, #36	; 0x24
 80024ea:	af04      	add	r7, sp, #16
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <osThreadCreate+0x54>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685c      	ldr	r4, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691e      	ldr	r6, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ffb6 	bl	8002484 <makeFreeRtosPriority>
 8002518:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002522:	9202      	str	r2, [sp, #8]
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	9100      	str	r1, [sp, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4632      	mov	r2, r6
 800252c:	4629      	mov	r1, r5
 800252e:	4620      	mov	r0, r4
 8002530:	f000 ff0e 	bl	8003350 <xTaskCreateStatic>
 8002534:	4603      	mov	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	e01c      	b.n	8002574 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685c      	ldr	r4, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002546:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff98 	bl	8002484 <makeFreeRtosPriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	9200      	str	r2, [sp, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	4632      	mov	r2, r6
 8002562:	4629      	mov	r1, r5
 8002564:	4620      	mov	r0, r4
 8002566:	f000 ff50 	bl	800340a <xTaskCreate>
 800256a:	4603      	mov	r3, r0
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002570:	2300      	movs	r3, #0
 8002572:	e000      	b.n	8002576 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002574:	68fb      	ldr	r3, [r7, #12]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800257e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <osDelay+0x16>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	e000      	b.n	8002596 <osDelay+0x18>
 8002594:	2301      	movs	r3, #1
 8002596:	4618      	mov	r0, r3
 8002598:	f001 f86e 	bl	8003678 <vTaskDelay>
  
  return osOK;
 800259c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80025a6:	b590      	push	{r4, r7, lr}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af02      	add	r7, sp, #8
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d011      	beq.n	80025dc <osMessageCreate+0x36>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00d      	beq.n	80025dc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2400      	movs	r4, #0
 80025d2:	9400      	str	r4, [sp, #0]
 80025d4:	f000 f9e0 	bl	8002998 <xQueueGenericCreateStatic>
 80025d8:	4603      	mov	r3, r0
 80025da:	e008      	b.n	80025ee <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	4619      	mov	r1, r3
 80025e8:	f000 fa4e 	bl	8002a88 <xQueueGenericCreate>
 80025ec:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
	...

080025f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002604:	2300      	movs	r3, #0
 8002606:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <osMessagePut+0x1e>
    ticks = 1;
 8002612:	2301      	movs	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002616:	f7ff ff4d 	bl	80024b4 <inHandlerMode>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d018      	beq.n	8002652 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002620:	f107 0210 	add.w	r2, r7, #16
 8002624:	f107 0108 	add.w	r1, r7, #8
 8002628:	2300      	movs	r3, #0
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fb84 	bl	8002d38 <xQueueGenericSendFromISR>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <osMessagePut+0x42>
      return osErrorOS;
 8002636:	23ff      	movs	r3, #255	; 0xff
 8002638:	e018      	b.n	800266c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <osMessagePut+0x72>
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <osMessagePut+0x7c>)
 8002642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	e00b      	b.n	800266a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002652:	f107 0108 	add.w	r1, r7, #8
 8002656:	2300      	movs	r3, #0
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 fa6e 	bl	8002b3c <xQueueGenericSend>
 8002660:	4603      	mov	r3, r0
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <osMessagePut+0x72>
      return osErrorOS;
 8002666:	23ff      	movs	r3, #255	; 0xff
 8002668:	e000      	b.n	800266c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b08b      	sub	sp, #44	; 0x2c
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	617b      	str	r3, [r7, #20]
    return event;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	461c      	mov	r4, r3
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80026a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80026a6:	e054      	b.n	8002752 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d103      	bne.n	80026c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
 80026be:	e009      	b.n	80026d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <osMessageGet+0x5c>
      ticks = 1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80026d4:	f7ff feee 	bl	80024b4 <inHandlerMode>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01c      	beq.n	8002718 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80026de:	f107 0220 	add.w	r2, r7, #32
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	3304      	adds	r3, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f000 fca0 	bl	8003030 <xQueueReceiveFromISR>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d102      	bne.n	80026fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80026f6:	2310      	movs	r3, #16
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e001      	b.n	8002700 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01d      	beq.n	8002742 <osMessageGet+0xca>
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <osMessageGet+0xe4>)
 8002708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	f3bf 8f6f 	isb	sy
 8002716:	e014      	b.n	8002742 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	3304      	adds	r3, #4
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	4619      	mov	r1, r3
 8002722:	68b8      	ldr	r0, [r7, #8]
 8002724:	f000 fba4 	bl	8002e70 <xQueueReceive>
 8002728:	4603      	mov	r3, r0
 800272a:	2b01      	cmp	r3, #1
 800272c:	d102      	bne.n	8002734 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800272e:	2310      	movs	r3, #16
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e006      	b.n	8002742 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <osMessageGet+0xc6>
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <osMessageGet+0xc8>
 800273e:	2340      	movs	r3, #64	; 0x40
 8002740:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	461c      	mov	r4, r3
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800274e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	372c      	adds	r7, #44	; 0x2c
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}
 800275a:	bf00      	nop
 800275c:	e000ed04 	.word	0xe000ed04

08002760 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 0208 	add.w	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f103 0208 	add.w	r2, r3, #8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f103 0208 	add.w	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d103      	bne.n	8002822 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e00c      	b.n	800283c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3308      	adds	r3, #8
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e002      	b.n	8002830 <vListInsert+0x2e>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	d2f6      	bcs.n	800282a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	601a      	str	r2, [r3, #0]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6852      	ldr	r2, [r2, #4]
 8002894:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	d103      	bne.n	80028a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	1e5a      	subs	r2, r3, #1
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028f2:	f001 fd27 	bl	8004344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fe:	68f9      	ldr	r1, [r7, #12]
 8002900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	441a      	add	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	3b01      	subs	r3, #1
 8002924:	68f9      	ldr	r1, [r7, #12]
 8002926:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	441a      	add	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	22ff      	movs	r2, #255	; 0xff
 8002936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22ff      	movs	r2, #255	; 0xff
 800293e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d114      	bne.n	8002972 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d01a      	beq.n	8002986 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	3310      	adds	r3, #16
 8002954:	4618      	mov	r0, r3
 8002956:	f001 f905 	bl	8003b64 <xTaskRemoveFromEventList>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d012      	beq.n	8002986 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <xQueueGenericReset+0xcc>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	e009      	b.n	8002986 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3310      	adds	r3, #16
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fef2 	bl	8002760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3324      	adds	r3, #36	; 0x24
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff feed 	bl	8002760 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002986:	f001 fd0d 	bl	80043a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029da:	bf00      	nop
 80029dc:	e7fe      	b.n	80029dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <xQueueGenericCreateStatic+0x52>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <xQueueGenericCreateStatic+0x56>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <xQueueGenericCreateStatic+0x58>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	623b      	str	r3, [r7, #32]
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <xQueueGenericCreateStatic+0x7e>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <xQueueGenericCreateStatic+0x82>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <xQueueGenericCreateStatic+0x84>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61fb      	str	r3, [r7, #28]
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a36:	2348      	movs	r3, #72	; 0x48
 8002a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b48      	cmp	r3, #72	; 0x48
 8002a3e:	d00a      	beq.n	8002a56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a44:	f383 8811 	msr	BASEPRI, r3
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	f3bf 8f4f 	dsb	sy
 8002a50:	61bb      	str	r3, [r7, #24]
}
 8002a52:	bf00      	nop
 8002a54:	e7fe      	b.n	8002a54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4613      	mov	r3, r2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f83f 	bl	8002afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3730      	adds	r7, #48	; 0x30
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10a      	bne.n	8002ab2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	613b      	str	r3, [r7, #16]
}
 8002aae:	bf00      	nop
 8002ab0:	e7fe      	b.n	8002ab0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3348      	adds	r3, #72	; 0x48
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fd61 	bl	8004588 <pvPortMalloc>
 8002ac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d011      	beq.n	8002af2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3348      	adds	r3, #72	; 0x48
 8002ad6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ae0:	79fa      	ldrb	r2, [r7, #7]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f805 	bl	8002afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002af2:	69bb      	ldr	r3, [r7, #24]
	}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d103      	bne.n	8002b18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e002      	b.n	8002b1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	69b8      	ldr	r0, [r7, #24]
 8002b2e:	f7ff fecb 	bl	80028c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08e      	sub	sp, #56	; 0x38
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <xQueueGenericSend+0x32>
	__asm volatile
 8002b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5c:	f383 8811 	msr	BASEPRI, r3
 8002b60:	f3bf 8f6f 	isb	sy
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b6a:	bf00      	nop
 8002b6c:	e7fe      	b.n	8002b6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d103      	bne.n	8002b7c <xQueueGenericSend+0x40>
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <xQueueGenericSend+0x44>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <xQueueGenericSend+0x46>
 8002b80:	2300      	movs	r3, #0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <xQueueGenericSend+0x60>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b98:	bf00      	nop
 8002b9a:	e7fe      	b.n	8002b9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d103      	bne.n	8002baa <xQueueGenericSend+0x6e>
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <xQueueGenericSend+0x72>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <xQueueGenericSend+0x74>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <xQueueGenericSend+0x8e>
	__asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	623b      	str	r3, [r7, #32]
}
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bca:	f001 f987 	bl	8003edc <xTaskGetSchedulerState>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d102      	bne.n	8002bda <xQueueGenericSend+0x9e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <xQueueGenericSend+0xa2>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <xQueueGenericSend+0xa4>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <xQueueGenericSend+0xbe>
	__asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	61fb      	str	r3, [r7, #28]
}
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bfa:	f001 fba3 	bl	8004344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <xQueueGenericSend+0xd4>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d129      	bne.n	8002c64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c16:	f000 fa8b 	bl	8003130 <prvCopyDataToQueue>
 8002c1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	3324      	adds	r3, #36	; 0x24
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 ff9b 	bl	8003b64 <xTaskRemoveFromEventList>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d013      	beq.n	8002c5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c34:	4b3f      	ldr	r3, [pc, #252]	; (8002d34 <xQueueGenericSend+0x1f8>)
 8002c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f3bf 8f4f 	dsb	sy
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	e00a      	b.n	8002c5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d007      	beq.n	8002c5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <xQueueGenericSend+0x1f8>)
 8002c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c5c:	f001 fba2 	bl	80043a4 <vPortExitCritical>
				return pdPASS;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e063      	b.n	8002d2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c6a:	f001 fb9b 	bl	80043a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e05c      	b.n	8002d2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d106      	bne.n	8002c86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 ffd3 	bl	8003c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c82:	2301      	movs	r3, #1
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c86:	f001 fb8d 	bl	80043a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c8a:	f000 fd89 	bl	80037a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c8e:	f001 fb59 	bl	8004344 <vPortEnterCritical>
 8002c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c98:	b25b      	sxtb	r3, r3
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d103      	bne.n	8002ca8 <xQueueGenericSend+0x16c>
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d103      	bne.n	8002cbe <xQueueGenericSend+0x182>
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cbe:	f001 fb71 	bl	80043a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cc2:	1d3a      	adds	r2, r7, #4
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 ffc2 	bl	8003c54 <xTaskCheckForTimeOut>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d124      	bne.n	8002d20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd8:	f000 fb22 	bl	8003320 <prvIsQueueFull>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	3310      	adds	r3, #16
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 ff16 	bl	8003b1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf2:	f000 faad 	bl	8003250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cf6:	f000 fd61 	bl	80037bc <xTaskResumeAll>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f47f af7c 	bne.w	8002bfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <xQueueGenericSend+0x1f8>)
 8002d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	e772      	b.n	8002bfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d16:	f000 fa9b 	bl	8003250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d1a:	f000 fd4f 	bl	80037bc <xTaskResumeAll>
 8002d1e:	e76c      	b.n	8002bfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d22:	f000 fa95 	bl	8003250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d26:	f000 fd49 	bl	80037bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3738      	adds	r7, #56	; 0x38
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b090      	sub	sp, #64	; 0x40
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <xQueueGenericSendFromISR+0x3c>
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <xQueueGenericSendFromISR+0x40>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <xQueueGenericSendFromISR+0x42>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d103      	bne.n	8002da2 <xQueueGenericSendFromISR+0x6a>
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <xQueueGenericSendFromISR+0x6e>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <xQueueGenericSendFromISR+0x70>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	623b      	str	r3, [r7, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dc2:	f001 fba1 	bl	8004508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002dc6:	f3ef 8211 	mrs	r2, BASEPRI
 8002dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
 8002dda:	61fa      	str	r2, [r7, #28]
 8002ddc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dde:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002de0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d302      	bcc.n	8002df4 <xQueueGenericSendFromISR+0xbc>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d12f      	bne.n	8002e54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e0a:	f000 f991 	bl	8003130 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e16:	d112      	bne.n	8002e3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	3324      	adds	r3, #36	; 0x24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 fe9d 	bl	8003b64 <xTaskRemoveFromEventList>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00b      	beq.n	8002e4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e007      	b.n	8002e4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e42:	3301      	adds	r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	b25a      	sxtb	r2, r3
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e52:	e001      	b.n	8002e58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3740      	adds	r7, #64	; 0x40
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10a      	bne.n	8002ea0 <xQueueReceive+0x30>
	__asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	623b      	str	r3, [r7, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	e7fe      	b.n	8002e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <xQueueReceive+0x3e>
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <xQueueReceive+0x42>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <xQueueReceive+0x44>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <xQueueReceive+0x5e>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	61fb      	str	r3, [r7, #28]
}
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ece:	f001 f805 	bl	8003edc <xTaskGetSchedulerState>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <xQueueReceive+0x6e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <xQueueReceive+0x72>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <xQueueReceive+0x74>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xQueueReceive+0x8e>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	61bb      	str	r3, [r7, #24]
}
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002efe:	f001 fa21 	bl	8004344 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01f      	beq.n	8002f4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f12:	f000 f977 	bl	8003204 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	1e5a      	subs	r2, r3, #1
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00f      	beq.n	8002f46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f28:	3310      	adds	r3, #16
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fe1a 	bl	8003b64 <xTaskRemoveFromEventList>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d007      	beq.n	8002f46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <xQueueReceive+0x1bc>)
 8002f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f46:	f001 fa2d 	bl	80043a4 <vPortExitCritical>
				return pdPASS;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e069      	b.n	8003022 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d103      	bne.n	8002f5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f54:	f001 fa26 	bl	80043a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e062      	b.n	8003022 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d106      	bne.n	8002f70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f62:	f107 0310 	add.w	r3, r7, #16
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fe5e 	bl	8003c28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f70:	f001 fa18 	bl	80043a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f74:	f000 fc14 	bl	80037a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f78:	f001 f9e4 	bl	8004344 <vPortEnterCritical>
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d103      	bne.n	8002f92 <xQueueReceive+0x122>
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9e:	d103      	bne.n	8002fa8 <xQueueReceive+0x138>
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fa8:	f001 f9fc 	bl	80043a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fac:	1d3a      	adds	r2, r7, #4
 8002fae:	f107 0310 	add.w	r3, r7, #16
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fe4d 	bl	8003c54 <xTaskCheckForTimeOut>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d123      	bne.n	8003008 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc2:	f000 f997 	bl	80032f4 <prvIsQueueEmpty>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d017      	beq.n	8002ffc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	3324      	adds	r3, #36	; 0x24
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fda1 	bl	8003b1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fdc:	f000 f938 	bl	8003250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fe0:	f000 fbec 	bl	80037bc <xTaskResumeAll>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d189      	bne.n	8002efe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <xQueueReceive+0x1bc>)
 8002fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	e780      	b.n	8002efe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ffe:	f000 f927 	bl	8003250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003002:	f000 fbdb 	bl	80037bc <xTaskResumeAll>
 8003006:	e77a      	b.n	8002efe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800300a:	f000 f921 	bl	8003250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800300e:	f000 fbd5 	bl	80037bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003014:	f000 f96e 	bl	80032f4 <prvIsQueueEmpty>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	f43f af6f 	beq.w	8002efe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003020:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003022:	4618      	mov	r0, r3
 8003024:	3730      	adds	r7, #48	; 0x30
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	e000ed04 	.word	0xe000ed04

08003030 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	; 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	623b      	str	r3, [r7, #32]
}
 8003058:	bf00      	nop
 800305a:	e7fe      	b.n	800305a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <xQueueReceiveFromISR+0x3a>
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <xQueueReceiveFromISR+0x3e>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <xQueueReceiveFromISR+0x40>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	61fb      	str	r3, [r7, #28]
}
 8003086:	bf00      	nop
 8003088:	e7fe      	b.n	8003088 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800308a:	f001 fa3d 	bl	8004508 <vPortValidateInterruptPriority>
	__asm volatile
 800308e:	f3ef 8211 	mrs	r2, BASEPRI
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	61ba      	str	r2, [r7, #24]
 80030a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80030a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02f      	beq.n	8003116 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c4:	f000 f89e 	bl	8003204 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80030d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d112      	bne.n	8003100 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d016      	beq.n	8003110 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	3310      	adds	r3, #16
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fd3c 	bl	8003b64 <xTaskRemoveFromEventList>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00e      	beq.n	8003110 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e007      	b.n	8003110 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003104:	3301      	adds	r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	b25a      	sxtb	r2, r3
 800310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003110:	2301      	movs	r3, #1
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
 8003114:	e001      	b.n	800311a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003116:	2300      	movs	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f383 8811 	msr	BASEPRI, r3
}
 8003124:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003128:	4618      	mov	r0, r3
 800312a:	3738      	adds	r7, #56	; 0x38
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003144:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d14d      	bne.n	80031f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fedc 	bl	8003f18 <xTaskPriorityDisinherit>
 8003160:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
 8003168:	e043      	b.n	80031f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d119      	bne.n	80031a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6858      	ldr	r0, [r3, #4]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	461a      	mov	r2, r3
 800317a:	68b9      	ldr	r1, [r7, #8]
 800317c:	f001 fc56 	bl	8004a2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d32b      	bcc.n	80031f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	e026      	b.n	80031f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68d8      	ldr	r0, [r3, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	461a      	mov	r2, r3
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	f001 fc3c 	bl	8004a2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	425b      	negs	r3, r3
 80031be:	441a      	add	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d207      	bcs.n	80031e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	425b      	negs	r3, r3
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d105      	bne.n	80031f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031fa:	697b      	ldr	r3, [r7, #20]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	441a      	add	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d303      	bcc.n	8003238 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68d9      	ldr	r1, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	461a      	mov	r2, r3
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	f001 fbf2 	bl	8004a2c <memcpy>
	}
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003258:	f001 f874 	bl	8004344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003264:	e011      	b.n	800328a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b00      	cmp	r3, #0
 800326c:	d012      	beq.n	8003294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3324      	adds	r3, #36	; 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fc76 	bl	8003b64 <xTaskRemoveFromEventList>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800327e:	f000 fd4b 	bl	8003d18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	3b01      	subs	r3, #1
 8003286:	b2db      	uxtb	r3, r3
 8003288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800328a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800328e:	2b00      	cmp	r3, #0
 8003290:	dce9      	bgt.n	8003266 <prvUnlockQueue+0x16>
 8003292:	e000      	b.n	8003296 <prvUnlockQueue+0x46>
					break;
 8003294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	22ff      	movs	r2, #255	; 0xff
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800329e:	f001 f881 	bl	80043a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80032a2:	f001 f84f 	bl	8004344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032ae:	e011      	b.n	80032d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3310      	adds	r3, #16
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fc51 	bl	8003b64 <xTaskRemoveFromEventList>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032c8:	f000 fd26 	bl	8003d18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032cc:	7bbb      	ldrb	r3, [r7, #14]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	dce9      	bgt.n	80032b0 <prvUnlockQueue+0x60>
 80032dc:	e000      	b.n	80032e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032e8:	f001 f85c 	bl	80043a4 <vPortExitCritical>
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032fc:	f001 f822 	bl	8004344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003308:	2301      	movs	r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e001      	b.n	8003312 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003312:	f001 f847 	bl	80043a4 <vPortExitCritical>

	return xReturn;
 8003316:	68fb      	ldr	r3, [r7, #12]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003328:	f001 f80c 	bl	8004344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	429a      	cmp	r2, r3
 8003336:	d102      	bne.n	800333e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003338:	2301      	movs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e001      	b.n	8003342 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003342:	f001 f82f 	bl	80043a4 <vPortExitCritical>

	return xReturn;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	; 0x38
 8003354:	af04      	add	r7, sp, #16
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800335e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	623b      	str	r3, [r7, #32]
}
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xTaskCreateStatic+0x46>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	61fb      	str	r3, [r7, #28]
}
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003396:	2354      	movs	r3, #84	; 0x54
 8003398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b54      	cmp	r3, #84	; 0x54
 800339e:	d00a      	beq.n	80033b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	61bb      	str	r3, [r7, #24]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01e      	beq.n	80033fc <xTaskCreateStatic+0xac>
 80033be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01b      	beq.n	80033fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033d6:	2300      	movs	r3, #0
 80033d8:	9303      	str	r3, [sp, #12]
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f850 	bl	8003494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f6:	f000 f8d5 	bl	80035a4 <prvAddNewTaskToReadyList>
 80033fa:	e001      	b.n	8003400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003400:	697b      	ldr	r3, [r7, #20]
	}
 8003402:	4618      	mov	r0, r3
 8003404:	3728      	adds	r7, #40	; 0x28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800340a:	b580      	push	{r7, lr}
 800340c:	b08c      	sub	sp, #48	; 0x30
 800340e:	af04      	add	r7, sp, #16
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f001 f8b2 	bl	8004588 <pvPortMalloc>
 8003424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800342c:	2054      	movs	r0, #84	; 0x54
 800342e:	f001 f8ab 	bl	8004588 <pvPortMalloc>
 8003432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
 8003440:	e005      	b.n	800344e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003442:	6978      	ldr	r0, [r7, #20]
 8003444:	f001 f96c 	bl	8004720 <vPortFree>
 8003448:	e001      	b.n	800344e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d017      	beq.n	8003484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	2300      	movs	r3, #0
 8003460:	9303      	str	r3, [sp, #12]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	9302      	str	r3, [sp, #8]
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f80e 	bl	8003494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003478:	69f8      	ldr	r0, [r7, #28]
 800347a:	f000 f893 	bl	80035a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800347e:	2301      	movs	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e002      	b.n	800348a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003484:	f04f 33ff 	mov.w	r3, #4294967295
 8003488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800348a:	69bb      	ldr	r3, [r7, #24]
	}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034ac:	3b01      	subs	r3, #1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <prvInitialiseNewTask+0x48>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	617b      	str	r3, [r7, #20]
}
 80034d8:	bf00      	nop
 80034da:	e7fe      	b.n	80034da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01f      	beq.n	8003522 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	e012      	b.n	800350e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	7819      	ldrb	r1, [r3, #0]
 80034f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	4413      	add	r3, r2
 80034f6:	3334      	adds	r3, #52	; 0x34
 80034f8:	460a      	mov	r2, r1
 80034fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	3301      	adds	r3, #1
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2b0f      	cmp	r3, #15
 8003512:	d9e9      	bls.n	80034e8 <prvInitialiseNewTask+0x54>
 8003514:	e000      	b.n	8003518 <prvInitialiseNewTask+0x84>
			{
				break;
 8003516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003520:	e003      	b.n	800352a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800352a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352c:	2b06      	cmp	r3, #6
 800352e:	d901      	bls.n	8003534 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003530:	2306      	movs	r3, #6
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	2200      	movs	r2, #0
 8003544:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	3304      	adds	r3, #4
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f928 	bl	80027a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	3318      	adds	r3, #24
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff f923 	bl	80027a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800355e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	f1c3 0207 	rsb	r2, r3, #7
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	2200      	movs	r2, #0
 8003574:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	69b8      	ldr	r0, [r7, #24]
 8003584:	f000 fdb4 	bl	80040f0 <pxPortInitialiseStack>
 8003588:	4602      	mov	r2, r0
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800359a:	bf00      	nop
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035ac:	f000 feca 	bl	8004344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035b0:	4b2a      	ldr	r3, [pc, #168]	; (800365c <prvAddNewTaskToReadyList+0xb8>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	4a29      	ldr	r2, [pc, #164]	; (800365c <prvAddNewTaskToReadyList+0xb8>)
 80035b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035ba:	4b29      	ldr	r3, [pc, #164]	; (8003660 <prvAddNewTaskToReadyList+0xbc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035c2:	4a27      	ldr	r2, [pc, #156]	; (8003660 <prvAddNewTaskToReadyList+0xbc>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <prvAddNewTaskToReadyList+0xb8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d110      	bne.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80035d0:	f000 fbc6 	bl	8003d60 <prvInitialiseTaskLists>
 80035d4:	e00d      	b.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <prvAddNewTaskToReadyList+0xc0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <prvAddNewTaskToReadyList+0xbc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d802      	bhi.n	80035f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035ec:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <prvAddNewTaskToReadyList+0xbc>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <prvAddNewTaskToReadyList+0xc4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <prvAddNewTaskToReadyList+0xc4>)
 80035fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	2201      	movs	r2, #1
 8003602:	409a      	lsls	r2, r3
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <prvAddNewTaskToReadyList+0xc8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	4a18      	ldr	r2, [pc, #96]	; (800366c <prvAddNewTaskToReadyList+0xc8>)
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4a15      	ldr	r2, [pc, #84]	; (8003670 <prvAddNewTaskToReadyList+0xcc>)
 800361c:	441a      	add	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	4619      	mov	r1, r3
 8003624:	4610      	mov	r0, r2
 8003626:	f7ff f8c8 	bl	80027ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800362a:	f000 febb 	bl	80043a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <prvAddNewTaskToReadyList+0xc0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003636:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <prvAddNewTaskToReadyList+0xbc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	429a      	cmp	r2, r3
 8003642:	d207      	bcs.n	8003654 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <prvAddNewTaskToReadyList+0xd0>)
 8003646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	f3bf 8f4f 	dsb	sy
 8003650:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000444 	.word	0x20000444
 8003660:	20000344 	.word	0x20000344
 8003664:	20000450 	.word	0x20000450
 8003668:	20000460 	.word	0x20000460
 800366c:	2000044c 	.word	0x2000044c
 8003670:	20000348 	.word	0x20000348
 8003674:	e000ed04 	.word	0xe000ed04

08003678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d017      	beq.n	80036ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <vTaskDelay+0x60>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <vTaskDelay+0x30>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60bb      	str	r3, [r7, #8]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80036a8:	f000 f87a 	bl	80037a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80036ac:	2100      	movs	r1, #0
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fcb8 	bl	8004024 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80036b4:	f000 f882 	bl	80037bc <xTaskResumeAll>
 80036b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <vTaskDelay+0x64>)
 80036c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	2000046c 	.word	0x2000046c
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036ee:	463a      	mov	r2, r7
 80036f0:	1d39      	adds	r1, r7, #4
 80036f2:	f107 0308 	add.w	r3, r7, #8
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc ff48 	bl	800058c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	9202      	str	r2, [sp, #8]
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	2300      	movs	r3, #0
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2300      	movs	r3, #0
 800370c:	460a      	mov	r2, r1
 800370e:	491e      	ldr	r1, [pc, #120]	; (8003788 <vTaskStartScheduler+0xa8>)
 8003710:	481e      	ldr	r0, [pc, #120]	; (800378c <vTaskStartScheduler+0xac>)
 8003712:	f7ff fe1d 	bl	8003350 <xTaskCreateStatic>
 8003716:	4603      	mov	r3, r0
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <vTaskStartScheduler+0xb0>)
 800371a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800371c:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <vTaskStartScheduler+0xb0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003724:	2301      	movs	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e001      	b.n	800372e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d116      	bne.n	8003762 <vTaskStartScheduler+0x82>
	__asm volatile
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	613b      	str	r3, [r7, #16]
}
 8003746:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <vTaskStartScheduler+0xb4>)
 800374a:	f04f 32ff 	mov.w	r2, #4294967295
 800374e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <vTaskStartScheduler+0xb8>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <vTaskStartScheduler+0xbc>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800375c:	f000 fd50 	bl	8004200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003760:	e00e      	b.n	8003780 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d10a      	bne.n	8003780 <vTaskStartScheduler+0xa0>
	__asm volatile
 800376a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	60fb      	str	r3, [r7, #12]
}
 800377c:	bf00      	nop
 800377e:	e7fe      	b.n	800377e <vTaskStartScheduler+0x9e>
}
 8003780:	bf00      	nop
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	08005438 	.word	0x08005438
 800378c:	08003d31 	.word	0x08003d31
 8003790:	20000468 	.word	0x20000468
 8003794:	20000464 	.word	0x20000464
 8003798:	20000450 	.word	0x20000450
 800379c:	20000448 	.word	0x20000448

080037a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <vTaskSuspendAll+0x18>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	4a03      	ldr	r2, [pc, #12]	; (80037b8 <vTaskSuspendAll+0x18>)
 80037ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	2000046c 	.word	0x2000046c

080037bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <xTaskResumeAll+0x114>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	603b      	str	r3, [r7, #0]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037e8:	f000 fdac 	bl	8004344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037ec:	4b38      	ldr	r3, [pc, #224]	; (80038d0 <xTaskResumeAll+0x114>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	4a37      	ldr	r2, [pc, #220]	; (80038d0 <xTaskResumeAll+0x114>)
 80037f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f6:	4b36      	ldr	r3, [pc, #216]	; (80038d0 <xTaskResumeAll+0x114>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d161      	bne.n	80038c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037fe:	4b35      	ldr	r3, [pc, #212]	; (80038d4 <xTaskResumeAll+0x118>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d05d      	beq.n	80038c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003806:	e02e      	b.n	8003866 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003808:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <xTaskResumeAll+0x11c>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3318      	adds	r3, #24
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f82d 	bl	8002874 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3304      	adds	r3, #4
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff f828 	bl	8002874 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	2201      	movs	r2, #1
 800382a:	409a      	lsls	r2, r3
 800382c:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <xTaskResumeAll+0x120>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	4a2a      	ldr	r2, [pc, #168]	; (80038dc <xTaskResumeAll+0x120>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <xTaskResumeAll+0x124>)
 8003844:	441a      	add	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3304      	adds	r3, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe ffb4 	bl	80027ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <xTaskResumeAll+0x128>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <xTaskResumeAll+0x12c>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003866:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <xTaskResumeAll+0x11c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1cc      	bne.n	8003808 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003874:	f000 fb12 	bl	8003e9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <xTaskResumeAll+0x130>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003884:	f000 f836 	bl	80038f4 <xTaskIncrementTick>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <xTaskResumeAll+0x12c>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f1      	bne.n	8003884 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <xTaskResumeAll+0x130>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <xTaskResumeAll+0x12c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80038ae:	2301      	movs	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <xTaskResumeAll+0x134>)
 80038b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038c2:	f000 fd6f 	bl	80043a4 <vPortExitCritical>

	return xAlreadyYielded;
 80038c6:	68bb      	ldr	r3, [r7, #8]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	2000046c 	.word	0x2000046c
 80038d4:	20000444 	.word	0x20000444
 80038d8:	20000404 	.word	0x20000404
 80038dc:	2000044c 	.word	0x2000044c
 80038e0:	20000348 	.word	0x20000348
 80038e4:	20000344 	.word	0x20000344
 80038e8:	20000458 	.word	0x20000458
 80038ec:	20000454 	.word	0x20000454
 80038f0:	e000ed04 	.word	0xe000ed04

080038f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fe:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <xTaskIncrementTick+0x144>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 808e 	bne.w	8003a24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003908:	4b4c      	ldr	r3, [pc, #304]	; (8003a3c <xTaskIncrementTick+0x148>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003910:	4a4a      	ldr	r2, [pc, #296]	; (8003a3c <xTaskIncrementTick+0x148>)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d120      	bne.n	800395e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800391c:	4b48      	ldr	r3, [pc, #288]	; (8003a40 <xTaskIncrementTick+0x14c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <xTaskIncrementTick+0x48>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	603b      	str	r3, [r7, #0]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <xTaskIncrementTick+0x46>
 800393c:	4b40      	ldr	r3, [pc, #256]	; (8003a40 <xTaskIncrementTick+0x14c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <xTaskIncrementTick+0x150>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3e      	ldr	r2, [pc, #248]	; (8003a40 <xTaskIncrementTick+0x14c>)
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	4a3e      	ldr	r2, [pc, #248]	; (8003a44 <xTaskIncrementTick+0x150>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <xTaskIncrementTick+0x154>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	4a3c      	ldr	r2, [pc, #240]	; (8003a48 <xTaskIncrementTick+0x154>)
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	f000 fa9f 	bl	8003e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <xTaskIncrementTick+0x158>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d348      	bcc.n	80039fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003968:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <xTaskIncrementTick+0x14c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <xTaskIncrementTick+0x158>)
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	601a      	str	r2, [r3, #0]
					break;
 800397a:	e03e      	b.n	80039fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397c:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <xTaskIncrementTick+0x14c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	429a      	cmp	r2, r3
 8003992:	d203      	bcs.n	800399c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <xTaskIncrementTick+0x158>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800399a:	e02e      	b.n	80039fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	3304      	adds	r3, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe ff67 	bl	8002874 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3318      	adds	r3, #24
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe ff5e 	bl	8002874 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	2201      	movs	r2, #1
 80039be:	409a      	lsls	r2, r3
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <xTaskIncrementTick+0x15c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <xTaskIncrementTick+0x15c>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <xTaskIncrementTick+0x160>)
 80039d8:	441a      	add	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f7fe feea 	bl	80027ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ea:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <xTaskIncrementTick+0x164>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d3b9      	bcc.n	8003968 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039f8:	e7b6      	b.n	8003968 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <xTaskIncrementTick+0x164>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	4914      	ldr	r1, [pc, #80]	; (8003a54 <xTaskIncrementTick+0x160>)
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d901      	bls.n	8003a16 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003a12:	2301      	movs	r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <xTaskIncrementTick+0x168>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e004      	b.n	8003a2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <xTaskIncrementTick+0x16c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	4a0d      	ldr	r2, [pc, #52]	; (8003a60 <xTaskIncrementTick+0x16c>)
 8003a2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a2e:	697b      	ldr	r3, [r7, #20]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	2000046c 	.word	0x2000046c
 8003a3c:	20000448 	.word	0x20000448
 8003a40:	200003fc 	.word	0x200003fc
 8003a44:	20000400 	.word	0x20000400
 8003a48:	2000045c 	.word	0x2000045c
 8003a4c:	20000464 	.word	0x20000464
 8003a50:	2000044c 	.word	0x2000044c
 8003a54:	20000348 	.word	0x20000348
 8003a58:	20000344 	.word	0x20000344
 8003a5c:	20000458 	.word	0x20000458
 8003a60:	20000454 	.word	0x20000454

08003a64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a6a:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <vTaskSwitchContext+0xa4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <vTaskSwitchContext+0xa8>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a78:	e03f      	b.n	8003afa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <vTaskSwitchContext+0xa8>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a80:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <vTaskSwitchContext+0xac>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	f1c3 031f 	rsb	r3, r3, #31
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	491f      	ldr	r1, [pc, #124]	; (8003b14 <vTaskSwitchContext+0xb0>)
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	607b      	str	r3, [r7, #4]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <vTaskSwitchContext+0x5a>
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4a12      	ldr	r2, [pc, #72]	; (8003b14 <vTaskSwitchContext+0xb0>)
 8003acc:	4413      	add	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d104      	bne.n	8003af0 <vTaskSwitchContext+0x8c>
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <vTaskSwitchContext+0xb4>)
 8003af8:	6013      	str	r3, [r2, #0]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	2000046c 	.word	0x2000046c
 8003b0c:	20000458 	.word	0x20000458
 8003b10:	2000044c 	.word	0x2000044c
 8003b14:	20000348 	.word	0x20000348
 8003b18:	20000344 	.word	0x20000344

08003b1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	60fb      	str	r3, [r7, #12]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <vTaskPlaceOnEventList+0x44>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3318      	adds	r3, #24
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7fe fe59 	bl	8002802 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b50:	2101      	movs	r1, #1
 8003b52:	6838      	ldr	r0, [r7, #0]
 8003b54:	f000 fa66 	bl	8004024 <prvAddCurrentTaskToDelayedList>
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000344 	.word	0x20000344

08003b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	60fb      	str	r3, [r7, #12]
}
 8003b8c:	bf00      	nop
 8003b8e:	e7fe      	b.n	8003b8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	3318      	adds	r3, #24
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fe fe6d 	bl	8002874 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9a:	4b1d      	ldr	r3, [pc, #116]	; (8003c10 <xTaskRemoveFromEventList+0xac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d11c      	bne.n	8003bdc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fe64 	bl	8002874 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <xTaskRemoveFromEventList+0xb0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <xTaskRemoveFromEventList+0xb0>)
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <xTaskRemoveFromEventList+0xb4>)
 8003bcc:	441a      	add	r2, r3
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7fe fdf0 	bl	80027ba <vListInsertEnd>
 8003bda:	e005      	b.n	8003be8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	3318      	adds	r3, #24
 8003be0:	4619      	mov	r1, r3
 8003be2:	480e      	ldr	r0, [pc, #56]	; (8003c1c <xTaskRemoveFromEventList+0xb8>)
 8003be4:	f7fe fde9 	bl	80027ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <xTaskRemoveFromEventList+0xbc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d905      	bls.n	8003c02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <xTaskRemoveFromEventList+0xc0>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	e001      	b.n	8003c06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c06:	697b      	ldr	r3, [r7, #20]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	2000046c 	.word	0x2000046c
 8003c14:	2000044c 	.word	0x2000044c
 8003c18:	20000348 	.word	0x20000348
 8003c1c:	20000404 	.word	0x20000404
 8003c20:	20000344 	.word	0x20000344
 8003c24:	20000458 	.word	0x20000458

08003c28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <vTaskInternalSetTimeOutState+0x24>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <vTaskInternalSetTimeOutState+0x28>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	605a      	str	r2, [r3, #4]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	2000045c 	.word	0x2000045c
 8003c50:	20000448 	.word	0x20000448

08003c54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	613b      	str	r3, [r7, #16]
}
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10a      	bne.n	8003c96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c96:	f000 fb55 	bl	8004344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <xTaskCheckForTimeOut+0xbc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d102      	bne.n	8003cba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	e023      	b.n	8003d02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <xTaskCheckForTimeOut+0xc0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d007      	beq.n	8003cd6 <xTaskCheckForTimeOut+0x82>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d302      	bcc.n	8003cd6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	e015      	b.n	8003d02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d20b      	bcs.n	8003cf8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	1ad2      	subs	r2, r2, r3
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff9b 	bl	8003c28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e004      	b.n	8003d02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d02:	f000 fb4f 	bl	80043a4 <vPortExitCritical>

	return xReturn;
 8003d06:	69fb      	ldr	r3, [r7, #28]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000448 	.word	0x20000448
 8003d14:	2000045c 	.word	0x2000045c

08003d18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <vTaskMissedYield+0x14>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000458 	.word	0x20000458

08003d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d38:	f000 f852 	bl	8003de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d3c:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <prvIdleTask+0x28>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d9f9      	bls.n	8003d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d44:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <prvIdleTask+0x2c>)
 8003d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d54:	e7f0      	b.n	8003d38 <prvIdleTask+0x8>
 8003d56:	bf00      	nop
 8003d58:	20000348 	.word	0x20000348
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	e00c      	b.n	8003d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <prvInitialiseTaskLists+0x60>)
 8003d78:	4413      	add	r3, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fcf0 	bl	8002760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3301      	adds	r3, #1
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b06      	cmp	r3, #6
 8003d8a:	d9ef      	bls.n	8003d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <prvInitialiseTaskLists+0x64>)
 8003d8e:	f7fe fce7 	bl	8002760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d92:	480d      	ldr	r0, [pc, #52]	; (8003dc8 <prvInitialiseTaskLists+0x68>)
 8003d94:	f7fe fce4 	bl	8002760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d98:	480c      	ldr	r0, [pc, #48]	; (8003dcc <prvInitialiseTaskLists+0x6c>)
 8003d9a:	f7fe fce1 	bl	8002760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d9e:	480c      	ldr	r0, [pc, #48]	; (8003dd0 <prvInitialiseTaskLists+0x70>)
 8003da0:	f7fe fcde 	bl	8002760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003da4:	480b      	ldr	r0, [pc, #44]	; (8003dd4 <prvInitialiseTaskLists+0x74>)
 8003da6:	f7fe fcdb 	bl	8002760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <prvInitialiseTaskLists+0x78>)
 8003dac:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <prvInitialiseTaskLists+0x64>)
 8003dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <prvInitialiseTaskLists+0x7c>)
 8003db2:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <prvInitialiseTaskLists+0x68>)
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000348 	.word	0x20000348
 8003dc4:	200003d4 	.word	0x200003d4
 8003dc8:	200003e8 	.word	0x200003e8
 8003dcc:	20000404 	.word	0x20000404
 8003dd0:	20000418 	.word	0x20000418
 8003dd4:	20000430 	.word	0x20000430
 8003dd8:	200003fc 	.word	0x200003fc
 8003ddc:	20000400 	.word	0x20000400

08003de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003de6:	e019      	b.n	8003e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003de8:	f000 faac 	bl	8004344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dec:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <prvCheckTasksWaitingTermination+0x50>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3304      	adds	r3, #4
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fd3b 	bl	8002874 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <prvCheckTasksWaitingTermination+0x54>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <prvCheckTasksWaitingTermination+0x54>)
 8003e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <prvCheckTasksWaitingTermination+0x58>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <prvCheckTasksWaitingTermination+0x58>)
 8003e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e12:	f000 fac7 	bl	80043a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f810 	bl	8003e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <prvCheckTasksWaitingTermination+0x58>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e1      	bne.n	8003de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000418 	.word	0x20000418
 8003e34:	20000444 	.word	0x20000444
 8003e38:	2000042c 	.word	0x2000042c

08003e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d108      	bne.n	8003e60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fc64 	bl	8004720 <vPortFree>
				vPortFree( pxTCB );
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fc61 	bl	8004720 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e5e:	e018      	b.n	8003e92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d103      	bne.n	8003e72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fc58 	bl	8004720 <vPortFree>
	}
 8003e70:	e00f      	b.n	8003e92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d00a      	beq.n	8003e92 <prvDeleteTCB+0x56>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	e7fe      	b.n	8003e90 <prvDeleteTCB+0x54>
	}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <prvResetNextTaskUnblockTime+0x38>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8003eae:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eb4:	e008      	b.n	8003ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <prvResetNextTaskUnblockTime+0x38>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	200003fc 	.word	0x200003fc
 8003ed8:	20000464 	.word	0x20000464

08003edc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <xTaskGetSchedulerState+0x34>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d102      	bne.n	8003ef0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eea:	2301      	movs	r3, #1
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	e008      	b.n	8003f02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ef0:	4b08      	ldr	r3, [pc, #32]	; (8003f14 <xTaskGetSchedulerState+0x38>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ef8:	2302      	movs	r3, #2
 8003efa:	607b      	str	r3, [r7, #4]
 8003efc:	e001      	b.n	8003f02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f02:	687b      	ldr	r3, [r7, #4]
	}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	20000450 	.word	0x20000450
 8003f14:	2000046c 	.word	0x2000046c

08003f18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d06e      	beq.n	800400c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f2e:	4b3a      	ldr	r3, [pc, #232]	; (8004018 <xTaskPriorityDisinherit+0x100>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d00a      	beq.n	8003f4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	60bb      	str	r3, [r7, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f70:	1e5a      	subs	r2, r3, #1
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d044      	beq.n	800400c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d140      	bne.n	800400c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fc70 	bl	8002874 <uxListRemove>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d115      	bne.n	8003fc6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	491f      	ldr	r1, [pc, #124]	; (800401c <xTaskPriorityDisinherit+0x104>)
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <xTaskPriorityDisinherit+0xae>
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	4b18      	ldr	r3, [pc, #96]	; (8004020 <xTaskPriorityDisinherit+0x108>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	4a17      	ldr	r2, [pc, #92]	; (8004020 <xTaskPriorityDisinherit+0x108>)
 8003fc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	f1c3 0207 	rsb	r2, r3, #7
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	2201      	movs	r2, #1
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <xTaskPriorityDisinherit+0x108>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <xTaskPriorityDisinherit+0x108>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4a08      	ldr	r2, [pc, #32]	; (800401c <xTaskPriorityDisinherit+0x104>)
 8003ffa:	441a      	add	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fe fbd9 	bl	80027ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800400c:	697b      	ldr	r3, [r7, #20]
	}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000344 	.word	0x20000344
 800401c:	20000348 	.word	0x20000348
 8004020:	2000044c 	.word	0x2000044c

08004024 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800402e:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004034:	4b28      	ldr	r3, [pc, #160]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fc1a 	bl	8002874 <uxListRemove>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	2201      	movs	r2, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4013      	ands	r3, r2
 800405a:	4a20      	ldr	r2, [pc, #128]	; (80040dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800405c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d10a      	bne.n	800407c <prvAddCurrentTaskToDelayedList+0x58>
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3304      	adds	r3, #4
 8004072:	4619      	mov	r1, r3
 8004074:	481a      	ldr	r0, [pc, #104]	; (80040e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004076:	f7fe fba0 	bl	80027ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800407a:	e026      	b.n	80040ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	429a      	cmp	r2, r3
 8004092:	d209      	bcs.n	80040a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f7fe fbae 	bl	8002802 <vListInsert>
}
 80040a6:	e010      	b.n	80040ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040a8:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7fe fba4 	bl	8002802 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040ba:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d202      	bcs.n	80040ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6013      	str	r3, [r2, #0]
}
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000448 	.word	0x20000448
 80040d8:	20000344 	.word	0x20000344
 80040dc:	2000044c 	.word	0x2000044c
 80040e0:	20000430 	.word	0x20000430
 80040e4:	20000400 	.word	0x20000400
 80040e8:	200003fc 	.word	0x200003fc
 80040ec:	20000464 	.word	0x20000464

080040f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3b04      	subs	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b04      	subs	r3, #4
 800410e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f023 0201 	bic.w	r2, r3, #1
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	3b04      	subs	r3, #4
 800411e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004120:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <pxPortInitialiseStack+0x64>)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3b14      	subs	r3, #20
 800412a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3b04      	subs	r3, #4
 8004136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f06f 0202 	mvn.w	r2, #2
 800413e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b20      	subs	r3, #32
 8004144:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004146:	68fb      	ldr	r3, [r7, #12]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	08004159 	.word	0x08004159

08004158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <prvTaskExitError+0x54>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d00a      	beq.n	8004182 <prvTaskExitError+0x2a>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	60fb      	str	r3, [r7, #12]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <prvTaskExitError+0x28>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60bb      	str	r3, [r7, #8]
}
 8004194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004196:	bf00      	nop
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0fc      	beq.n	8004198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	2000000c 	.word	0x2000000c

080041b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80041b0:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <pxCurrentTCBConst2>)
 80041b2:	6819      	ldr	r1, [r3, #0]
 80041b4:	6808      	ldr	r0, [r1, #0]
 80041b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	f380 8809 	msr	PSP, r0
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	4770      	bx	lr
 80041cc:	f3af 8000 	nop.w

080041d0 <pxCurrentTCBConst2>:
 80041d0:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop

080041d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80041d8:	4808      	ldr	r0, [pc, #32]	; (80041fc <prvPortStartFirstTask+0x24>)
 80041da:	6800      	ldr	r0, [r0, #0]
 80041dc:	6800      	ldr	r0, [r0, #0]
 80041de:	f380 8808 	msr	MSP, r0
 80041e2:	f04f 0000 	mov.w	r0, #0
 80041e6:	f380 8814 	msr	CONTROL, r0
 80041ea:	b662      	cpsie	i
 80041ec:	b661      	cpsie	f
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	df00      	svc	0
 80041f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80041fa:	bf00      	nop
 80041fc:	e000ed08 	.word	0xe000ed08

08004200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004206:	4b46      	ldr	r3, [pc, #280]	; (8004320 <xPortStartScheduler+0x120>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a46      	ldr	r2, [pc, #280]	; (8004324 <xPortStartScheduler+0x124>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d10a      	bne.n	8004226 <xPortStartScheduler+0x26>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	613b      	str	r3, [r7, #16]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004226:	4b3e      	ldr	r3, [pc, #248]	; (8004320 <xPortStartScheduler+0x120>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a3f      	ldr	r2, [pc, #252]	; (8004328 <xPortStartScheduler+0x128>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d10a      	bne.n	8004246 <xPortStartScheduler+0x46>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	e7fe      	b.n	8004244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004246:	4b39      	ldr	r3, [pc, #228]	; (800432c <xPortStartScheduler+0x12c>)
 8004248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b31      	ldr	r3, [pc, #196]	; (8004330 <xPortStartScheduler+0x130>)
 800426c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800426e:	4b31      	ldr	r3, [pc, #196]	; (8004334 <xPortStartScheduler+0x134>)
 8004270:	2207      	movs	r2, #7
 8004272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004274:	e009      	b.n	800428a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004276:	4b2f      	ldr	r3, [pc, #188]	; (8004334 <xPortStartScheduler+0x134>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3b01      	subs	r3, #1
 800427c:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <xPortStartScheduler+0x134>)
 800427e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d0ef      	beq.n	8004276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004296:	4b27      	ldr	r3, [pc, #156]	; (8004334 <xPortStartScheduler+0x134>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1c3 0307 	rsb	r3, r3, #7
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d00a      	beq.n	80042b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60bb      	str	r3, [r7, #8]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042b8:	4b1e      	ldr	r3, [pc, #120]	; (8004334 <xPortStartScheduler+0x134>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <xPortStartScheduler+0x134>)
 80042c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <xPortStartScheduler+0x134>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042ca:	4a1a      	ldr	r2, [pc, #104]	; (8004334 <xPortStartScheduler+0x134>)
 80042cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80042d6:	4b18      	ldr	r3, [pc, #96]	; (8004338 <xPortStartScheduler+0x138>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <xPortStartScheduler+0x138>)
 80042dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80042e2:	4b15      	ldr	r3, [pc, #84]	; (8004338 <xPortStartScheduler+0x138>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a14      	ldr	r2, [pc, #80]	; (8004338 <xPortStartScheduler+0x138>)
 80042e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80042ee:	f000 f8dd 	bl	80044ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80042f2:	4b12      	ldr	r3, [pc, #72]	; (800433c <xPortStartScheduler+0x13c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80042f8:	f000 f8fc 	bl	80044f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042fc:	4b10      	ldr	r3, [pc, #64]	; (8004340 <xPortStartScheduler+0x140>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0f      	ldr	r2, [pc, #60]	; (8004340 <xPortStartScheduler+0x140>)
 8004302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004308:	f7ff ff66 	bl	80041d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800430c:	f7ff fbaa 	bl	8003a64 <vTaskSwitchContext>
	prvTaskExitError();
 8004310:	f7ff ff22 	bl	8004158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	e000ed00 	.word	0xe000ed00
 8004324:	410fc271 	.word	0x410fc271
 8004328:	410fc270 	.word	0x410fc270
 800432c:	e000e400 	.word	0xe000e400
 8004330:	20000470 	.word	0x20000470
 8004334:	20000474 	.word	0x20000474
 8004338:	e000ed20 	.word	0xe000ed20
 800433c:	2000000c 	.word	0x2000000c
 8004340:	e000ef34 	.word	0xe000ef34

08004344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	607b      	str	r3, [r7, #4]
}
 800435c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <vPortEnterCritical+0x58>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	4a0d      	ldr	r2, [pc, #52]	; (800439c <vPortEnterCritical+0x58>)
 8004366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004368:	4b0c      	ldr	r3, [pc, #48]	; (800439c <vPortEnterCritical+0x58>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10f      	bne.n	8004390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <vPortEnterCritical+0x5c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <vPortEnterCritical+0x4c>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	603b      	str	r3, [r7, #0]
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <vPortEnterCritical+0x4a>
	}
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	2000000c 	.word	0x2000000c
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <vPortExitCritical+0x50>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <vPortExitCritical+0x24>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	607b      	str	r3, [r7, #4]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <vPortExitCritical+0x50>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <vPortExitCritical+0x50>)
 80043d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <vPortExitCritical+0x50>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <vPortExitCritical+0x42>
 80043da:	2300      	movs	r3, #0
 80043dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f383 8811 	msr	BASEPRI, r3
}
 80043e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	2000000c 	.word	0x2000000c
	...

08004400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004400:	f3ef 8009 	mrs	r0, PSP
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	4b15      	ldr	r3, [pc, #84]	; (8004460 <pxCurrentTCBConst>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	f01e 0f10 	tst.w	lr, #16
 8004410:	bf08      	it	eq
 8004412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	6010      	str	r0, [r2, #0]
 800441c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004424:	f380 8811 	msr	BASEPRI, r0
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f7ff fb18 	bl	8003a64 <vTaskSwitchContext>
 8004434:	f04f 0000 	mov.w	r0, #0
 8004438:	f380 8811 	msr	BASEPRI, r0
 800443c:	bc09      	pop	{r0, r3}
 800443e:	6819      	ldr	r1, [r3, #0]
 8004440:	6808      	ldr	r0, [r1, #0]
 8004442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004446:	f01e 0f10 	tst.w	lr, #16
 800444a:	bf08      	it	eq
 800444c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004450:	f380 8809 	msr	PSP, r0
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w

08004460 <pxCurrentTCBConst>:
 8004460:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop

08004468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
}
 8004480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004482:	f7ff fa37 	bl	80038f4 <xTaskIncrementTick>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <xPortSysTickHandler+0x40>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	2300      	movs	r3, #0
 8004496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	f383 8811 	msr	BASEPRI, r3
}
 800449e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	e000ed04 	.word	0xe000ed04

080044ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044b6:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <vPortSetupTimerInterrupt+0x38>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044bc:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <vPortSetupTimerInterrupt+0x3c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <vPortSetupTimerInterrupt+0x40>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <vPortSetupTimerInterrupt+0x44>)
 80044ca:	3b01      	subs	r3, #1
 80044cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044ce:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <vPortSetupTimerInterrupt+0x34>)
 80044d0:	2207      	movs	r2, #7
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	e000e010 	.word	0xe000e010
 80044e4:	e000e018 	.word	0xe000e018
 80044e8:	20000000 	.word	0x20000000
 80044ec:	10624dd3 	.word	0x10624dd3
 80044f0:	e000e014 	.word	0xe000e014

080044f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80044f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004504 <vPortEnableVFP+0x10>
 80044f8:	6801      	ldr	r1, [r0, #0]
 80044fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044fe:	6001      	str	r1, [r0, #0]
 8004500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004502:	bf00      	nop
 8004504:	e000ed88 	.word	0xe000ed88

08004508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800450e:	f3ef 8305 	mrs	r3, IPSR
 8004512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	d914      	bls.n	8004544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800451a:	4a17      	ldr	r2, [pc, #92]	; (8004578 <vPortValidateInterruptPriority+0x70>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004524:	4b15      	ldr	r3, [pc, #84]	; (800457c <vPortValidateInterruptPriority+0x74>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	7afa      	ldrb	r2, [r7, #11]
 800452a:	429a      	cmp	r2, r3
 800452c:	d20a      	bcs.n	8004544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	607b      	str	r3, [r7, #4]
}
 8004540:	bf00      	nop
 8004542:	e7fe      	b.n	8004542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <vPortValidateInterruptPriority+0x78>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <vPortValidateInterruptPriority+0x7c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d90a      	bls.n	800456a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	603b      	str	r3, [r7, #0]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <vPortValidateInterruptPriority+0x60>
	}
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000e3f0 	.word	0xe000e3f0
 800457c:	20000470 	.word	0x20000470
 8004580:	e000ed0c 	.word	0xe000ed0c
 8004584:	20000474 	.word	0x20000474

08004588 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004594:	f7ff f904 	bl	80037a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004598:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <pvPortMalloc+0x180>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80045a0:	f000 f920 	bl	80047e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045a4:	4b59      	ldr	r3, [pc, #356]	; (800470c <pvPortMalloc+0x184>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 8093 	bne.w	80046d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01d      	beq.n	80045f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80045b8:	2208      	movs	r2, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d014      	beq.n	80045f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f023 0307 	bic.w	r3, r3, #7
 80045d0:	3308      	adds	r3, #8
 80045d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <pvPortMalloc+0x6c>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	617b      	str	r3, [r7, #20]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d06e      	beq.n	80046d8 <pvPortMalloc+0x150>
 80045fa:	4b45      	ldr	r3, [pc, #276]	; (8004710 <pvPortMalloc+0x188>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d869      	bhi.n	80046d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004604:	4b43      	ldr	r3, [pc, #268]	; (8004714 <pvPortMalloc+0x18c>)
 8004606:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004608:	4b42      	ldr	r3, [pc, #264]	; (8004714 <pvPortMalloc+0x18c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800460e:	e004      	b.n	800461a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d903      	bls.n	800462c <pvPortMalloc+0xa4>
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f1      	bne.n	8004610 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800462c:	4b36      	ldr	r3, [pc, #216]	; (8004708 <pvPortMalloc+0x180>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	429a      	cmp	r2, r3
 8004634:	d050      	beq.n	80046d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2208      	movs	r2, #8
 800463c:	4413      	add	r3, r2
 800463e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	2308      	movs	r3, #8
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	429a      	cmp	r2, r3
 8004656:	d91f      	bls.n	8004698 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <pvPortMalloc+0xf8>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	613b      	str	r3, [r7, #16]
}
 800467c:	bf00      	nop
 800467e:	e7fe      	b.n	800467e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004692:	69b8      	ldr	r0, [r7, #24]
 8004694:	f000 f908 	bl	80048a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <pvPortMalloc+0x188>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	4a1b      	ldr	r2, [pc, #108]	; (8004710 <pvPortMalloc+0x188>)
 80046a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046a6:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <pvPortMalloc+0x188>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <pvPortMalloc+0x190>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d203      	bcs.n	80046ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046b2:	4b17      	ldr	r3, [pc, #92]	; (8004710 <pvPortMalloc+0x188>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a18      	ldr	r2, [pc, #96]	; (8004718 <pvPortMalloc+0x190>)
 80046b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80046ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <pvPortMalloc+0x184>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80046ce:	4b13      	ldr	r3, [pc, #76]	; (800471c <pvPortMalloc+0x194>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3301      	adds	r3, #1
 80046d4:	4a11      	ldr	r2, [pc, #68]	; (800471c <pvPortMalloc+0x194>)
 80046d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80046d8:	f7ff f870 	bl	80037bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <pvPortMalloc+0x174>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60fb      	str	r3, [r7, #12]
}
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <pvPortMalloc+0x172>
	return pvReturn;
 80046fc:	69fb      	ldr	r3, [r7, #28]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20004080 	.word	0x20004080
 800470c:	20004094 	.word	0x20004094
 8004710:	20004084 	.word	0x20004084
 8004714:	20004078 	.word	0x20004078
 8004718:	20004088 	.word	0x20004088
 800471c:	2000408c 	.word	0x2000408c

08004720 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d04d      	beq.n	80047ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004732:	2308      	movs	r3, #8
 8004734:	425b      	negs	r3, r3
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <vPortFree+0xb8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10a      	bne.n	8004764 <vPortFree+0x44>
	__asm volatile
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	60fb      	str	r3, [r7, #12]
}
 8004760:	bf00      	nop
 8004762:	e7fe      	b.n	8004762 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <vPortFree+0x62>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60bb      	str	r3, [r7, #8]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <vPortFree+0xb8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01e      	beq.n	80047ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11a      	bne.n	80047ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <vPortFree+0xb8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80047a8:	f7fe fffa 	bl	80037a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <vPortFree+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4413      	add	r3, r2
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <vPortFree+0xbc>)
 80047b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80047ba:	6938      	ldr	r0, [r7, #16]
 80047bc:	f000 f874 	bl	80048a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <vPortFree+0xc0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	4a06      	ldr	r2, [pc, #24]	; (80047e0 <vPortFree+0xc0>)
 80047c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80047ca:	f7fe fff7 	bl	80037bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80047ce:	bf00      	nop
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20004094 	.word	0x20004094
 80047dc:	20004084 	.word	0x20004084
 80047e0:	20004090 	.word	0x20004090

080047e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80047ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80047f0:	4b27      	ldr	r3, [pc, #156]	; (8004890 <prvHeapInit+0xac>)
 80047f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00c      	beq.n	8004818 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3307      	adds	r3, #7
 8004802:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0307 	bic.w	r3, r3, #7
 800480a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	4a1f      	ldr	r2, [pc, #124]	; (8004890 <prvHeapInit+0xac>)
 8004814:	4413      	add	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800481c:	4a1d      	ldr	r2, [pc, #116]	; (8004894 <prvHeapInit+0xb0>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <prvHeapInit+0xb0>)
 8004824:	2200      	movs	r2, #0
 8004826:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	4413      	add	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004830:	2208      	movs	r2, #8
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0307 	bic.w	r3, r3, #7
 800483e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <prvHeapInit+0xb4>)
 8004844:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004846:	4b14      	ldr	r3, [pc, #80]	; (8004898 <prvHeapInit+0xb4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2200      	movs	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <prvHeapInit+0xb4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	1ad2      	subs	r2, r2, r3
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <prvHeapInit+0xb4>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <prvHeapInit+0xb8>)
 8004872:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <prvHeapInit+0xbc>)
 800487a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800487c:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <prvHeapInit+0xc0>)
 800487e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	20000478 	.word	0x20000478
 8004894:	20004078 	.word	0x20004078
 8004898:	20004080 	.word	0x20004080
 800489c:	20004088 	.word	0x20004088
 80048a0:	20004084 	.word	0x20004084
 80048a4:	20004094 	.word	0x20004094

080048a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048b0:	4b28      	ldr	r3, [pc, #160]	; (8004954 <prvInsertBlockIntoFreeList+0xac>)
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e002      	b.n	80048bc <prvInsertBlockIntoFreeList+0x14>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d8f7      	bhi.n	80048b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4413      	add	r3, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d108      	bne.n	80048ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	441a      	add	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	441a      	add	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d118      	bne.n	8004930 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <prvInsertBlockIntoFreeList+0xb0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d00d      	beq.n	8004926 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	e008      	b.n	8004938 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <prvInsertBlockIntoFreeList+0xb0>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e003      	b.n	8004938 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d002      	beq.n	8004946 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20004078 	.word	0x20004078
 8004958:	20004080 	.word	0x20004080

0800495c <sniprintf>:
 800495c:	b40c      	push	{r2, r3}
 800495e:	b530      	push	{r4, r5, lr}
 8004960:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <sniprintf+0x64>)
 8004962:	1e0c      	subs	r4, r1, #0
 8004964:	681d      	ldr	r5, [r3, #0]
 8004966:	b09d      	sub	sp, #116	; 0x74
 8004968:	da08      	bge.n	800497c <sniprintf+0x20>
 800496a:	238b      	movs	r3, #139	; 0x8b
 800496c:	602b      	str	r3, [r5, #0]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295
 8004972:	b01d      	add	sp, #116	; 0x74
 8004974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004978:	b002      	add	sp, #8
 800497a:	4770      	bx	lr
 800497c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004980:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004984:	bf14      	ite	ne
 8004986:	f104 33ff 	addne.w	r3, r4, #4294967295
 800498a:	4623      	moveq	r3, r4
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9006      	str	r0, [sp, #24]
 8004998:	f8ad 3016 	strh.w	r3, [sp, #22]
 800499c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800499e:	ab21      	add	r3, sp, #132	; 0x84
 80049a0:	a902      	add	r1, sp, #8
 80049a2:	4628      	mov	r0, r5
 80049a4:	9301      	str	r3, [sp, #4]
 80049a6:	f000 f9a1 	bl	8004cec <_svfiprintf_r>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	bfbc      	itt	lt
 80049ae:	238b      	movlt	r3, #139	; 0x8b
 80049b0:	602b      	strlt	r3, [r5, #0]
 80049b2:	2c00      	cmp	r4, #0
 80049b4:	d0dd      	beq.n	8004972 <sniprintf+0x16>
 80049b6:	9b02      	ldr	r3, [sp, #8]
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e7d9      	b.n	8004972 <sniprintf+0x16>
 80049be:	bf00      	nop
 80049c0:	2000005c 	.word	0x2000005c

080049c4 <memset>:
 80049c4:	4402      	add	r2, r0
 80049c6:	4603      	mov	r3, r0
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d100      	bne.n	80049ce <memset+0xa>
 80049cc:	4770      	bx	lr
 80049ce:	f803 1b01 	strb.w	r1, [r3], #1
 80049d2:	e7f9      	b.n	80049c8 <memset+0x4>

080049d4 <__errno>:
 80049d4:	4b01      	ldr	r3, [pc, #4]	; (80049dc <__errno+0x8>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000005c 	.word	0x2000005c

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	4d0d      	ldr	r5, [pc, #52]	; (8004a18 <__libc_init_array+0x38>)
 80049e4:	4c0d      	ldr	r4, [pc, #52]	; (8004a1c <__libc_init_array+0x3c>)
 80049e6:	1b64      	subs	r4, r4, r5
 80049e8:	10a4      	asrs	r4, r4, #2
 80049ea:	2600      	movs	r6, #0
 80049ec:	42a6      	cmp	r6, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	4d0b      	ldr	r5, [pc, #44]	; (8004a20 <__libc_init_array+0x40>)
 80049f2:	4c0c      	ldr	r4, [pc, #48]	; (8004a24 <__libc_init_array+0x44>)
 80049f4:	f000 fc6a 	bl	80052cc <_init>
 80049f8:	1b64      	subs	r4, r4, r5
 80049fa:	10a4      	asrs	r4, r4, #2
 80049fc:	2600      	movs	r6, #0
 80049fe:	42a6      	cmp	r6, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a08:	4798      	blx	r3
 8004a0a:	3601      	adds	r6, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a12:	4798      	blx	r3
 8004a14:	3601      	adds	r6, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	08005494 	.word	0x08005494
 8004a1c:	08005494 	.word	0x08005494
 8004a20:	08005494 	.word	0x08005494
 8004a24:	08005498 	.word	0x08005498

08004a28 <__retarget_lock_acquire_recursive>:
 8004a28:	4770      	bx	lr

08004a2a <__retarget_lock_release_recursive>:
 8004a2a:	4770      	bx	lr

08004a2c <memcpy>:
 8004a2c:	440a      	add	r2, r1
 8004a2e:	4291      	cmp	r1, r2
 8004a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a34:	d100      	bne.n	8004a38 <memcpy+0xc>
 8004a36:	4770      	bx	lr
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a42:	4291      	cmp	r1, r2
 8004a44:	d1f9      	bne.n	8004a3a <memcpy+0xe>
 8004a46:	bd10      	pop	{r4, pc}

08004a48 <_free_r>:
 8004a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a4a:	2900      	cmp	r1, #0
 8004a4c:	d044      	beq.n	8004ad8 <_free_r+0x90>
 8004a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a52:	9001      	str	r0, [sp, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f1a1 0404 	sub.w	r4, r1, #4
 8004a5a:	bfb8      	it	lt
 8004a5c:	18e4      	addlt	r4, r4, r3
 8004a5e:	f000 f8df 	bl	8004c20 <__malloc_lock>
 8004a62:	4a1e      	ldr	r2, [pc, #120]	; (8004adc <_free_r+0x94>)
 8004a64:	9801      	ldr	r0, [sp, #4]
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	b933      	cbnz	r3, 8004a78 <_free_r+0x30>
 8004a6a:	6063      	str	r3, [r4, #4]
 8004a6c:	6014      	str	r4, [r2, #0]
 8004a6e:	b003      	add	sp, #12
 8004a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a74:	f000 b8da 	b.w	8004c2c <__malloc_unlock>
 8004a78:	42a3      	cmp	r3, r4
 8004a7a:	d908      	bls.n	8004a8e <_free_r+0x46>
 8004a7c:	6825      	ldr	r5, [r4, #0]
 8004a7e:	1961      	adds	r1, r4, r5
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf01      	itttt	eq
 8004a84:	6819      	ldreq	r1, [r3, #0]
 8004a86:	685b      	ldreq	r3, [r3, #4]
 8004a88:	1949      	addeq	r1, r1, r5
 8004a8a:	6021      	streq	r1, [r4, #0]
 8004a8c:	e7ed      	b.n	8004a6a <_free_r+0x22>
 8004a8e:	461a      	mov	r2, r3
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	b10b      	cbz	r3, 8004a98 <_free_r+0x50>
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d9fa      	bls.n	8004a8e <_free_r+0x46>
 8004a98:	6811      	ldr	r1, [r2, #0]
 8004a9a:	1855      	adds	r5, r2, r1
 8004a9c:	42a5      	cmp	r5, r4
 8004a9e:	d10b      	bne.n	8004ab8 <_free_r+0x70>
 8004aa0:	6824      	ldr	r4, [r4, #0]
 8004aa2:	4421      	add	r1, r4
 8004aa4:	1854      	adds	r4, r2, r1
 8004aa6:	42a3      	cmp	r3, r4
 8004aa8:	6011      	str	r1, [r2, #0]
 8004aaa:	d1e0      	bne.n	8004a6e <_free_r+0x26>
 8004aac:	681c      	ldr	r4, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	6053      	str	r3, [r2, #4]
 8004ab2:	440c      	add	r4, r1
 8004ab4:	6014      	str	r4, [r2, #0]
 8004ab6:	e7da      	b.n	8004a6e <_free_r+0x26>
 8004ab8:	d902      	bls.n	8004ac0 <_free_r+0x78>
 8004aba:	230c      	movs	r3, #12
 8004abc:	6003      	str	r3, [r0, #0]
 8004abe:	e7d6      	b.n	8004a6e <_free_r+0x26>
 8004ac0:	6825      	ldr	r5, [r4, #0]
 8004ac2:	1961      	adds	r1, r4, r5
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	bf04      	itt	eq
 8004ac8:	6819      	ldreq	r1, [r3, #0]
 8004aca:	685b      	ldreq	r3, [r3, #4]
 8004acc:	6063      	str	r3, [r4, #4]
 8004ace:	bf04      	itt	eq
 8004ad0:	1949      	addeq	r1, r1, r5
 8004ad2:	6021      	streq	r1, [r4, #0]
 8004ad4:	6054      	str	r4, [r2, #4]
 8004ad6:	e7ca      	b.n	8004a6e <_free_r+0x26>
 8004ad8:	b003      	add	sp, #12
 8004ada:	bd30      	pop	{r4, r5, pc}
 8004adc:	200041d8 	.word	0x200041d8

08004ae0 <sbrk_aligned>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	4e0e      	ldr	r6, [pc, #56]	; (8004b1c <sbrk_aligned+0x3c>)
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	6831      	ldr	r1, [r6, #0]
 8004ae8:	4605      	mov	r5, r0
 8004aea:	b911      	cbnz	r1, 8004af2 <sbrk_aligned+0x12>
 8004aec:	f000 fba6 	bl	800523c <_sbrk_r>
 8004af0:	6030      	str	r0, [r6, #0]
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 fba1 	bl	800523c <_sbrk_r>
 8004afa:	1c43      	adds	r3, r0, #1
 8004afc:	d00a      	beq.n	8004b14 <sbrk_aligned+0x34>
 8004afe:	1cc4      	adds	r4, r0, #3
 8004b00:	f024 0403 	bic.w	r4, r4, #3
 8004b04:	42a0      	cmp	r0, r4
 8004b06:	d007      	beq.n	8004b18 <sbrk_aligned+0x38>
 8004b08:	1a21      	subs	r1, r4, r0
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 fb96 	bl	800523c <_sbrk_r>
 8004b10:	3001      	adds	r0, #1
 8004b12:	d101      	bne.n	8004b18 <sbrk_aligned+0x38>
 8004b14:	f04f 34ff 	mov.w	r4, #4294967295
 8004b18:	4620      	mov	r0, r4
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	200041dc 	.word	0x200041dc

08004b20 <_malloc_r>:
 8004b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b24:	1ccd      	adds	r5, r1, #3
 8004b26:	f025 0503 	bic.w	r5, r5, #3
 8004b2a:	3508      	adds	r5, #8
 8004b2c:	2d0c      	cmp	r5, #12
 8004b2e:	bf38      	it	cc
 8004b30:	250c      	movcc	r5, #12
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	4607      	mov	r7, r0
 8004b36:	db01      	blt.n	8004b3c <_malloc_r+0x1c>
 8004b38:	42a9      	cmp	r1, r5
 8004b3a:	d905      	bls.n	8004b48 <_malloc_r+0x28>
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	2600      	movs	r6, #0
 8004b42:	4630      	mov	r0, r6
 8004b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c1c <_malloc_r+0xfc>
 8004b4c:	f000 f868 	bl	8004c20 <__malloc_lock>
 8004b50:	f8d8 3000 	ldr.w	r3, [r8]
 8004b54:	461c      	mov	r4, r3
 8004b56:	bb5c      	cbnz	r4, 8004bb0 <_malloc_r+0x90>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f7ff ffc0 	bl	8004ae0 <sbrk_aligned>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	4604      	mov	r4, r0
 8004b64:	d155      	bne.n	8004c12 <_malloc_r+0xf2>
 8004b66:	f8d8 4000 	ldr.w	r4, [r8]
 8004b6a:	4626      	mov	r6, r4
 8004b6c:	2e00      	cmp	r6, #0
 8004b6e:	d145      	bne.n	8004bfc <_malloc_r+0xdc>
 8004b70:	2c00      	cmp	r4, #0
 8004b72:	d048      	beq.n	8004c06 <_malloc_r+0xe6>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	4631      	mov	r1, r6
 8004b78:	4638      	mov	r0, r7
 8004b7a:	eb04 0903 	add.w	r9, r4, r3
 8004b7e:	f000 fb5d 	bl	800523c <_sbrk_r>
 8004b82:	4581      	cmp	r9, r0
 8004b84:	d13f      	bne.n	8004c06 <_malloc_r+0xe6>
 8004b86:	6821      	ldr	r1, [r4, #0]
 8004b88:	1a6d      	subs	r5, r5, r1
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	f7ff ffa7 	bl	8004ae0 <sbrk_aligned>
 8004b92:	3001      	adds	r0, #1
 8004b94:	d037      	beq.n	8004c06 <_malloc_r+0xe6>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	442b      	add	r3, r5
 8004b9a:	6023      	str	r3, [r4, #0]
 8004b9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d038      	beq.n	8004c16 <_malloc_r+0xf6>
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	42a2      	cmp	r2, r4
 8004ba8:	d12b      	bne.n	8004c02 <_malloc_r+0xe2>
 8004baa:	2200      	movs	r2, #0
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	e00f      	b.n	8004bd0 <_malloc_r+0xb0>
 8004bb0:	6822      	ldr	r2, [r4, #0]
 8004bb2:	1b52      	subs	r2, r2, r5
 8004bb4:	d41f      	bmi.n	8004bf6 <_malloc_r+0xd6>
 8004bb6:	2a0b      	cmp	r2, #11
 8004bb8:	d917      	bls.n	8004bea <_malloc_r+0xca>
 8004bba:	1961      	adds	r1, r4, r5
 8004bbc:	42a3      	cmp	r3, r4
 8004bbe:	6025      	str	r5, [r4, #0]
 8004bc0:	bf18      	it	ne
 8004bc2:	6059      	strne	r1, [r3, #4]
 8004bc4:	6863      	ldr	r3, [r4, #4]
 8004bc6:	bf08      	it	eq
 8004bc8:	f8c8 1000 	streq.w	r1, [r8]
 8004bcc:	5162      	str	r2, [r4, r5]
 8004bce:	604b      	str	r3, [r1, #4]
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f104 060b 	add.w	r6, r4, #11
 8004bd6:	f000 f829 	bl	8004c2c <__malloc_unlock>
 8004bda:	f026 0607 	bic.w	r6, r6, #7
 8004bde:	1d23      	adds	r3, r4, #4
 8004be0:	1af2      	subs	r2, r6, r3
 8004be2:	d0ae      	beq.n	8004b42 <_malloc_r+0x22>
 8004be4:	1b9b      	subs	r3, r3, r6
 8004be6:	50a3      	str	r3, [r4, r2]
 8004be8:	e7ab      	b.n	8004b42 <_malloc_r+0x22>
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	6862      	ldr	r2, [r4, #4]
 8004bee:	d1dd      	bne.n	8004bac <_malloc_r+0x8c>
 8004bf0:	f8c8 2000 	str.w	r2, [r8]
 8004bf4:	e7ec      	b.n	8004bd0 <_malloc_r+0xb0>
 8004bf6:	4623      	mov	r3, r4
 8004bf8:	6864      	ldr	r4, [r4, #4]
 8004bfa:	e7ac      	b.n	8004b56 <_malloc_r+0x36>
 8004bfc:	4634      	mov	r4, r6
 8004bfe:	6876      	ldr	r6, [r6, #4]
 8004c00:	e7b4      	b.n	8004b6c <_malloc_r+0x4c>
 8004c02:	4613      	mov	r3, r2
 8004c04:	e7cc      	b.n	8004ba0 <_malloc_r+0x80>
 8004c06:	230c      	movs	r3, #12
 8004c08:	603b      	str	r3, [r7, #0]
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f000 f80e 	bl	8004c2c <__malloc_unlock>
 8004c10:	e797      	b.n	8004b42 <_malloc_r+0x22>
 8004c12:	6025      	str	r5, [r4, #0]
 8004c14:	e7dc      	b.n	8004bd0 <_malloc_r+0xb0>
 8004c16:	605b      	str	r3, [r3, #4]
 8004c18:	deff      	udf	#255	; 0xff
 8004c1a:	bf00      	nop
 8004c1c:	200041d8 	.word	0x200041d8

08004c20 <__malloc_lock>:
 8004c20:	4801      	ldr	r0, [pc, #4]	; (8004c28 <__malloc_lock+0x8>)
 8004c22:	f7ff bf01 	b.w	8004a28 <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	200041d4 	.word	0x200041d4

08004c2c <__malloc_unlock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	; (8004c34 <__malloc_unlock+0x8>)
 8004c2e:	f7ff befc 	b.w	8004a2a <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	200041d4 	.word	0x200041d4

08004c38 <__ssputs_r>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	688e      	ldr	r6, [r1, #8]
 8004c3e:	461f      	mov	r7, r3
 8004c40:	42be      	cmp	r6, r7
 8004c42:	680b      	ldr	r3, [r1, #0]
 8004c44:	4682      	mov	sl, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	4690      	mov	r8, r2
 8004c4a:	d82c      	bhi.n	8004ca6 <__ssputs_r+0x6e>
 8004c4c:	898a      	ldrh	r2, [r1, #12]
 8004c4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c52:	d026      	beq.n	8004ca2 <__ssputs_r+0x6a>
 8004c54:	6965      	ldr	r5, [r4, #20]
 8004c56:	6909      	ldr	r1, [r1, #16]
 8004c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c5c:	eba3 0901 	sub.w	r9, r3, r1
 8004c60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c64:	1c7b      	adds	r3, r7, #1
 8004c66:	444b      	add	r3, r9
 8004c68:	106d      	asrs	r5, r5, #1
 8004c6a:	429d      	cmp	r5, r3
 8004c6c:	bf38      	it	cc
 8004c6e:	461d      	movcc	r5, r3
 8004c70:	0553      	lsls	r3, r2, #21
 8004c72:	d527      	bpl.n	8004cc4 <__ssputs_r+0x8c>
 8004c74:	4629      	mov	r1, r5
 8004c76:	f7ff ff53 	bl	8004b20 <_malloc_r>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	b360      	cbz	r0, 8004cd8 <__ssputs_r+0xa0>
 8004c7e:	6921      	ldr	r1, [r4, #16]
 8004c80:	464a      	mov	r2, r9
 8004c82:	f7ff fed3 	bl	8004a2c <memcpy>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	6126      	str	r6, [r4, #16]
 8004c94:	6165      	str	r5, [r4, #20]
 8004c96:	444e      	add	r6, r9
 8004c98:	eba5 0509 	sub.w	r5, r5, r9
 8004c9c:	6026      	str	r6, [r4, #0]
 8004c9e:	60a5      	str	r5, [r4, #8]
 8004ca0:	463e      	mov	r6, r7
 8004ca2:	42be      	cmp	r6, r7
 8004ca4:	d900      	bls.n	8004ca8 <__ssputs_r+0x70>
 8004ca6:	463e      	mov	r6, r7
 8004ca8:	6820      	ldr	r0, [r4, #0]
 8004caa:	4632      	mov	r2, r6
 8004cac:	4641      	mov	r1, r8
 8004cae:	f000 faab 	bl	8005208 <memmove>
 8004cb2:	68a3      	ldr	r3, [r4, #8]
 8004cb4:	1b9b      	subs	r3, r3, r6
 8004cb6:	60a3      	str	r3, [r4, #8]
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	4433      	add	r3, r6
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc4:	462a      	mov	r2, r5
 8004cc6:	f000 fac9 	bl	800525c <_realloc_r>
 8004cca:	4606      	mov	r6, r0
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d1e0      	bne.n	8004c92 <__ssputs_r+0x5a>
 8004cd0:	6921      	ldr	r1, [r4, #16]
 8004cd2:	4650      	mov	r0, sl
 8004cd4:	f7ff feb8 	bl	8004a48 <_free_r>
 8004cd8:	230c      	movs	r3, #12
 8004cda:	f8ca 3000 	str.w	r3, [sl]
 8004cde:	89a3      	ldrh	r3, [r4, #12]
 8004ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce4:	81a3      	strh	r3, [r4, #12]
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cea:	e7e9      	b.n	8004cc0 <__ssputs_r+0x88>

08004cec <_svfiprintf_r>:
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	4698      	mov	r8, r3
 8004cf2:	898b      	ldrh	r3, [r1, #12]
 8004cf4:	061b      	lsls	r3, r3, #24
 8004cf6:	b09d      	sub	sp, #116	; 0x74
 8004cf8:	4607      	mov	r7, r0
 8004cfa:	460d      	mov	r5, r1
 8004cfc:	4614      	mov	r4, r2
 8004cfe:	d50e      	bpl.n	8004d1e <_svfiprintf_r+0x32>
 8004d00:	690b      	ldr	r3, [r1, #16]
 8004d02:	b963      	cbnz	r3, 8004d1e <_svfiprintf_r+0x32>
 8004d04:	2140      	movs	r1, #64	; 0x40
 8004d06:	f7ff ff0b 	bl	8004b20 <_malloc_r>
 8004d0a:	6028      	str	r0, [r5, #0]
 8004d0c:	6128      	str	r0, [r5, #16]
 8004d0e:	b920      	cbnz	r0, 8004d1a <_svfiprintf_r+0x2e>
 8004d10:	230c      	movs	r3, #12
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	e0d0      	b.n	8004ebc <_svfiprintf_r+0x1d0>
 8004d1a:	2340      	movs	r3, #64	; 0x40
 8004d1c:	616b      	str	r3, [r5, #20]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9309      	str	r3, [sp, #36]	; 0x24
 8004d22:	2320      	movs	r3, #32
 8004d24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d28:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d2c:	2330      	movs	r3, #48	; 0x30
 8004d2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ed4 <_svfiprintf_r+0x1e8>
 8004d32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d36:	f04f 0901 	mov.w	r9, #1
 8004d3a:	4623      	mov	r3, r4
 8004d3c:	469a      	mov	sl, r3
 8004d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d42:	b10a      	cbz	r2, 8004d48 <_svfiprintf_r+0x5c>
 8004d44:	2a25      	cmp	r2, #37	; 0x25
 8004d46:	d1f9      	bne.n	8004d3c <_svfiprintf_r+0x50>
 8004d48:	ebba 0b04 	subs.w	fp, sl, r4
 8004d4c:	d00b      	beq.n	8004d66 <_svfiprintf_r+0x7a>
 8004d4e:	465b      	mov	r3, fp
 8004d50:	4622      	mov	r2, r4
 8004d52:	4629      	mov	r1, r5
 8004d54:	4638      	mov	r0, r7
 8004d56:	f7ff ff6f 	bl	8004c38 <__ssputs_r>
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	f000 80a9 	beq.w	8004eb2 <_svfiprintf_r+0x1c6>
 8004d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d62:	445a      	add	r2, fp
 8004d64:	9209      	str	r2, [sp, #36]	; 0x24
 8004d66:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 80a1 	beq.w	8004eb2 <_svfiprintf_r+0x1c6>
 8004d70:	2300      	movs	r3, #0
 8004d72:	f04f 32ff 	mov.w	r2, #4294967295
 8004d76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d7a:	f10a 0a01 	add.w	sl, sl, #1
 8004d7e:	9304      	str	r3, [sp, #16]
 8004d80:	9307      	str	r3, [sp, #28]
 8004d82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d86:	931a      	str	r3, [sp, #104]	; 0x68
 8004d88:	4654      	mov	r4, sl
 8004d8a:	2205      	movs	r2, #5
 8004d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d90:	4850      	ldr	r0, [pc, #320]	; (8004ed4 <_svfiprintf_r+0x1e8>)
 8004d92:	f7fb fa2d 	bl	80001f0 <memchr>
 8004d96:	9a04      	ldr	r2, [sp, #16]
 8004d98:	b9d8      	cbnz	r0, 8004dd2 <_svfiprintf_r+0xe6>
 8004d9a:	06d0      	lsls	r0, r2, #27
 8004d9c:	bf44      	itt	mi
 8004d9e:	2320      	movmi	r3, #32
 8004da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004da4:	0711      	lsls	r1, r2, #28
 8004da6:	bf44      	itt	mi
 8004da8:	232b      	movmi	r3, #43	; 0x2b
 8004daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dae:	f89a 3000 	ldrb.w	r3, [sl]
 8004db2:	2b2a      	cmp	r3, #42	; 0x2a
 8004db4:	d015      	beq.n	8004de2 <_svfiprintf_r+0xf6>
 8004db6:	9a07      	ldr	r2, [sp, #28]
 8004db8:	4654      	mov	r4, sl
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f04f 0c0a 	mov.w	ip, #10
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dc6:	3b30      	subs	r3, #48	; 0x30
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	d94d      	bls.n	8004e68 <_svfiprintf_r+0x17c>
 8004dcc:	b1b0      	cbz	r0, 8004dfc <_svfiprintf_r+0x110>
 8004dce:	9207      	str	r2, [sp, #28]
 8004dd0:	e014      	b.n	8004dfc <_svfiprintf_r+0x110>
 8004dd2:	eba0 0308 	sub.w	r3, r0, r8
 8004dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	9304      	str	r3, [sp, #16]
 8004dde:	46a2      	mov	sl, r4
 8004de0:	e7d2      	b.n	8004d88 <_svfiprintf_r+0x9c>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	1d19      	adds	r1, r3, #4
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	9103      	str	r1, [sp, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bfbb      	ittet	lt
 8004dee:	425b      	neglt	r3, r3
 8004df0:	f042 0202 	orrlt.w	r2, r2, #2
 8004df4:	9307      	strge	r3, [sp, #28]
 8004df6:	9307      	strlt	r3, [sp, #28]
 8004df8:	bfb8      	it	lt
 8004dfa:	9204      	strlt	r2, [sp, #16]
 8004dfc:	7823      	ldrb	r3, [r4, #0]
 8004dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8004e00:	d10c      	bne.n	8004e1c <_svfiprintf_r+0x130>
 8004e02:	7863      	ldrb	r3, [r4, #1]
 8004e04:	2b2a      	cmp	r3, #42	; 0x2a
 8004e06:	d134      	bne.n	8004e72 <_svfiprintf_r+0x186>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	1d1a      	adds	r2, r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	9203      	str	r2, [sp, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bfb8      	it	lt
 8004e14:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e18:	3402      	adds	r4, #2
 8004e1a:	9305      	str	r3, [sp, #20]
 8004e1c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ee4 <_svfiprintf_r+0x1f8>
 8004e20:	7821      	ldrb	r1, [r4, #0]
 8004e22:	2203      	movs	r2, #3
 8004e24:	4650      	mov	r0, sl
 8004e26:	f7fb f9e3 	bl	80001f0 <memchr>
 8004e2a:	b138      	cbz	r0, 8004e3c <_svfiprintf_r+0x150>
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	eba0 000a 	sub.w	r0, r0, sl
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	4082      	lsls	r2, r0
 8004e36:	4313      	orrs	r3, r2
 8004e38:	3401      	adds	r4, #1
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e40:	4825      	ldr	r0, [pc, #148]	; (8004ed8 <_svfiprintf_r+0x1ec>)
 8004e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e46:	2206      	movs	r2, #6
 8004e48:	f7fb f9d2 	bl	80001f0 <memchr>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d038      	beq.n	8004ec2 <_svfiprintf_r+0x1d6>
 8004e50:	4b22      	ldr	r3, [pc, #136]	; (8004edc <_svfiprintf_r+0x1f0>)
 8004e52:	bb1b      	cbnz	r3, 8004e9c <_svfiprintf_r+0x1b0>
 8004e54:	9b03      	ldr	r3, [sp, #12]
 8004e56:	3307      	adds	r3, #7
 8004e58:	f023 0307 	bic.w	r3, r3, #7
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e62:	4433      	add	r3, r6
 8004e64:	9309      	str	r3, [sp, #36]	; 0x24
 8004e66:	e768      	b.n	8004d3a <_svfiprintf_r+0x4e>
 8004e68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	2001      	movs	r0, #1
 8004e70:	e7a6      	b.n	8004dc0 <_svfiprintf_r+0xd4>
 8004e72:	2300      	movs	r3, #0
 8004e74:	3401      	adds	r4, #1
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f04f 0c0a 	mov.w	ip, #10
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e84:	3a30      	subs	r2, #48	; 0x30
 8004e86:	2a09      	cmp	r2, #9
 8004e88:	d903      	bls.n	8004e92 <_svfiprintf_r+0x1a6>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0c6      	beq.n	8004e1c <_svfiprintf_r+0x130>
 8004e8e:	9105      	str	r1, [sp, #20]
 8004e90:	e7c4      	b.n	8004e1c <_svfiprintf_r+0x130>
 8004e92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e96:	4604      	mov	r4, r0
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e7f0      	b.n	8004e7e <_svfiprintf_r+0x192>
 8004e9c:	ab03      	add	r3, sp, #12
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	462a      	mov	r2, r5
 8004ea2:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <_svfiprintf_r+0x1f4>)
 8004ea4:	a904      	add	r1, sp, #16
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	f3af 8000 	nop.w
 8004eac:	1c42      	adds	r2, r0, #1
 8004eae:	4606      	mov	r6, r0
 8004eb0:	d1d6      	bne.n	8004e60 <_svfiprintf_r+0x174>
 8004eb2:	89ab      	ldrh	r3, [r5, #12]
 8004eb4:	065b      	lsls	r3, r3, #25
 8004eb6:	f53f af2d 	bmi.w	8004d14 <_svfiprintf_r+0x28>
 8004eba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ebc:	b01d      	add	sp, #116	; 0x74
 8004ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec2:	ab03      	add	r3, sp, #12
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	462a      	mov	r2, r5
 8004ec8:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <_svfiprintf_r+0x1f4>)
 8004eca:	a904      	add	r1, sp, #16
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f000 f879 	bl	8004fc4 <_printf_i>
 8004ed2:	e7eb      	b.n	8004eac <_svfiprintf_r+0x1c0>
 8004ed4:	08005458 	.word	0x08005458
 8004ed8:	08005462 	.word	0x08005462
 8004edc:	00000000 	.word	0x00000000
 8004ee0:	08004c39 	.word	0x08004c39
 8004ee4:	0800545e 	.word	0x0800545e

08004ee8 <_printf_common>:
 8004ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	4616      	mov	r6, r2
 8004eee:	4699      	mov	r9, r3
 8004ef0:	688a      	ldr	r2, [r1, #8]
 8004ef2:	690b      	ldr	r3, [r1, #16]
 8004ef4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	bfb8      	it	lt
 8004efc:	4613      	movlt	r3, r2
 8004efe:	6033      	str	r3, [r6, #0]
 8004f00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f04:	4607      	mov	r7, r0
 8004f06:	460c      	mov	r4, r1
 8004f08:	b10a      	cbz	r2, 8004f0e <_printf_common+0x26>
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	6033      	str	r3, [r6, #0]
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	0699      	lsls	r1, r3, #26
 8004f12:	bf42      	ittt	mi
 8004f14:	6833      	ldrmi	r3, [r6, #0]
 8004f16:	3302      	addmi	r3, #2
 8004f18:	6033      	strmi	r3, [r6, #0]
 8004f1a:	6825      	ldr	r5, [r4, #0]
 8004f1c:	f015 0506 	ands.w	r5, r5, #6
 8004f20:	d106      	bne.n	8004f30 <_printf_common+0x48>
 8004f22:	f104 0a19 	add.w	sl, r4, #25
 8004f26:	68e3      	ldr	r3, [r4, #12]
 8004f28:	6832      	ldr	r2, [r6, #0]
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	42ab      	cmp	r3, r5
 8004f2e:	dc26      	bgt.n	8004f7e <_printf_common+0x96>
 8004f30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f34:	1e13      	subs	r3, r2, #0
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	bf18      	it	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	0692      	lsls	r2, r2, #26
 8004f3e:	d42b      	bmi.n	8004f98 <_printf_common+0xb0>
 8004f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f44:	4649      	mov	r1, r9
 8004f46:	4638      	mov	r0, r7
 8004f48:	47c0      	blx	r8
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d01e      	beq.n	8004f8c <_printf_common+0xa4>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	6922      	ldr	r2, [r4, #16]
 8004f52:	f003 0306 	and.w	r3, r3, #6
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	bf02      	ittt	eq
 8004f5a:	68e5      	ldreq	r5, [r4, #12]
 8004f5c:	6833      	ldreq	r3, [r6, #0]
 8004f5e:	1aed      	subeq	r5, r5, r3
 8004f60:	68a3      	ldr	r3, [r4, #8]
 8004f62:	bf0c      	ite	eq
 8004f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f68:	2500      	movne	r5, #0
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	bfc4      	itt	gt
 8004f6e:	1a9b      	subgt	r3, r3, r2
 8004f70:	18ed      	addgt	r5, r5, r3
 8004f72:	2600      	movs	r6, #0
 8004f74:	341a      	adds	r4, #26
 8004f76:	42b5      	cmp	r5, r6
 8004f78:	d11a      	bne.n	8004fb0 <_printf_common+0xc8>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e008      	b.n	8004f90 <_printf_common+0xa8>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4652      	mov	r2, sl
 8004f82:	4649      	mov	r1, r9
 8004f84:	4638      	mov	r0, r7
 8004f86:	47c0      	blx	r8
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d103      	bne.n	8004f94 <_printf_common+0xac>
 8004f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f94:	3501      	adds	r5, #1
 8004f96:	e7c6      	b.n	8004f26 <_printf_common+0x3e>
 8004f98:	18e1      	adds	r1, r4, r3
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	2030      	movs	r0, #48	; 0x30
 8004f9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fa2:	4422      	add	r2, r4
 8004fa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fac:	3302      	adds	r3, #2
 8004fae:	e7c7      	b.n	8004f40 <_printf_common+0x58>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	47c0      	blx	r8
 8004fba:	3001      	adds	r0, #1
 8004fbc:	d0e6      	beq.n	8004f8c <_printf_common+0xa4>
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	e7d9      	b.n	8004f76 <_printf_common+0x8e>
	...

08004fc4 <_printf_i>:
 8004fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	7e0f      	ldrb	r7, [r1, #24]
 8004fca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fcc:	2f78      	cmp	r7, #120	; 0x78
 8004fce:	4691      	mov	r9, r2
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	469a      	mov	sl, r3
 8004fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fda:	d807      	bhi.n	8004fec <_printf_i+0x28>
 8004fdc:	2f62      	cmp	r7, #98	; 0x62
 8004fde:	d80a      	bhi.n	8004ff6 <_printf_i+0x32>
 8004fe0:	2f00      	cmp	r7, #0
 8004fe2:	f000 80d4 	beq.w	800518e <_printf_i+0x1ca>
 8004fe6:	2f58      	cmp	r7, #88	; 0x58
 8004fe8:	f000 80c0 	beq.w	800516c <_printf_i+0x1a8>
 8004fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ff4:	e03a      	b.n	800506c <_printf_i+0xa8>
 8004ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ffa:	2b15      	cmp	r3, #21
 8004ffc:	d8f6      	bhi.n	8004fec <_printf_i+0x28>
 8004ffe:	a101      	add	r1, pc, #4	; (adr r1, 8005004 <_printf_i+0x40>)
 8005000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005004:	0800505d 	.word	0x0800505d
 8005008:	08005071 	.word	0x08005071
 800500c:	08004fed 	.word	0x08004fed
 8005010:	08004fed 	.word	0x08004fed
 8005014:	08004fed 	.word	0x08004fed
 8005018:	08004fed 	.word	0x08004fed
 800501c:	08005071 	.word	0x08005071
 8005020:	08004fed 	.word	0x08004fed
 8005024:	08004fed 	.word	0x08004fed
 8005028:	08004fed 	.word	0x08004fed
 800502c:	08004fed 	.word	0x08004fed
 8005030:	08005175 	.word	0x08005175
 8005034:	0800509d 	.word	0x0800509d
 8005038:	0800512f 	.word	0x0800512f
 800503c:	08004fed 	.word	0x08004fed
 8005040:	08004fed 	.word	0x08004fed
 8005044:	08005197 	.word	0x08005197
 8005048:	08004fed 	.word	0x08004fed
 800504c:	0800509d 	.word	0x0800509d
 8005050:	08004fed 	.word	0x08004fed
 8005054:	08004fed 	.word	0x08004fed
 8005058:	08005137 	.word	0x08005137
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	602a      	str	r2, [r5, #0]
 8005064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800506c:	2301      	movs	r3, #1
 800506e:	e09f      	b.n	80051b0 <_printf_i+0x1ec>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	682b      	ldr	r3, [r5, #0]
 8005074:	0607      	lsls	r7, r0, #24
 8005076:	f103 0104 	add.w	r1, r3, #4
 800507a:	6029      	str	r1, [r5, #0]
 800507c:	d501      	bpl.n	8005082 <_printf_i+0xbe>
 800507e:	681e      	ldr	r6, [r3, #0]
 8005080:	e003      	b.n	800508a <_printf_i+0xc6>
 8005082:	0646      	lsls	r6, r0, #25
 8005084:	d5fb      	bpl.n	800507e <_printf_i+0xba>
 8005086:	f9b3 6000 	ldrsh.w	r6, [r3]
 800508a:	2e00      	cmp	r6, #0
 800508c:	da03      	bge.n	8005096 <_printf_i+0xd2>
 800508e:	232d      	movs	r3, #45	; 0x2d
 8005090:	4276      	negs	r6, r6
 8005092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005096:	485a      	ldr	r0, [pc, #360]	; (8005200 <_printf_i+0x23c>)
 8005098:	230a      	movs	r3, #10
 800509a:	e012      	b.n	80050c2 <_printf_i+0xfe>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	6029      	str	r1, [r5, #0]
 80050a4:	0605      	lsls	r5, r0, #24
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0xe8>
 80050a8:	681e      	ldr	r6, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <_printf_i+0xee>
 80050ac:	0641      	lsls	r1, r0, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0xe4>
 80050b0:	881e      	ldrh	r6, [r3, #0]
 80050b2:	4853      	ldr	r0, [pc, #332]	; (8005200 <_printf_i+0x23c>)
 80050b4:	2f6f      	cmp	r7, #111	; 0x6f
 80050b6:	bf0c      	ite	eq
 80050b8:	2308      	moveq	r3, #8
 80050ba:	230a      	movne	r3, #10
 80050bc:	2100      	movs	r1, #0
 80050be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050c2:	6865      	ldr	r5, [r4, #4]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	bfa2      	ittt	ge
 80050ca:	6821      	ldrge	r1, [r4, #0]
 80050cc:	f021 0104 	bicge.w	r1, r1, #4
 80050d0:	6021      	strge	r1, [r4, #0]
 80050d2:	b90e      	cbnz	r6, 80050d8 <_printf_i+0x114>
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	d04b      	beq.n	8005170 <_printf_i+0x1ac>
 80050d8:	4615      	mov	r5, r2
 80050da:	fbb6 f1f3 	udiv	r1, r6, r3
 80050de:	fb03 6711 	mls	r7, r3, r1, r6
 80050e2:	5dc7      	ldrb	r7, [r0, r7]
 80050e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050e8:	4637      	mov	r7, r6
 80050ea:	42bb      	cmp	r3, r7
 80050ec:	460e      	mov	r6, r1
 80050ee:	d9f4      	bls.n	80050da <_printf_i+0x116>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d10b      	bne.n	800510c <_printf_i+0x148>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	07de      	lsls	r6, r3, #31
 80050f8:	d508      	bpl.n	800510c <_printf_i+0x148>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	6861      	ldr	r1, [r4, #4]
 80050fe:	4299      	cmp	r1, r3
 8005100:	bfde      	ittt	le
 8005102:	2330      	movle	r3, #48	; 0x30
 8005104:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005108:	f105 35ff 	addle.w	r5, r5, #4294967295
 800510c:	1b52      	subs	r2, r2, r5
 800510e:	6122      	str	r2, [r4, #16]
 8005110:	f8cd a000 	str.w	sl, [sp]
 8005114:	464b      	mov	r3, r9
 8005116:	aa03      	add	r2, sp, #12
 8005118:	4621      	mov	r1, r4
 800511a:	4640      	mov	r0, r8
 800511c:	f7ff fee4 	bl	8004ee8 <_printf_common>
 8005120:	3001      	adds	r0, #1
 8005122:	d14a      	bne.n	80051ba <_printf_i+0x1f6>
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	b004      	add	sp, #16
 800512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	f043 0320 	orr.w	r3, r3, #32
 8005134:	6023      	str	r3, [r4, #0]
 8005136:	4833      	ldr	r0, [pc, #204]	; (8005204 <_printf_i+0x240>)
 8005138:	2778      	movs	r7, #120	; 0x78
 800513a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	6829      	ldr	r1, [r5, #0]
 8005142:	061f      	lsls	r7, r3, #24
 8005144:	f851 6b04 	ldr.w	r6, [r1], #4
 8005148:	d402      	bmi.n	8005150 <_printf_i+0x18c>
 800514a:	065f      	lsls	r7, r3, #25
 800514c:	bf48      	it	mi
 800514e:	b2b6      	uxthmi	r6, r6
 8005150:	07df      	lsls	r7, r3, #31
 8005152:	bf48      	it	mi
 8005154:	f043 0320 	orrmi.w	r3, r3, #32
 8005158:	6029      	str	r1, [r5, #0]
 800515a:	bf48      	it	mi
 800515c:	6023      	strmi	r3, [r4, #0]
 800515e:	b91e      	cbnz	r6, 8005168 <_printf_i+0x1a4>
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	f023 0320 	bic.w	r3, r3, #32
 8005166:	6023      	str	r3, [r4, #0]
 8005168:	2310      	movs	r3, #16
 800516a:	e7a7      	b.n	80050bc <_printf_i+0xf8>
 800516c:	4824      	ldr	r0, [pc, #144]	; (8005200 <_printf_i+0x23c>)
 800516e:	e7e4      	b.n	800513a <_printf_i+0x176>
 8005170:	4615      	mov	r5, r2
 8005172:	e7bd      	b.n	80050f0 <_printf_i+0x12c>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	6826      	ldr	r6, [r4, #0]
 8005178:	6961      	ldr	r1, [r4, #20]
 800517a:	1d18      	adds	r0, r3, #4
 800517c:	6028      	str	r0, [r5, #0]
 800517e:	0635      	lsls	r5, r6, #24
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	d501      	bpl.n	8005188 <_printf_i+0x1c4>
 8005184:	6019      	str	r1, [r3, #0]
 8005186:	e002      	b.n	800518e <_printf_i+0x1ca>
 8005188:	0670      	lsls	r0, r6, #25
 800518a:	d5fb      	bpl.n	8005184 <_printf_i+0x1c0>
 800518c:	8019      	strh	r1, [r3, #0]
 800518e:	2300      	movs	r3, #0
 8005190:	6123      	str	r3, [r4, #16]
 8005192:	4615      	mov	r5, r2
 8005194:	e7bc      	b.n	8005110 <_printf_i+0x14c>
 8005196:	682b      	ldr	r3, [r5, #0]
 8005198:	1d1a      	adds	r2, r3, #4
 800519a:	602a      	str	r2, [r5, #0]
 800519c:	681d      	ldr	r5, [r3, #0]
 800519e:	6862      	ldr	r2, [r4, #4]
 80051a0:	2100      	movs	r1, #0
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7fb f824 	bl	80001f0 <memchr>
 80051a8:	b108      	cbz	r0, 80051ae <_printf_i+0x1ea>
 80051aa:	1b40      	subs	r0, r0, r5
 80051ac:	6060      	str	r0, [r4, #4]
 80051ae:	6863      	ldr	r3, [r4, #4]
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	2300      	movs	r3, #0
 80051b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b8:	e7aa      	b.n	8005110 <_printf_i+0x14c>
 80051ba:	6923      	ldr	r3, [r4, #16]
 80051bc:	462a      	mov	r2, r5
 80051be:	4649      	mov	r1, r9
 80051c0:	4640      	mov	r0, r8
 80051c2:	47d0      	blx	sl
 80051c4:	3001      	adds	r0, #1
 80051c6:	d0ad      	beq.n	8005124 <_printf_i+0x160>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	079b      	lsls	r3, r3, #30
 80051cc:	d413      	bmi.n	80051f6 <_printf_i+0x232>
 80051ce:	68e0      	ldr	r0, [r4, #12]
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	4298      	cmp	r0, r3
 80051d4:	bfb8      	it	lt
 80051d6:	4618      	movlt	r0, r3
 80051d8:	e7a6      	b.n	8005128 <_printf_i+0x164>
 80051da:	2301      	movs	r3, #1
 80051dc:	4632      	mov	r2, r6
 80051de:	4649      	mov	r1, r9
 80051e0:	4640      	mov	r0, r8
 80051e2:	47d0      	blx	sl
 80051e4:	3001      	adds	r0, #1
 80051e6:	d09d      	beq.n	8005124 <_printf_i+0x160>
 80051e8:	3501      	adds	r5, #1
 80051ea:	68e3      	ldr	r3, [r4, #12]
 80051ec:	9903      	ldr	r1, [sp, #12]
 80051ee:	1a5b      	subs	r3, r3, r1
 80051f0:	42ab      	cmp	r3, r5
 80051f2:	dcf2      	bgt.n	80051da <_printf_i+0x216>
 80051f4:	e7eb      	b.n	80051ce <_printf_i+0x20a>
 80051f6:	2500      	movs	r5, #0
 80051f8:	f104 0619 	add.w	r6, r4, #25
 80051fc:	e7f5      	b.n	80051ea <_printf_i+0x226>
 80051fe:	bf00      	nop
 8005200:	08005469 	.word	0x08005469
 8005204:	0800547a 	.word	0x0800547a

08005208 <memmove>:
 8005208:	4288      	cmp	r0, r1
 800520a:	b510      	push	{r4, lr}
 800520c:	eb01 0402 	add.w	r4, r1, r2
 8005210:	d902      	bls.n	8005218 <memmove+0x10>
 8005212:	4284      	cmp	r4, r0
 8005214:	4623      	mov	r3, r4
 8005216:	d807      	bhi.n	8005228 <memmove+0x20>
 8005218:	1e43      	subs	r3, r0, #1
 800521a:	42a1      	cmp	r1, r4
 800521c:	d008      	beq.n	8005230 <memmove+0x28>
 800521e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005226:	e7f8      	b.n	800521a <memmove+0x12>
 8005228:	4402      	add	r2, r0
 800522a:	4601      	mov	r1, r0
 800522c:	428a      	cmp	r2, r1
 800522e:	d100      	bne.n	8005232 <memmove+0x2a>
 8005230:	bd10      	pop	{r4, pc}
 8005232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800523a:	e7f7      	b.n	800522c <memmove+0x24>

0800523c <_sbrk_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d06      	ldr	r5, [pc, #24]	; (8005258 <_sbrk_r+0x1c>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fb fcf6 	bl	8000c38 <_sbrk>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_sbrk_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_sbrk_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	200041d0 	.word	0x200041d0

0800525c <_realloc_r>:
 800525c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005260:	4680      	mov	r8, r0
 8005262:	4614      	mov	r4, r2
 8005264:	460e      	mov	r6, r1
 8005266:	b921      	cbnz	r1, 8005272 <_realloc_r+0x16>
 8005268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800526c:	4611      	mov	r1, r2
 800526e:	f7ff bc57 	b.w	8004b20 <_malloc_r>
 8005272:	b92a      	cbnz	r2, 8005280 <_realloc_r+0x24>
 8005274:	f7ff fbe8 	bl	8004a48 <_free_r>
 8005278:	4625      	mov	r5, r4
 800527a:	4628      	mov	r0, r5
 800527c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005280:	f000 f81b 	bl	80052ba <_malloc_usable_size_r>
 8005284:	4284      	cmp	r4, r0
 8005286:	4607      	mov	r7, r0
 8005288:	d802      	bhi.n	8005290 <_realloc_r+0x34>
 800528a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800528e:	d812      	bhi.n	80052b6 <_realloc_r+0x5a>
 8005290:	4621      	mov	r1, r4
 8005292:	4640      	mov	r0, r8
 8005294:	f7ff fc44 	bl	8004b20 <_malloc_r>
 8005298:	4605      	mov	r5, r0
 800529a:	2800      	cmp	r0, #0
 800529c:	d0ed      	beq.n	800527a <_realloc_r+0x1e>
 800529e:	42bc      	cmp	r4, r7
 80052a0:	4622      	mov	r2, r4
 80052a2:	4631      	mov	r1, r6
 80052a4:	bf28      	it	cs
 80052a6:	463a      	movcs	r2, r7
 80052a8:	f7ff fbc0 	bl	8004a2c <memcpy>
 80052ac:	4631      	mov	r1, r6
 80052ae:	4640      	mov	r0, r8
 80052b0:	f7ff fbca 	bl	8004a48 <_free_r>
 80052b4:	e7e1      	b.n	800527a <_realloc_r+0x1e>
 80052b6:	4635      	mov	r5, r6
 80052b8:	e7df      	b.n	800527a <_realloc_r+0x1e>

080052ba <_malloc_usable_size_r>:
 80052ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052be:	1f18      	subs	r0, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bfbc      	itt	lt
 80052c4:	580b      	ldrlt	r3, [r1, r0]
 80052c6:	18c0      	addlt	r0, r0, r3
 80052c8:	4770      	bx	lr
	...

080052cc <_init>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr

080052d8 <_fini>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	bf00      	nop
 80052dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052de:	bc08      	pop	{r3}
 80052e0:	469e      	mov	lr, r3
 80052e2:	4770      	bx	lr
