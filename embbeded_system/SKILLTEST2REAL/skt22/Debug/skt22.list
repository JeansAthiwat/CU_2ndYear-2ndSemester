
skt22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004800  08004800  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08004808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000008c  08004894  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08004894  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1a3  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d38  00000000  00000000  0002d2a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  0002fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015afb  00000000  00000000  000305f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e137  00000000  00000000  000460f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c7ae  00000000  00000000  0005422a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003928  00000000  00000000  000e09d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000e4300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004778 	.word	0x08004778

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	08004778 	.word	0x08004778

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <HAL_TIM_PeriodElapsedCallback>:
int lastTick = 0;

int percent[] = { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100 };
int percentIdx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b40      	ldr	r3, [pc, #256]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	429a      	cmp	r2, r3
 800059e:	d13f      	bne.n	8000620 <HAL_TIM_PeriodElapsedCallback+0x94>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	483e      	ldr	r0, [pc, #248]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80005a6:	f001 f8bf 	bl	8001728 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d171      	bne.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x108>
			lastPushTick = HAL_GetTick();
 80005b0:	f000 fd86 	bl	80010c0 <HAL_GetTick>
 80005b4:	4603      	mov	r3, r0
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b3a      	ldr	r3, [pc, #232]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80005ba:	701a      	strb	r2, [r3, #0]
			if (isTakingInput == 1) {
 80005bc:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d129      	bne.n	8000618 <HAL_TIM_PeriodElapsedCallback+0x8c>
				percentIdx++;
 80005c4:	4b39      	ldr	r3, [pc, #228]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a38      	ldr	r2, [pc, #224]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80005cc:	6013      	str	r3, [r2, #0]
				percentIdx = percentIdx % 11;
 80005ce:	4b37      	ldr	r3, [pc, #220]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80005d4:	fb83 2301 	smull	r2, r3, r3, r1
 80005d8:	105a      	asrs	r2, r3, #1
 80005da:	17cb      	asrs	r3, r1, #31
 80005dc:	1ad2      	subs	r2, r2, r3
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	4413      	add	r3, r2
 80005e8:	1aca      	subs	r2, r1, r3
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80005ec:	601a      	str	r2, [r3, #0]
				char buffer[32];
				sprintf(buffer, "%d\r\n", percentIdx);
 80005ee:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	492f      	ldr	r1, [pc, #188]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 fc19 	bl	8003e30 <siprintf>
				HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fdec 	bl	80001e0 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f107 0108 	add.w	r1, r7, #8
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	4829      	ldr	r0, [pc, #164]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000614:	f002 fbc4 	bl	8002da0 <HAL_UART_Transmit>
			}

			HAL_TIM_Base_Stop(htim);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f001 fd4d 	bl	80020b8 <HAL_TIM_Base_Stop>
		}
		isHaling = 0;
		justStart = 0;
		HAL_TIM_Base_Stop(htim);
	}
}
 800061e:	e039      	b.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x108>
	else if (htim->Instance == htim4.Instance) {
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681a      	ldr	r2, [r3, #0]
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	d133      	bne.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x108>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET
 800062c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000632:	f001 f879 	bl	8001728 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d122      	bne.n	8000682 <HAL_TIM_PeriodElapsedCallback+0xf6>
				&& 2000 < HAL_GetTick() - lastPushTick && justStart == 0) {
 800063c:	f000 fd40 	bl	80010c0 <HAL_GetTick>
 8000640:	4603      	mov	r3, r0
 8000642:	4a18      	ldr	r2, [pc, #96]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000644:	7812      	ldrb	r2, [r2, #0]
 8000646:	1a9b      	subs	r3, r3, r2
 8000648:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800064c:	d919      	bls.n	8000682 <HAL_TIM_PeriodElapsedCallback+0xf6>
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d115      	bne.n	8000682 <HAL_TIM_PeriodElapsedCallback+0xf6>
			isTakingInput = 0;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
			sprintf(buffer, "TRIGGER 2 SEC\r\n");
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	4918      	ldr	r1, [pc, #96]	; (80006c4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fbe4 	bl	8003e30 <siprintf>
			HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fdb7 	bl	80001e0 <strlen>
 8000672:	4603      	mov	r3, r0
 8000674:	b29a      	uxth	r2, r3
 8000676:	f107 0108 	add.w	r1, r7, #8
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	480e      	ldr	r0, [pc, #56]	; (80006b8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800067e:	f002 fb8f 	bl	8002da0 <HAL_UART_Transmit>
		isHaling = 0;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
		justStart = 0;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop(htim);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f001 fd12 	bl	80020b8 <HAL_TIM_Base_Stop>
}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000f0 	.word	0x200000f0
 80006a0:	40020800 	.word	0x40020800
 80006a4:	200001c8 	.word	0x200001c8
 80006a8:	20000000 	.word	0x20000000
 80006ac:	200001cc 	.word	0x200001cc
 80006b0:	2e8ba2e9 	.word	0x2e8ba2e9
 80006b4:	08004790 	.word	0x08004790
 80006b8:	20000180 	.word	0x20000180
 80006bc:	20000138 	.word	0x20000138
 80006c0:	20000002 	.word	0x20000002
 80006c4:	08004798 	.word	0x08004798
 80006c8:	200001c9 	.word	0x200001c9

080006cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]

	state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	480c      	ldr	r0, [pc, #48]	; (800070c <HAL_GPIO_EXTI_Callback+0x40>)
 80006dc:	f001 f824 	bl	8001728 <HAL_GPIO_ReadPin>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_GPIO_EXTI_Callback+0x44>)
 80006e6:	701a      	strb	r2, [r3, #0]
//	char buffer[32];
//	sprintf(buffer, "%d----\r\n", percentIdx);
//	HAL_UART_Transmit(&huart2, &buffer, strlen(buffer), 100);

	if (state == GPIO_PIN_RESET) {
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_GPIO_EXTI_Callback+0x44>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d109      	bne.n	8000704 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_TIM_Base_Start_IT(&htim3); // 50 ms delay
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <HAL_GPIO_EXTI_Callback+0x48>)
 80006f2:	f001 fd09 	bl	8002108 <HAL_TIM_Base_Start_IT>
		if (isHaling == 0) {
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <HAL_GPIO_EXTI_Callback+0x38>
			HAL_TIM_Base_Start_IT(&htim4); // 2000 ms delay
 80006fe:	4807      	ldr	r0, [pc, #28]	; (800071c <HAL_GPIO_EXTI_Callback+0x50>)
 8000700:	f001 fd02 	bl	8002108 <HAL_TIM_Base_Start_IT>
//
//	}
//
//	lastPushTick = curTick;

}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40020800 	.word	0x40020800
 8000710:	20000001 	.word	0x20000001
 8000714:	200000f0 	.word	0x200000f0
 8000718:	200001c9 	.word	0x200001c9
 800071c:	20000138 	.word	0x20000138

08000720 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000724:	f000 fc66 	bl	8000ff4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000728:	f000 f842 	bl	80007b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800072c:	f000 f9de 	bl	8000aec <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000730:	f000 f9b2 	bl	8000a98 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000734:	f000 f8a4 	bl	8000880 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000738:	f000 f8fa 	bl	8000930 <MX_TIM3_Init>
	MX_TIM4_Init();
 800073c:	f000 f952 	bl	80009e4 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4815      	ldr	r0, [pc, #84]	; (8000798 <main+0x78>)
 8000744:	f001 fd92 	bl	800226c <HAL_TIM_PWM_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		TIM2->CCR1 = percent[percentIdx];
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <main+0x7c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <main+0x80>)
 800074e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000752:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000756:	635a      	str	r2, [r3, #52]	; 0x34

		if (HAL_UART_Receive(&huart2, &ch, 1, 100) == HAL_OK) {
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	2201      	movs	r2, #1
 800075c:	4911      	ldr	r1, [pc, #68]	; (80007a4 <main+0x84>)
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <main+0x88>)
 8000760:	f002 fba9 	bl	8002eb6 <HAL_UART_Receive>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1ee      	bne.n	8000748 <main+0x28>
			if (ch == '\r' || ch == '\n') {
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <main+0x84>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b0d      	cmp	r3, #13
 8000770:	d003      	beq.n	800077a <main+0x5a>
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <main+0x84>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b0a      	cmp	r3, #10
 8000778:	d106      	bne.n	8000788 <main+0x68>
				HAL_UART_Transmit(&huart2, "\r\n", 2, 100);
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	2202      	movs	r2, #2
 800077e:	490b      	ldr	r1, [pc, #44]	; (80007ac <main+0x8c>)
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <main+0x88>)
 8000782:	f002 fb0d 	bl	8002da0 <HAL_UART_Transmit>
 8000786:	e005      	b.n	8000794 <main+0x74>
			} else {
				HAL_UART_Transmit(&huart2, &ch, 1, 100);
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	2201      	movs	r2, #1
 800078c:	4905      	ldr	r1, [pc, #20]	; (80007a4 <main+0x84>)
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <main+0x88>)
 8000790:	f002 fb06 	bl	8002da0 <HAL_UART_Transmit>
		TIM2->CCR1 = percent[percentIdx];
 8000794:	e7d8      	b.n	8000748 <main+0x28>
 8000796:	bf00      	nop
 8000798:	200000a8 	.word	0x200000a8
 800079c:	200001cc 	.word	0x200001cc
 80007a0:	20000004 	.word	0x20000004
 80007a4:	200001ca 	.word	0x200001ca
 80007a8:	20000180 	.word	0x20000180
 80007ac:	080047a8 	.word	0x080047a8

080007b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2230      	movs	r2, #48	; 0x30
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fb56 	bl	8003e70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	4b27      	ldr	r3, [pc, #156]	; (8000878 <SystemClock_Config+0xc8>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a26      	ldr	r2, [pc, #152]	; (8000878 <SystemClock_Config+0xc8>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b24      	ldr	r3, [pc, #144]	; (8000878 <SystemClock_Config+0xc8>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <SystemClock_Config+0xcc>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a20      	ldr	r2, [pc, #128]	; (800087c <SystemClock_Config+0xcc>)
 80007fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <SystemClock_Config+0xcc>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	2310      	movs	r3, #16
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000820:	2308      	movs	r3, #8
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800082c:	2304      	movs	r3, #4
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f000 ffa7 	bl	8001788 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x94>
		Error_Handler();
 8000840:	f000 f9b6 	bl	8000bb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000854:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	2103      	movs	r1, #3
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fa09 	bl	8001c78 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xc0>
		Error_Handler();
 800086c:	f000 f9a0 	bl	8000bb0 <Error_Handler>
	}
}
 8000870:	bf00      	nop
 8000872:	3750      	adds	r7, #80	; 0x50
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_TIM2_Init+0xac>)
 80008a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 999;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_TIM2_Init+0xac>)
 80008ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_TIM2_Init+0xac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_TIM2_Init+0xac>)
 80008ba:	2264      	movs	r2, #100	; 0x64
 80008bc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008be:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_TIM2_Init+0xac>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008c4:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_TIM2_Init+0xac>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80008ca:	4818      	ldr	r0, [pc, #96]	; (800092c <MX_TIM2_Init+0xac>)
 80008cc:	f001 fc7e 	bl	80021cc <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0x5a>
		Error_Handler();
 80008d6:	f000 f96b 	bl	8000bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4619      	mov	r1, r3
 80008e8:	4810      	ldr	r0, [pc, #64]	; (800092c <MX_TIM2_Init+0xac>)
 80008ea:	f002 f987 	bl	8002bfc <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80008f4:	f000 f95c 	bl	8000bb0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	; 0x60
 80008fa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_TIM2_Init+0xac>)
 8000910:	f001 fe4c 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800091a:	f000 f949 	bl	8000bb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <MX_TIM2_Init+0xac>)
 8000920:	f000 f9ce 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200000a8 	.word	0x200000a8

08000930 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
 800094e:	615a      	str	r2, [r3, #20]
 8000950:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_TIM3_Init+0xac>)
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <MX_TIM3_Init+0xb0>)
 8000956:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 999;
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_TIM3_Init+0xac>)
 800095a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM3_Init+0xac>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 4999;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_TIM3_Init+0xac>)
 8000968:	f241 3287 	movw	r2, #4999	; 0x1387
 800096c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_TIM3_Init+0xac>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_TIM3_Init+0xac>)
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800097a:	4818      	ldr	r0, [pc, #96]	; (80009dc <MX_TIM3_Init+0xac>)
 800097c:	f001 fc26 	bl	80021cc <HAL_TIM_PWM_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM3_Init+0x5a>
		Error_Handler();
 8000986:	f000 f913 	bl	8000bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	4619      	mov	r1, r3
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <MX_TIM3_Init+0xac>)
 800099a:	f002 f92f 	bl	8002bfc <HAL_TIMEx_MasterConfigSynchronization>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80009a4:	f000 f904 	bl	8000bb0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a8:	2360      	movs	r3, #96	; 0x60
 80009aa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2204      	movs	r2, #4
 80009bc:	4619      	mov	r1, r3
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <MX_TIM3_Init+0xac>)
 80009c0:	f001 fdf4 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM3_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80009ca:	f000 f8f1 	bl	8000bb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80009ce:	4803      	ldr	r0, [pc, #12]	; (80009dc <MX_TIM3_Init+0xac>)
 80009d0:	f000 f976 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000f0 	.word	0x200000f0
 80009e0:	40000400 	.word	0x40000400

080009e4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009ea:	f107 0320 	add.w	r3, r7, #32
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a08:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <MX_TIM4_Init+0xb0>)
 8000a0a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 9999;
 8000a0c:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a12:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 29999;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a1c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000a20:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000a2e:	4818      	ldr	r0, [pc, #96]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a30:	f001 fbcc 	bl	80021cc <HAL_TIM_PWM_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM4_Init+0x5a>
		Error_Handler();
 8000a3a:	f000 f8b9 	bl	8000bb0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4810      	ldr	r0, [pc, #64]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a4e:	f002 f8d5 	bl	8002bfc <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000a58:	f000 f8aa 	bl	8000bb0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5c:	2360      	movs	r3, #96	; 0x60
 8000a5e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2204      	movs	r2, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a74:	f001 fd9a 	bl	80025ac <HAL_TIM_PWM_ConfigChannel>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000a7e:	f000 f897 	bl	8000bb0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000a82:	4803      	ldr	r0, [pc, #12]	; (8000a90 <MX_TIM4_Init+0xac>)
 8000a84:	f000 f91c 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000138 	.word	0x20000138
 8000a94:	40000800 	.word	0x40000800

08000a98 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f002 f916 	bl	8002d00 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000ada:	f000 f869 	bl	8000bb0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000180 	.word	0x20000180
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a27      	ldr	r2, [pc, #156]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_GPIO_Init+0xbc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b78:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <MX_GPIO_Init+0xc0>)
 8000b8a:	f000 fc49 	bl	8001420 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 8000b8e:	2202      	movs	r2, #2
 8000b90:	2100      	movs	r1, #0
 8000b92:	2028      	movs	r0, #40	; 0x28
 8000b94:	f000 fb7b 	bl	800128e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b98:	2028      	movs	r0, #40	; 0x28
 8000b9a:	f000 fb94 	bl	80012c6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020800 	.word	0x40020800

08000bb0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HAL_MspInit+0x4c>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bfa:	2007      	movs	r0, #7
 8000bfc:	f000 fb3c 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800

08000c0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c1c:	d10e      	bne.n	8000c3c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a23      	ldr	r2, [pc, #140]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c3a:	e036      	b.n	8000caa <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM3)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_TIM_PWM_MspInit+0xac>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d116      	bne.n	8000c74 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201d      	movs	r0, #29
 8000c68:	f000 fb11 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c6c:	201d      	movs	r0, #29
 8000c6e:	f000 fb2a 	bl	80012c6 <HAL_NVIC_EnableIRQ>
}
 8000c72:	e01a      	b.n	8000caa <HAL_TIM_PWM_MspInit+0x9e>
  else if(htim_pwm->Instance==TIM4)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_TIM_PWM_MspInit+0xb0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d115      	bne.n	8000caa <HAL_TIM_PWM_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	201e      	movs	r0, #30
 8000ca0:	f000 faf5 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ca4:	201e      	movs	r0, #30
 8000ca6:	f000 fb0e 	bl	80012c6 <HAL_NVIC_EnableIRQ>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40000400 	.word	0x40000400
 8000cbc:	40000800 	.word	0x40000800

08000cc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d11e      	bne.n	8000d20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <HAL_TIM_MspPostInit+0xfc>)
 8000d1a:	f000 fb81 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d1e:	e046      	b.n	8000dae <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <HAL_TIM_MspPostInit+0x100>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d11e      	bne.n	8000d68 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <HAL_TIM_MspPostInit+0x104>)
 8000d62:	f000 fb5d 	bl	8001420 <HAL_GPIO_Init>
}
 8000d66:	e022      	b.n	8000dae <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <HAL_TIM_MspPostInit+0x108>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d11d      	bne.n	8000dae <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4808      	ldr	r0, [pc, #32]	; (8000dcc <HAL_TIM_MspPostInit+0x10c>)
 8000daa:	f000 fb39 	bl	8001420 <HAL_GPIO_Init>
}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40020800 	.word	0x40020800
 8000dc8:	40000800 	.word	0x40000800
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_UART_MspInit+0x94>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d133      	bne.n	8000e5a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_UART_MspInit+0x98>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <HAL_UART_MspInit+0x9c>)
 8000e46:	f000 faeb 	bl	8001420 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 2);
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2026      	movs	r0, #38	; 0x26
 8000e50:	f000 fa1d 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e54:	2026      	movs	r0, #38	; 0x26
 8000e56:	f000 fa36 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f8ec 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM3_IRQHandler+0x10>)
 8000eca:	f001 fa7f 	bl	80023cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000f0 	.word	0x200000f0

08000ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM4_IRQHandler+0x10>)
 8000ede:	f001 fa75 	bl	80023cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000138 	.word	0x20000138

08000eec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <USART2_IRQHandler+0x10>)
 8000ef2:	f002 f877 	bl	8002fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000180 	.word	0x20000180

08000f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f08:	f000 fc26 	bl	8001758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <_sbrk+0x5c>)
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <_sbrk+0x60>)
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <_sbrk+0x64>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <_sbrk+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <_sbrk+0x64>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4413      	add	r3, r2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d207      	bcs.n	8000f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f40:	f002 ff9e 	bl	8003e80 <__errno>
 8000f44:	4603      	mov	r3, r0
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	e009      	b.n	8000f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <_sbrk+0x64>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <_sbrk+0x64>)
 8000f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20020000 	.word	0x20020000
 8000f70:	00000400 	.word	0x00000400
 8000f74:	200001d0 	.word	0x200001d0
 8000f78:	20000320 	.word	0x20000320

08000f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <SystemInit+0x20>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <SystemInit+0x20>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa4:	f7ff ffea 	bl	8000f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000faa:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc0:	4c0a      	ldr	r4, [pc, #40]	; (8000fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 ff5d 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fba5 	bl	8000720 <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000fe4:	08004808 	.word	0x08004808
  ldr r2, =_sbss
 8000fe8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000fec:	20000320 	.word	0x20000320

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f92b 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fdc8 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f943 	bl	80012e2 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f90b 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000030 	.word	0x20000030
 8001090:	20000038 	.word	0x20000038
 8001094:	20000034 	.word	0x20000034

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000038 	.word	0x20000038
 80010bc:	200001d4 	.word	0x200001d4

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001d4 	.word	0x200001d4

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff29 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff3e 	bl	8001120 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff31 	bl	800113c <__NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffa2 	bl	8001234 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b084      	sub	sp, #16
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001306:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff feda 	bl	80010c0 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d008      	beq.n	800132c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2280      	movs	r2, #128	; 0x80
 800131e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e052      	b.n	80013d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0216 	bic.w	r2, r2, #22
 800133a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800134a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <HAL_DMA_Abort+0x62>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001358:	2b00      	cmp	r3, #0
 800135a:	d007      	beq.n	800136c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0208 	bic.w	r2, r2, #8
 800136a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800137c:	e013      	b.n	80013a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800137e:	f7ff fe9f 	bl	80010c0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b05      	cmp	r3, #5
 800138a:	d90c      	bls.n	80013a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2220      	movs	r2, #32
 8001390:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e015      	b.n	80013d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1e4      	bne.n	800137e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b8:	223f      	movs	r2, #63	; 0x3f
 80013ba:	409a      	lsls	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d004      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2280      	movs	r2, #128	; 0x80
 80013f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e00c      	b.n	8001412 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2205      	movs	r2, #5
 80013fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e159      	b.n	80016f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	429a      	cmp	r2, r3
 8001456:	f040 8148 	bne.w	80016ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d005      	beq.n	8001472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	2b02      	cmp	r3, #2
 8001470:	d130      	bne.n	80014d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 0201 	and.w	r2, r3, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b03      	cmp	r3, #3
 80014de:	d017      	beq.n	8001510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d123      	bne.n	8001564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	08da      	lsrs	r2, r3, #3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	220f      	movs	r2, #15
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	08da      	lsrs	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3208      	adds	r2, #8
 800155e:	69b9      	ldr	r1, [r7, #24]
 8001560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0203 	and.w	r2, r3, #3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80a2 	beq.w	80016ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_GPIO_Init+0x2e8>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a56      	ldr	r2, [pc, #344]	; (8001708 <HAL_GPIO_Init+0x2e8>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b54      	ldr	r3, [pc, #336]	; (8001708 <HAL_GPIO_Init+0x2e8>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c2:	4a52      	ldr	r2, [pc, #328]	; (800170c <HAL_GPIO_Init+0x2ec>)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a49      	ldr	r2, [pc, #292]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d019      	beq.n	8001622 <HAL_GPIO_Init+0x202>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a48      	ldr	r2, [pc, #288]	; (8001714 <HAL_GPIO_Init+0x2f4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d013      	beq.n	800161e <HAL_GPIO_Init+0x1fe>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a47      	ldr	r2, [pc, #284]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00d      	beq.n	800161a <HAL_GPIO_Init+0x1fa>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a46      	ldr	r2, [pc, #280]	; (800171c <HAL_GPIO_Init+0x2fc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d007      	beq.n	8001616 <HAL_GPIO_Init+0x1f6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a45      	ldr	r2, [pc, #276]	; (8001720 <HAL_GPIO_Init+0x300>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d101      	bne.n	8001612 <HAL_GPIO_Init+0x1f2>
 800160e:	2304      	movs	r3, #4
 8001610:	e008      	b.n	8001624 <HAL_GPIO_Init+0x204>
 8001612:	2307      	movs	r3, #7
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x204>
 8001616:	2303      	movs	r3, #3
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x204>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x204>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x204>
 8001622:	2300      	movs	r3, #0
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	; (800170c <HAL_GPIO_Init+0x2ec>)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_GPIO_Init+0x304>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001666:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <HAL_GPIO_Init+0x304>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x304>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001690:	4a24      	ldr	r2, [pc, #144]	; (8001724 <HAL_GPIO_Init+0x304>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_GPIO_Init+0x304>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ba:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <HAL_GPIO_Init+0x304>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x304>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e4:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_GPIO_Init+0x304>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3301      	adds	r3, #1
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	2b0f      	cmp	r3, #15
 80016f4:	f67f aea2 	bls.w	800143c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023800 	.word	0x40023800
 800170c:	40013800 	.word	0x40013800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40020800 	.word	0x40020800
 800171c:	40020c00 	.word	0x40020c00
 8001720:	40021000 	.word	0x40021000
 8001724:	40013c00 	.word	0x40013c00

08001728 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
 8001744:	e001      	b.n	800174a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe ffa8 	bl	80006cc <HAL_GPIO_EXTI_Callback>
  }
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40013c00 	.word	0x40013c00

08001788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e267      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d075      	beq.n	8001892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d00c      	beq.n	80017cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d112      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b7e      	ldr	r3, [pc, #504]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d05b      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d157      	bne.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e242      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017ee:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6c      	ldr	r2, [pc, #432]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 8001820:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a68      	ldr	r2, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fc3e 	bl	80010c0 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fc3a 	bl	80010c0 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e207      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xc0>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fc2a 	bl	80010c0 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff fc26 	bl	80010c0 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1f3      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189e:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c7      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b34      	ldr	r3, [pc, #208]	; (80019cc <HAL_RCC_OscConfig+0x244>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff fbdf 	bl	80010c0 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fbdb 	bl	80010c0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1a8      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4925      	ldr	r1, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x244>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fbbe 	bl	80010c0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff fbba 	bl	80010c0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e187      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d036      	beq.n	80019e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x248>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fb9e 	bl	80010c0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff fb9a 	bl	80010c0 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e167      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800199c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x200>
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_OscConfig+0x248>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fb87 	bl	80010c0 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	e00e      	b.n	80019d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fb83 	bl	80010c0 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d907      	bls.n	80019d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e150      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 80019c8:	40023800 	.word	0x40023800
 80019cc:	42470000 	.word	0x42470000
 80019d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ea      	bne.n	80019b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8097 	beq.w	8001b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a7c      	ldr	r2, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b77      	ldr	r3, [pc, #476]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b74      	ldr	r3, [pc, #464]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fb43 	bl	80010c0 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fb3f 	bl	80010c0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e10c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2ea>
 8001a64:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x30c>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a5e      	ldr	r2, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a94:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 0304 	bic.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d015      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fb04 	bl	80010c0 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff fb00 	bl	80010c0 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0cb      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ee      	beq.n	8001abc <HAL_RCC_OscConfig+0x334>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff faee 	bl	80010c0 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff faea 	bl	80010c0 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0b5      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ee      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a1 	beq.w	8001c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d05c      	beq.n	8001bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d141      	bne.n	8001bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fabe 	bl	80010c0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff faba 	bl	80010c0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e087      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa93 	bl	80010c0 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fa8f 	bl	80010c0 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e05c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x416>
 8001bbc:	e054      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fa7c 	bl	80010c0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fa78 	bl	80010c0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e045      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001bea:	e03d      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e038      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x4ec>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d028      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d121      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11a      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90c      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d044      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e067      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7ff f9aa 	bl	80010c0 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff f9a6 	bl	80010c0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f90a 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	080047ac 	.word	0x080047ac
 8001e3c:	20000030 	.word	0x20000030
 8001e40:	20000034 	.word	0x20000034

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e48:	b094      	sub	sp, #80	; 0x50
 8001e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e50:	2300      	movs	r3, #0
 8001e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e54:	2300      	movs	r3, #0
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5c:	4b79      	ldr	r3, [pc, #484]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d00d      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x40>
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	f200 80e1 	bhi.w	8002030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x34>
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e76:	e0db      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b73      	ldr	r3, [pc, #460]	; (8002048 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e7c:	e0db      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e82:	e0d8      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	462b      	mov	r3, r5
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	0159      	lsls	r1, r3, #5
 8001ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec8:	0150      	lsls	r0, r2, #5
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4621      	mov	r1, r4
 8001ed0:	1a51      	subs	r1, r2, r1
 8001ed2:	6139      	str	r1, [r7, #16]
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ee8:	4659      	mov	r1, fp
 8001eea:	018b      	lsls	r3, r1, #6
 8001eec:	4651      	mov	r1, sl
 8001eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef2:	4651      	mov	r1, sl
 8001ef4:	018a      	lsls	r2, r1, #6
 8001ef6:	4651      	mov	r1, sl
 8001ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8001efc:	4659      	mov	r1, fp
 8001efe:	eb63 0901 	sbc.w	r9, r3, r1
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	eb18 0303 	adds.w	r3, r8, r3
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	462b      	mov	r3, r5
 8001f24:	eb49 0303 	adc.w	r3, r9, r3
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f36:	4629      	mov	r1, r5
 8001f38:	024b      	lsls	r3, r1, #9
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f40:	4621      	mov	r1, r4
 8001f42:	024a      	lsls	r2, r1, #9
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f54:	f7fe f99c 	bl	8000290 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f60:	e058      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	464b      	mov	r3, r9
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0159      	lsls	r1, r3, #5
 8001f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f8e:	0150      	lsls	r0, r2, #5
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4641      	mov	r1, r8
 8001f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	00eb      	lsls	r3, r5, #3
 8001fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fca:	00e2      	lsls	r2, r4, #3
 8001fcc:	4614      	mov	r4, r2
 8001fce:	461d      	mov	r5, r3
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	18e3      	adds	r3, r4, r3
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	eb45 0303 	adc.w	r3, r5, r3
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fea:	4629      	mov	r1, r5
 8001fec:	028b      	lsls	r3, r1, #10
 8001fee:	4621      	mov	r1, r4
 8001ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	028a      	lsls	r2, r1, #10
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffe:	2200      	movs	r2, #0
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	61fa      	str	r2, [r7, #28]
 8002004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002008:	f7fe f942 	bl	8000290 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4613      	mov	r3, r2
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	3301      	adds	r3, #1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800202e:	e002      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetSysClockFreq+0x204>)
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002038:	4618      	mov	r0, r3
 800203a:	3750      	adds	r7, #80	; 0x50
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	00f42400 	.word	0x00f42400
 800204c:	007a1200 	.word	0x007a1200

08002050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_RCC_GetHCLKFreq+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000030 	.word	0x20000030

08002068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800206c:	f7ff fff0 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a9b      	lsrs	r3, r3, #10
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4903      	ldr	r1, [pc, #12]	; (800208c <HAL_RCC_GetPCLK1Freq+0x24>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	080047bc 	.word	0x080047bc

08002090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002094:	f7ff ffdc 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0b5b      	lsrs	r3, r3, #13
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	080047bc 	.word	0x080047bc

080020b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10f      	bne.n	80020f0 <HAL_TIM_Base_Stop+0x38>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6a1a      	ldr	r2, [r3, #32]
 80020d6:	f240 4344 	movw	r3, #1092	; 0x444
 80020da:	4013      	ands	r3, r2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_TIM_Base_Stop+0x38>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d001      	beq.n	8002120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e044      	b.n	80021aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d018      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x6c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d013      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x6c>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_TIM_Base_Start_IT+0xb4>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00e      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x6c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d009      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x6c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_TIM_Base_Start_IT+0x6c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d111      	bne.n	8002198 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d010      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	e007      	b.n	80021a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40010000 	.word	0x40010000
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800
 80021c4:	40000c00 	.word	0x40000c00
 80021c8:	40014000 	.word	0x40014000

080021cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e041      	b.n	8002262 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe fd0a 	bl	8000c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f000 fab8 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_TIM_PWM_Start+0x24>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e022      	b.n	80022d6 <HAL_TIM_PWM_Start+0x6a>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d109      	bne.n	80022aa <HAL_TIM_PWM_Start+0x3e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	bf14      	ite	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	2300      	moveq	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	e015      	b.n	80022d6 <HAL_TIM_PWM_Start+0x6a>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d109      	bne.n	80022c4 <HAL_TIM_PWM_Start+0x58>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e008      	b.n	80022d6 <HAL_TIM_PWM_Start+0x6a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e068      	b.n	80023b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_PWM_Start+0x82>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ec:	e013      	b.n	8002316 <HAL_TIM_PWM_Start+0xaa>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_PWM_Start+0x92>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022fc:	e00b      	b.n	8002316 <HAL_TIM_PWM_Start+0xaa>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d104      	bne.n	800230e <HAL_TIM_PWM_Start+0xa2>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	e003      	b.n	8002316 <HAL_TIM_PWM_Start+0xaa>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2201      	movs	r2, #1
 800231c:	6839      	ldr	r1, [r7, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fc46 	bl	8002bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <HAL_TIM_PWM_Start+0x14c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d107      	bne.n	800233e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_TIM_PWM_Start+0x14c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d018      	beq.n	800237a <HAL_TIM_PWM_Start+0x10e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d013      	beq.n	800237a <HAL_TIM_PWM_Start+0x10e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a19      	ldr	r2, [pc, #100]	; (80023bc <HAL_TIM_PWM_Start+0x150>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00e      	beq.n	800237a <HAL_TIM_PWM_Start+0x10e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_TIM_PWM_Start+0x154>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_TIM_PWM_Start+0x10e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_TIM_PWM_Start+0x158>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_TIM_PWM_Start+0x10e>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_TIM_PWM_Start+0x15c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d111      	bne.n	800239e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b06      	cmp	r3, #6
 800238a:	d010      	beq.n	80023ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239c:	e007      	b.n	80023ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40000800 	.word	0x40000800
 80023c4:	40000c00 	.word	0x40000c00
 80023c8:	40014000 	.word	0x40014000

080023cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d020      	beq.n	8002430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01b      	beq.n	8002430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0202 	mvn.w	r2, #2
 8002400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f994 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f986 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f997 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d020      	beq.n	800247c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d01b      	beq.n	800247c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0204 	mvn.w	r2, #4
 800244c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2202      	movs	r2, #2
 8002452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f96e 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 8002468:	e005      	b.n	8002476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f960 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f971 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d020      	beq.n	80024c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01b      	beq.n	80024c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0208 	mvn.w	r2, #8
 8002498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f948 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 80024b4:	e005      	b.n	80024c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f93a 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f94b 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d020      	beq.n	8002514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0210 	mvn.w	r2, #16
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2208      	movs	r2, #8
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f922 	bl	8002744 <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f914 	bl	8002730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f925 	bl	8002758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d007      	beq.n	8002538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0201 	mvn.w	r2, #1
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe f82a 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fbc8 	bl	8002cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d007      	beq.n	8002580 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8f6 	bl	800276c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00c      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d007      	beq.n	80025a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0220 	mvn.w	r2, #32
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fb9a 	bl	8002cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0ae      	b.n	8002728 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	f200 809f 	bhi.w	8002718 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	08002615 	.word	0x08002615
 80025e4:	08002719 	.word	0x08002719
 80025e8:	08002719 	.word	0x08002719
 80025ec:	08002719 	.word	0x08002719
 80025f0:	08002655 	.word	0x08002655
 80025f4:	08002719 	.word	0x08002719
 80025f8:	08002719 	.word	0x08002719
 80025fc:	08002719 	.word	0x08002719
 8002600:	08002697 	.word	0x08002697
 8002604:	08002719 	.word	0x08002719
 8002608:	08002719 	.word	0x08002719
 800260c:	08002719 	.word	0x08002719
 8002610:	080026d7 	.word	0x080026d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	4618      	mov	r0, r3
 800261c:	f000 f93c 	bl	8002898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0208 	orr.w	r2, r2, #8
 800262e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0204 	bic.w	r2, r2, #4
 800263e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6999      	ldr	r1, [r3, #24]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	619a      	str	r2, [r3, #24]
      break;
 8002652:	e064      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f982 	bl	8002964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800266e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6999      	ldr	r1, [r3, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	021a      	lsls	r2, r3, #8
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	619a      	str	r2, [r3, #24]
      break;
 8002694:	e043      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68b9      	ldr	r1, [r7, #8]
 800269c:	4618      	mov	r0, r3
 800269e:	f000 f9cd 	bl	8002a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0208 	orr.w	r2, r2, #8
 80026b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0204 	bic.w	r2, r2, #4
 80026c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	69d9      	ldr	r1, [r3, #28]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	61da      	str	r2, [r3, #28]
      break;
 80026d4:	e023      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 fa17 	bl	8002b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69d9      	ldr	r1, [r3, #28]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	021a      	lsls	r2, r3, #8
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
      break;
 8002716:	e002      	b.n	800271e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	75fb      	strb	r3, [r7, #23]
      break;
 800271c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002726:	7dfb      	ldrb	r3, [r7, #23]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3a      	ldr	r2, [pc, #232]	; (800287c <TIM_Base_SetConfig+0xfc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00f      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a37      	ldr	r2, [pc, #220]	; (8002880 <TIM_Base_SetConfig+0x100>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a36      	ldr	r2, [pc, #216]	; (8002884 <TIM_Base_SetConfig+0x104>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x38>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a35      	ldr	r2, [pc, #212]	; (8002888 <TIM_Base_SetConfig+0x108>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2b      	ldr	r2, [pc, #172]	; (800287c <TIM_Base_SetConfig+0xfc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01b      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d017      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a28      	ldr	r2, [pc, #160]	; (8002880 <TIM_Base_SetConfig+0x100>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d013      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a27      	ldr	r2, [pc, #156]	; (8002884 <TIM_Base_SetConfig+0x104>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00f      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a26      	ldr	r2, [pc, #152]	; (8002888 <TIM_Base_SetConfig+0x108>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00b      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a25      	ldr	r2, [pc, #148]	; (800288c <TIM_Base_SetConfig+0x10c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d007      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a24      	ldr	r2, [pc, #144]	; (8002890 <TIM_Base_SetConfig+0x110>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d003      	beq.n	800280a <TIM_Base_SetConfig+0x8a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a23      	ldr	r2, [pc, #140]	; (8002894 <TIM_Base_SetConfig+0x114>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d108      	bne.n	800281c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002810:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <TIM_Base_SetConfig+0xfc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d103      	bne.n	8002850 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f023 0201 	bic.w	r2, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]
  }
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40010000 	.word	0x40010000
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800
 8002888:	40000c00 	.word	0x40000c00
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800

08002898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f023 0201 	bic.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 0302 	bic.w	r3, r3, #2
 80028e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a1c      	ldr	r2, [pc, #112]	; (8002960 <TIM_OC1_SetConfig+0xc8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d10c      	bne.n	800290e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f023 0308 	bic.w	r3, r3, #8
 80028fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a13      	ldr	r2, [pc, #76]	; (8002960 <TIM_OC1_SetConfig+0xc8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d111      	bne.n	800293a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800291c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	621a      	str	r2, [r3, #32]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40010000 	.word	0x40010000

08002964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	f023 0210 	bic.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0320 	bic.w	r3, r3, #32
 80029ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <TIM_OC2_SetConfig+0xd4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10d      	bne.n	80029e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <TIM_OC2_SetConfig+0xd4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d113      	bne.n	8002a10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000

08002a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d113      	bne.n	8002ae6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40010000 	.word	0x40010000

08002b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <TIM_OC4_SetConfig+0x9c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d109      	bne.n	8002b84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	019b      	lsls	r3, r3, #6
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000

08002bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1a      	ldr	r2, [r3, #32]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	401a      	ands	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	fa01 f303 	lsl.w	r3, r1, r3
 8002be8:	431a      	orrs	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	621a      	str	r2, [r3, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e050      	b.n	8002cb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d018      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d013      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d10c      	bne.n	8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40000800 	.word	0x40000800
 8002cd0:	40000c00 	.word	0x40000c00
 8002cd4:	40014000 	.word	0x40014000

08002cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e042      	b.n	8002d98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe f852 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	; 0x24
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fdff 	bl	8003948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d175      	bne.n	8002eac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_UART_Transmit+0x2c>
 8002dc6:	88fb      	ldrh	r3, [r7, #6]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e06e      	b.n	8002eae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2221      	movs	r2, #33	; 0x21
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dde:	f7fe f96f 	bl	80010c0 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df8:	d108      	bne.n	8002e0c <HAL_UART_Transmit+0x6c>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d104      	bne.n	8002e0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	61bb      	str	r3, [r7, #24]
 8002e0a:	e003      	b.n	8002e14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e14:	e02e      	b.n	8002e74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fb9b 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e03a      	b.n	8002eae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10b      	bne.n	8002e56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	3302      	adds	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	e007      	b.n	8002e66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	781a      	ldrb	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3301      	adds	r3, #1
 8002e64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1cb      	bne.n	8002e16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2140      	movs	r1, #64	; 0x40
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fb67 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e006      	b.n	8002eae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b08a      	sub	sp, #40	; 0x28
 8002eba:	af02      	add	r7, sp, #8
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	f040 8081 	bne.w	8002fda <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d002      	beq.n	8002ee4 <HAL_UART_Receive+0x2e>
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e079      	b.n	8002fdc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2222      	movs	r2, #34	; 0x22
 8002ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002efc:	f7fe f8e0 	bl	80010c0 <HAL_GetTick>
 8002f00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f16:	d108      	bne.n	8002f2a <HAL_UART_Receive+0x74>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d104      	bne.n	8002f2a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e003      	b.n	8002f32 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002f32:	e047      	b.n	8002fc4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fb0c 	bl	800355c <UART_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e042      	b.n	8002fdc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10c      	bne.n	8002f76 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	3302      	adds	r3, #2
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	e01f      	b.n	8002fb6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7e:	d007      	beq.n	8002f90 <HAL_UART_Receive+0xda>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_UART_Receive+0xe8>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e008      	b.n	8002fb0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1b2      	bne.n	8002f34 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
  }
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b0ba      	sub	sp, #232	; 0xe8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003010:	2300      	movs	r3, #0
 8003012:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003022:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_UART_IRQHandler+0x66>
 8003036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303a:	f003 0320 	and.w	r3, r3, #32
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fbc2 	bl	80037cc <UART_Receive_IT>
      return;
 8003048:	e25b      	b.n	8003502 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800304a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80de 	beq.w	8003210 <HAL_UART_IRQHandler+0x22c>
 8003054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d106      	bne.n	800306e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003064:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80d1 	beq.w	8003210 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_UART_IRQHandler+0xae>
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_IRQHandler+0xd2>
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0202 	orr.w	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_UART_IRQHandler+0xf6>
 80030c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f043 0204 	orr.w	r2, r3, #4
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d011      	beq.n	800310a <HAL_UART_IRQHandler+0x126>
 80030e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f043 0208 	orr.w	r2, r3, #8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 81f2 	beq.w	80034f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_UART_IRQHandler+0x14e>
 8003120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fb4d 	bl	80037cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <HAL_UART_IRQHandler+0x17a>
 8003156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d04f      	beq.n	80031fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa55 	bl	800360e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b40      	cmp	r3, #64	; 0x40
 8003170:	d141      	bne.n	80031f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800318c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3314      	adds	r3, #20
 800319a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800319e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1d9      	bne.n	8003172 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d013      	beq.n	80031ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	4a7e      	ldr	r2, [pc, #504]	; (80033c4 <HAL_UART_IRQHandler+0x3e0>)
 80031cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe f901 	bl	80013da <HAL_DMA_Abort_IT>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031e8:	4610      	mov	r0, r2
 80031ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ec:	e00e      	b.n	800320c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f99e 	bl	8003530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f4:	e00a      	b.n	800320c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f99a 	bl	8003530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	e006      	b.n	800320c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f996 	bl	8003530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800320a:	e175      	b.n	80034f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	bf00      	nop
    return;
 800320e:	e173      	b.n	80034f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 814f 	bne.w	80034b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 8148 	beq.w	80034b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 8141 	beq.w	80034b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	f040 80b6 	bne.w	80033c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003268:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8145 	beq.w	80034fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800327a:	429a      	cmp	r2, r3
 800327c:	f080 813e 	bcs.w	80034fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003286:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	f000 8088 	beq.w	80033a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1d9      	bne.n	8003296 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3314      	adds	r3, #20
 8003302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003306:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800330a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800330e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003312:	e841 2300 	strex	r3, r2, [r1]
 8003316:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1e1      	bne.n	80032e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3314      	adds	r3, #20
 8003324:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003328:	e853 3f00 	ldrex	r3, [r3]
 800332c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800332e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003334:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3314      	adds	r3, #20
 800333e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003342:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003344:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003348:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e3      	bne.n	800331e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	330c      	adds	r3, #12
 800336a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003376:	f023 0310 	bic.w	r3, r3, #16
 800337a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003388:	65ba      	str	r2, [r7, #88]	; 0x58
 800338a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800338e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e3      	bne.n	8003364 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd ffaa 	bl	80012fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f8c1 	bl	8003544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033c2:	e09b      	b.n	80034fc <HAL_UART_IRQHandler+0x518>
 80033c4:	080036d5 	.word	0x080036d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 808e 	beq.w	8003500 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8089 	beq.w	8003500 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f8:	e853 3f00 	ldrex	r3, [r3]
 80033fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003400:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003412:	647a      	str	r2, [r7, #68]	; 0x44
 8003414:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003418:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1e3      	bne.n	80033ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	623b      	str	r3, [r7, #32]
   return(result);
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3314      	adds	r3, #20
 8003446:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800344a:	633a      	str	r2, [r7, #48]	; 0x30
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e3      	bne.n	8003426 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	60fb      	str	r3, [r7, #12]
   return(result);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0310 	bic.w	r3, r3, #16
 8003482:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003490:	61fa      	str	r2, [r7, #28]
 8003492:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	617b      	str	r3, [r7, #20]
   return(result);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e3      	bne.n	800346c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f847 	bl	8003544 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034b6:	e023      	b.n	8003500 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <HAL_UART_IRQHandler+0x4f4>
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d003      	beq.n	80034d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f913 	bl	80036fc <UART_Transmit_IT>
    return;
 80034d6:	e014      	b.n	8003502 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_UART_IRQHandler+0x51e>
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f953 	bl	800379c <UART_EndTransmit_IT>
    return;
 80034f6:	e004      	b.n	8003502 <HAL_UART_IRQHandler+0x51e>
    return;
 80034f8:	bf00      	nop
 80034fa:	e002      	b.n	8003502 <HAL_UART_IRQHandler+0x51e>
      return;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <HAL_UART_IRQHandler+0x51e>
      return;
 8003500:	bf00      	nop
  }
}
 8003502:	37e8      	adds	r7, #232	; 0xe8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356c:	e03b      	b.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d037      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fd fda3 	bl	80010c0 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <UART_WaitOnFlagUntilTimeout+0x30>
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e03a      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d023      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d020      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d01d      	beq.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d116      	bne.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f81d 	bl	800360e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2208      	movs	r2, #8
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	429a      	cmp	r2, r3
 8003602:	d0b4      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800360e:	b480      	push	{r7}
 8003610:	b095      	sub	sp, #84	; 0x54
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800362c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003636:	643a      	str	r2, [r7, #64]	; 0x40
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800363c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	61fb      	str	r3, [r7, #28]
   return(result);
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3314      	adds	r3, #20
 8003668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e5      	bne.n	800364a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	2b01      	cmp	r3, #1
 8003684:	d119      	bne.n	80036ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	60bb      	str	r3, [r7, #8]
   return(result);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 0310 	bic.w	r3, r3, #16
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036a6:	61ba      	str	r2, [r7, #24]
 80036a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	613b      	str	r3, [r7, #16]
   return(result);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e5      	bne.n	8003686 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036c8:	bf00      	nop
 80036ca:	3754      	adds	r7, #84	; 0x54
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f7ff ff1e 	bl	8003530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b21      	cmp	r3, #33	; 0x21
 800370e:	d13e      	bne.n	800378e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003718:	d114      	bne.n	8003744 <UART_Transmit_IT+0x48>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d110      	bne.n	8003744 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003736:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]
 8003742:	e008      	b.n	8003756 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	1c59      	adds	r1, r3, #1
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6211      	str	r1, [r2, #32]
 800374e:	781a      	ldrb	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29b      	uxth	r3, r3
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4619      	mov	r1, r3
 8003764:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003778:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003788:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff fea3 	bl	8003508 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08c      	sub	sp, #48	; 0x30
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b22      	cmp	r3, #34	; 0x22
 80037de:	f040 80ae 	bne.w	800393e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ea:	d117      	bne.n	800381c <UART_Receive_IT+0x50>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d113      	bne.n	800381c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800380a:	b29a      	uxth	r2, r3
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
 800381a:	e026      	b.n	800386a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382e:	d007      	beq.n	8003840 <UART_Receive_IT+0x74>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <UART_Receive_IT+0x82>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e008      	b.n	8003860 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800385a:	b2da      	uxtb	r2, r3
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29b      	uxth	r3, r3
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4619      	mov	r1, r3
 8003878:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800387a:	2b00      	cmp	r3, #0
 800387c:	d15d      	bne.n	800393a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0220 	bic.w	r2, r2, #32
 800388c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d135      	bne.n	8003930 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	613b      	str	r3, [r7, #16]
   return(result);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f023 0310 	bic.w	r3, r3, #16
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ea:	623a      	str	r2, [r7, #32]
 80038ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ee:	69f9      	ldr	r1, [r7, #28]
 80038f0:	6a3a      	ldr	r2, [r7, #32]
 80038f2:	e841 2300 	strex	r3, r2, [r1]
 80038f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1e5      	bne.n	80038ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d10a      	bne.n	8003922 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff fe0b 	bl	8003544 <HAL_UARTEx_RxEventCallback>
 800392e:	e002      	b.n	8003936 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fdf3 	bl	800351c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	e002      	b.n	8003940 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3730      	adds	r7, #48	; 0x30
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b0c0      	sub	sp, #256	; 0x100
 800394e:	af00      	add	r7, sp, #0
 8003950:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	68d9      	ldr	r1, [r3, #12]
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	ea40 0301 	orr.w	r3, r0, r1
 8003970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039a0:	f021 010c 	bic.w	r1, r1, #12
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039ae:	430b      	orrs	r3, r1
 80039b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	6999      	ldr	r1, [r3, #24]
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	ea40 0301 	orr.w	r3, r0, r1
 80039ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b8f      	ldr	r3, [pc, #572]	; (8003c14 <UART_SetConfig+0x2cc>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d005      	beq.n	80039e8 <UART_SetConfig+0xa0>
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b8d      	ldr	r3, [pc, #564]	; (8003c18 <UART_SetConfig+0x2d0>)
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d104      	bne.n	80039f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7fe fb52 	bl	8002090 <HAL_RCC_GetPCLK2Freq>
 80039ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039f0:	e003      	b.n	80039fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039f2:	f7fe fb39 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 80039f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a04:	f040 810c 	bne.w	8003c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	1891      	adds	r1, r2, r2
 8003a20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a22:	415b      	adcs	r3, r3
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	eb12 0801 	adds.w	r8, r2, r1
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb43 0901 	adc.w	r9, r3, r1
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a4a:	4690      	mov	r8, r2
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	eb18 0303 	adds.w	r3, r8, r3
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a58:	462b      	mov	r3, r5
 8003a5a:	eb49 0303 	adc.w	r3, r9, r3
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a76:	460b      	mov	r3, r1
 8003a78:	18db      	adds	r3, r3, r3
 8003a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	eb42 0303 	adc.w	r3, r2, r3
 8003a82:	657b      	str	r3, [r7, #84]	; 0x54
 8003a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a8c:	f7fc fc00 	bl	8000290 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003a96:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	011c      	lsls	r4, r3, #4
 8003a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	1891      	adds	r1, r2, r2
 8003ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae0:	4692      	mov	sl, r2
 8003ae2:	469b      	mov	fp, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aee:	464b      	mov	r3, r9
 8003af0:	eb4b 0303 	adc.w	r3, fp, r3
 8003af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	18db      	adds	r3, r3, r3
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
 8003b12:	4613      	mov	r3, r2
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b22:	f7fc fbb5 	bl	8000290 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2264      	movs	r2, #100	; 0x64
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	1acb      	subs	r3, r1, r3
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003b44:	fba3 2302 	umull	r2, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b50:	441c      	add	r4, r3
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b74:	4641      	mov	r1, r8
 8003b76:	1851      	adds	r1, r2, r1
 8003b78:	6339      	str	r1, [r7, #48]	; 0x30
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	414b      	adcs	r3, r1
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	00cb      	lsls	r3, r1, #3
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b96:	4651      	mov	r1, sl
 8003b98:	00ca      	lsls	r2, r1, #3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba8:	464b      	mov	r3, r9
 8003baa:	460a      	mov	r2, r1
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bc8:	460b      	mov	r3, r1
 8003bca:	18db      	adds	r3, r3, r3
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	4613      	mov	r3, r2
 8003bd0:	eb42 0303 	adc.w	r3, r2, r3
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bde:	f7fc fb57 	bl	8000290 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 0207 	and.w	r2, r3, #7
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4422      	add	r2, r4
 8003c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c10:	e106      	b.n	8003e20 <UART_SetConfig+0x4d8>
 8003c12:	bf00      	nop
 8003c14:	40011000 	.word	0x40011000
 8003c18:	40011400 	.word	0x40011400
 8003c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c32:	4642      	mov	r2, r8
 8003c34:	464b      	mov	r3, r9
 8003c36:	1891      	adds	r1, r2, r2
 8003c38:	6239      	str	r1, [r7, #32]
 8003c3a:	415b      	adcs	r3, r3
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c42:	4641      	mov	r1, r8
 8003c44:	1854      	adds	r4, r2, r1
 8003c46:	4649      	mov	r1, r9
 8003c48:	eb43 0501 	adc.w	r5, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	00eb      	lsls	r3, r5, #3
 8003c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5a:	00e2      	lsls	r2, r4, #3
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	461d      	mov	r5, r3
 8003c60:	4643      	mov	r3, r8
 8003c62:	18e3      	adds	r3, r4, r3
 8003c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c68:	464b      	mov	r3, r9
 8003c6a:	eb45 0303 	adc.w	r3, r5, r3
 8003c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c8e:	4629      	mov	r1, r5
 8003c90:	008b      	lsls	r3, r1, #2
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c98:	4621      	mov	r1, r4
 8003c9a:	008a      	lsls	r2, r1, #2
 8003c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ca0:	f7fc faf6 	bl	8000290 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003caa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	011c      	lsls	r4, r3, #4
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	61b9      	str	r1, [r7, #24]
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	1851      	adds	r1, r2, r1
 8003cd8:	6139      	str	r1, [r7, #16]
 8003cda:	4649      	mov	r1, r9
 8003cdc:	414b      	adcs	r3, r1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cec:	4659      	mov	r1, fp
 8003cee:	00cb      	lsls	r3, r1, #3
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	00ca      	lsls	r2, r1, #3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4642      	mov	r2, r8
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d08:	464b      	mov	r3, r9
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	008b      	lsls	r3, r1, #2
 8003d30:	4641      	mov	r1, r8
 8003d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d36:	4641      	mov	r1, r8
 8003d38:	008a      	lsls	r2, r1, #2
 8003d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d3e:	f7fc faa7 	bl	8000290 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2264      	movs	r2, #100	; 0x64
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	1acb      	subs	r3, r1, r3
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	3332      	adds	r3, #50	; 0x32
 8003d5c:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d68:	441c      	add	r4, r3
 8003d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6e:	2200      	movs	r2, #0
 8003d70:	673b      	str	r3, [r7, #112]	; 0x70
 8003d72:	677a      	str	r2, [r7, #116]	; 0x74
 8003d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	415b      	adcs	r3, r3
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dba:	464b      	mov	r3, r9
 8003dbc:	460a      	mov	r2, r1
 8003dbe:	eb42 0303 	adc.w	r3, r2, r3
 8003dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dce:	667a      	str	r2, [r7, #100]	; 0x64
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ddc:	4649      	mov	r1, r9
 8003dde:	008b      	lsls	r3, r1, #2
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de6:	4641      	mov	r1, r8
 8003de8:	008a      	lsls	r2, r1, #2
 8003dea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dee:	f7fc fa4f 	bl	8000290 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003df8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	2164      	movs	r1, #100	; 0x64
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	3332      	adds	r3, #50	; 0x32
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4422      	add	r2, r4
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e26:	46bd      	mov	sp, r7
 8003e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2c:	51eb851f 	.word	0x51eb851f

08003e30 <siprintf>:
 8003e30:	b40e      	push	{r1, r2, r3}
 8003e32:	b500      	push	{lr}
 8003e34:	b09c      	sub	sp, #112	; 0x70
 8003e36:	ab1d      	add	r3, sp, #116	; 0x74
 8003e38:	9002      	str	r0, [sp, #8]
 8003e3a:	9006      	str	r0, [sp, #24]
 8003e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e40:	4809      	ldr	r0, [pc, #36]	; (8003e68 <siprintf+0x38>)
 8003e42:	9107      	str	r1, [sp, #28]
 8003e44:	9104      	str	r1, [sp, #16]
 8003e46:	4909      	ldr	r1, [pc, #36]	; (8003e6c <siprintf+0x3c>)
 8003e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e4c:	9105      	str	r1, [sp, #20]
 8003e4e:	6800      	ldr	r0, [r0, #0]
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	a902      	add	r1, sp, #8
 8003e54:	f000 f992 	bl	800417c <_svfiprintf_r>
 8003e58:	9b02      	ldr	r3, [sp, #8]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
 8003e5e:	b01c      	add	sp, #112	; 0x70
 8003e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e64:	b003      	add	sp, #12
 8003e66:	4770      	bx	lr
 8003e68:	20000088 	.word	0x20000088
 8003e6c:	ffff0208 	.word	0xffff0208

08003e70 <memset>:
 8003e70:	4402      	add	r2, r0
 8003e72:	4603      	mov	r3, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <__errno>:
 8003e80:	4b01      	ldr	r3, [pc, #4]	; (8003e88 <__errno+0x8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000088 	.word	0x20000088

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4d0d      	ldr	r5, [pc, #52]	; (8003ec4 <__libc_init_array+0x38>)
 8003e90:	4c0d      	ldr	r4, [pc, #52]	; (8003ec8 <__libc_init_array+0x3c>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	2600      	movs	r6, #0
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	4d0b      	ldr	r5, [pc, #44]	; (8003ecc <__libc_init_array+0x40>)
 8003e9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ed0 <__libc_init_array+0x44>)
 8003ea0:	f000 fc6a 	bl	8004778 <_init>
 8003ea4:	1b64      	subs	r4, r4, r5
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08004800 	.word	0x08004800
 8003ec8:	08004800 	.word	0x08004800
 8003ecc:	08004800 	.word	0x08004800
 8003ed0:	08004804 	.word	0x08004804

08003ed4 <__retarget_lock_acquire_recursive>:
 8003ed4:	4770      	bx	lr

08003ed6 <__retarget_lock_release_recursive>:
 8003ed6:	4770      	bx	lr

08003ed8 <_free_r>:
 8003ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003eda:	2900      	cmp	r1, #0
 8003edc:	d044      	beq.n	8003f68 <_free_r+0x90>
 8003ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee2:	9001      	str	r0, [sp, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8003eea:	bfb8      	it	lt
 8003eec:	18e4      	addlt	r4, r4, r3
 8003eee:	f000 f8df 	bl	80040b0 <__malloc_lock>
 8003ef2:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <_free_r+0x94>)
 8003ef4:	9801      	ldr	r0, [sp, #4]
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	b933      	cbnz	r3, 8003f08 <_free_r+0x30>
 8003efa:	6063      	str	r3, [r4, #4]
 8003efc:	6014      	str	r4, [r2, #0]
 8003efe:	b003      	add	sp, #12
 8003f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f04:	f000 b8da 	b.w	80040bc <__malloc_unlock>
 8003f08:	42a3      	cmp	r3, r4
 8003f0a:	d908      	bls.n	8003f1e <_free_r+0x46>
 8003f0c:	6825      	ldr	r5, [r4, #0]
 8003f0e:	1961      	adds	r1, r4, r5
 8003f10:	428b      	cmp	r3, r1
 8003f12:	bf01      	itttt	eq
 8003f14:	6819      	ldreq	r1, [r3, #0]
 8003f16:	685b      	ldreq	r3, [r3, #4]
 8003f18:	1949      	addeq	r1, r1, r5
 8003f1a:	6021      	streq	r1, [r4, #0]
 8003f1c:	e7ed      	b.n	8003efa <_free_r+0x22>
 8003f1e:	461a      	mov	r2, r3
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	b10b      	cbz	r3, 8003f28 <_free_r+0x50>
 8003f24:	42a3      	cmp	r3, r4
 8003f26:	d9fa      	bls.n	8003f1e <_free_r+0x46>
 8003f28:	6811      	ldr	r1, [r2, #0]
 8003f2a:	1855      	adds	r5, r2, r1
 8003f2c:	42a5      	cmp	r5, r4
 8003f2e:	d10b      	bne.n	8003f48 <_free_r+0x70>
 8003f30:	6824      	ldr	r4, [r4, #0]
 8003f32:	4421      	add	r1, r4
 8003f34:	1854      	adds	r4, r2, r1
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	6011      	str	r1, [r2, #0]
 8003f3a:	d1e0      	bne.n	8003efe <_free_r+0x26>
 8003f3c:	681c      	ldr	r4, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	6053      	str	r3, [r2, #4]
 8003f42:	440c      	add	r4, r1
 8003f44:	6014      	str	r4, [r2, #0]
 8003f46:	e7da      	b.n	8003efe <_free_r+0x26>
 8003f48:	d902      	bls.n	8003f50 <_free_r+0x78>
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	6003      	str	r3, [r0, #0]
 8003f4e:	e7d6      	b.n	8003efe <_free_r+0x26>
 8003f50:	6825      	ldr	r5, [r4, #0]
 8003f52:	1961      	adds	r1, r4, r5
 8003f54:	428b      	cmp	r3, r1
 8003f56:	bf04      	itt	eq
 8003f58:	6819      	ldreq	r1, [r3, #0]
 8003f5a:	685b      	ldreq	r3, [r3, #4]
 8003f5c:	6063      	str	r3, [r4, #4]
 8003f5e:	bf04      	itt	eq
 8003f60:	1949      	addeq	r1, r1, r5
 8003f62:	6021      	streq	r1, [r4, #0]
 8003f64:	6054      	str	r4, [r2, #4]
 8003f66:	e7ca      	b.n	8003efe <_free_r+0x26>
 8003f68:	b003      	add	sp, #12
 8003f6a:	bd30      	pop	{r4, r5, pc}
 8003f6c:	20000318 	.word	0x20000318

08003f70 <sbrk_aligned>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	4e0e      	ldr	r6, [pc, #56]	; (8003fac <sbrk_aligned+0x3c>)
 8003f74:	460c      	mov	r4, r1
 8003f76:	6831      	ldr	r1, [r6, #0]
 8003f78:	4605      	mov	r5, r0
 8003f7a:	b911      	cbnz	r1, 8003f82 <sbrk_aligned+0x12>
 8003f7c:	f000 fba6 	bl	80046cc <_sbrk_r>
 8003f80:	6030      	str	r0, [r6, #0]
 8003f82:	4621      	mov	r1, r4
 8003f84:	4628      	mov	r0, r5
 8003f86:	f000 fba1 	bl	80046cc <_sbrk_r>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	d00a      	beq.n	8003fa4 <sbrk_aligned+0x34>
 8003f8e:	1cc4      	adds	r4, r0, #3
 8003f90:	f024 0403 	bic.w	r4, r4, #3
 8003f94:	42a0      	cmp	r0, r4
 8003f96:	d007      	beq.n	8003fa8 <sbrk_aligned+0x38>
 8003f98:	1a21      	subs	r1, r4, r0
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f000 fb96 	bl	80046cc <_sbrk_r>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d101      	bne.n	8003fa8 <sbrk_aligned+0x38>
 8003fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8003fa8:	4620      	mov	r0, r4
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	2000031c 	.word	0x2000031c

08003fb0 <_malloc_r>:
 8003fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb4:	1ccd      	adds	r5, r1, #3
 8003fb6:	f025 0503 	bic.w	r5, r5, #3
 8003fba:	3508      	adds	r5, #8
 8003fbc:	2d0c      	cmp	r5, #12
 8003fbe:	bf38      	it	cc
 8003fc0:	250c      	movcc	r5, #12
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	4607      	mov	r7, r0
 8003fc6:	db01      	blt.n	8003fcc <_malloc_r+0x1c>
 8003fc8:	42a9      	cmp	r1, r5
 8003fca:	d905      	bls.n	8003fd8 <_malloc_r+0x28>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	2600      	movs	r6, #0
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80040ac <_malloc_r+0xfc>
 8003fdc:	f000 f868 	bl	80040b0 <__malloc_lock>
 8003fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe4:	461c      	mov	r4, r3
 8003fe6:	bb5c      	cbnz	r4, 8004040 <_malloc_r+0x90>
 8003fe8:	4629      	mov	r1, r5
 8003fea:	4638      	mov	r0, r7
 8003fec:	f7ff ffc0 	bl	8003f70 <sbrk_aligned>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	d155      	bne.n	80040a2 <_malloc_r+0xf2>
 8003ff6:	f8d8 4000 	ldr.w	r4, [r8]
 8003ffa:	4626      	mov	r6, r4
 8003ffc:	2e00      	cmp	r6, #0
 8003ffe:	d145      	bne.n	800408c <_malloc_r+0xdc>
 8004000:	2c00      	cmp	r4, #0
 8004002:	d048      	beq.n	8004096 <_malloc_r+0xe6>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	4631      	mov	r1, r6
 8004008:	4638      	mov	r0, r7
 800400a:	eb04 0903 	add.w	r9, r4, r3
 800400e:	f000 fb5d 	bl	80046cc <_sbrk_r>
 8004012:	4581      	cmp	r9, r0
 8004014:	d13f      	bne.n	8004096 <_malloc_r+0xe6>
 8004016:	6821      	ldr	r1, [r4, #0]
 8004018:	1a6d      	subs	r5, r5, r1
 800401a:	4629      	mov	r1, r5
 800401c:	4638      	mov	r0, r7
 800401e:	f7ff ffa7 	bl	8003f70 <sbrk_aligned>
 8004022:	3001      	adds	r0, #1
 8004024:	d037      	beq.n	8004096 <_malloc_r+0xe6>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	442b      	add	r3, r5
 800402a:	6023      	str	r3, [r4, #0]
 800402c:	f8d8 3000 	ldr.w	r3, [r8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d038      	beq.n	80040a6 <_malloc_r+0xf6>
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	42a2      	cmp	r2, r4
 8004038:	d12b      	bne.n	8004092 <_malloc_r+0xe2>
 800403a:	2200      	movs	r2, #0
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	e00f      	b.n	8004060 <_malloc_r+0xb0>
 8004040:	6822      	ldr	r2, [r4, #0]
 8004042:	1b52      	subs	r2, r2, r5
 8004044:	d41f      	bmi.n	8004086 <_malloc_r+0xd6>
 8004046:	2a0b      	cmp	r2, #11
 8004048:	d917      	bls.n	800407a <_malloc_r+0xca>
 800404a:	1961      	adds	r1, r4, r5
 800404c:	42a3      	cmp	r3, r4
 800404e:	6025      	str	r5, [r4, #0]
 8004050:	bf18      	it	ne
 8004052:	6059      	strne	r1, [r3, #4]
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	bf08      	it	eq
 8004058:	f8c8 1000 	streq.w	r1, [r8]
 800405c:	5162      	str	r2, [r4, r5]
 800405e:	604b      	str	r3, [r1, #4]
 8004060:	4638      	mov	r0, r7
 8004062:	f104 060b 	add.w	r6, r4, #11
 8004066:	f000 f829 	bl	80040bc <__malloc_unlock>
 800406a:	f026 0607 	bic.w	r6, r6, #7
 800406e:	1d23      	adds	r3, r4, #4
 8004070:	1af2      	subs	r2, r6, r3
 8004072:	d0ae      	beq.n	8003fd2 <_malloc_r+0x22>
 8004074:	1b9b      	subs	r3, r3, r6
 8004076:	50a3      	str	r3, [r4, r2]
 8004078:	e7ab      	b.n	8003fd2 <_malloc_r+0x22>
 800407a:	42a3      	cmp	r3, r4
 800407c:	6862      	ldr	r2, [r4, #4]
 800407e:	d1dd      	bne.n	800403c <_malloc_r+0x8c>
 8004080:	f8c8 2000 	str.w	r2, [r8]
 8004084:	e7ec      	b.n	8004060 <_malloc_r+0xb0>
 8004086:	4623      	mov	r3, r4
 8004088:	6864      	ldr	r4, [r4, #4]
 800408a:	e7ac      	b.n	8003fe6 <_malloc_r+0x36>
 800408c:	4634      	mov	r4, r6
 800408e:	6876      	ldr	r6, [r6, #4]
 8004090:	e7b4      	b.n	8003ffc <_malloc_r+0x4c>
 8004092:	4613      	mov	r3, r2
 8004094:	e7cc      	b.n	8004030 <_malloc_r+0x80>
 8004096:	230c      	movs	r3, #12
 8004098:	603b      	str	r3, [r7, #0]
 800409a:	4638      	mov	r0, r7
 800409c:	f000 f80e 	bl	80040bc <__malloc_unlock>
 80040a0:	e797      	b.n	8003fd2 <_malloc_r+0x22>
 80040a2:	6025      	str	r5, [r4, #0]
 80040a4:	e7dc      	b.n	8004060 <_malloc_r+0xb0>
 80040a6:	605b      	str	r3, [r3, #4]
 80040a8:	deff      	udf	#255	; 0xff
 80040aa:	bf00      	nop
 80040ac:	20000318 	.word	0x20000318

080040b0 <__malloc_lock>:
 80040b0:	4801      	ldr	r0, [pc, #4]	; (80040b8 <__malloc_lock+0x8>)
 80040b2:	f7ff bf0f 	b.w	8003ed4 <__retarget_lock_acquire_recursive>
 80040b6:	bf00      	nop
 80040b8:	20000314 	.word	0x20000314

080040bc <__malloc_unlock>:
 80040bc:	4801      	ldr	r0, [pc, #4]	; (80040c4 <__malloc_unlock+0x8>)
 80040be:	f7ff bf0a 	b.w	8003ed6 <__retarget_lock_release_recursive>
 80040c2:	bf00      	nop
 80040c4:	20000314 	.word	0x20000314

080040c8 <__ssputs_r>:
 80040c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	688e      	ldr	r6, [r1, #8]
 80040ce:	461f      	mov	r7, r3
 80040d0:	42be      	cmp	r6, r7
 80040d2:	680b      	ldr	r3, [r1, #0]
 80040d4:	4682      	mov	sl, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	4690      	mov	r8, r2
 80040da:	d82c      	bhi.n	8004136 <__ssputs_r+0x6e>
 80040dc:	898a      	ldrh	r2, [r1, #12]
 80040de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040e2:	d026      	beq.n	8004132 <__ssputs_r+0x6a>
 80040e4:	6965      	ldr	r5, [r4, #20]
 80040e6:	6909      	ldr	r1, [r1, #16]
 80040e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ec:	eba3 0901 	sub.w	r9, r3, r1
 80040f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040f4:	1c7b      	adds	r3, r7, #1
 80040f6:	444b      	add	r3, r9
 80040f8:	106d      	asrs	r5, r5, #1
 80040fa:	429d      	cmp	r5, r3
 80040fc:	bf38      	it	cc
 80040fe:	461d      	movcc	r5, r3
 8004100:	0553      	lsls	r3, r2, #21
 8004102:	d527      	bpl.n	8004154 <__ssputs_r+0x8c>
 8004104:	4629      	mov	r1, r5
 8004106:	f7ff ff53 	bl	8003fb0 <_malloc_r>
 800410a:	4606      	mov	r6, r0
 800410c:	b360      	cbz	r0, 8004168 <__ssputs_r+0xa0>
 800410e:	6921      	ldr	r1, [r4, #16]
 8004110:	464a      	mov	r2, r9
 8004112:	f000 faeb 	bl	80046ec <memcpy>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800411c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	6126      	str	r6, [r4, #16]
 8004124:	6165      	str	r5, [r4, #20]
 8004126:	444e      	add	r6, r9
 8004128:	eba5 0509 	sub.w	r5, r5, r9
 800412c:	6026      	str	r6, [r4, #0]
 800412e:	60a5      	str	r5, [r4, #8]
 8004130:	463e      	mov	r6, r7
 8004132:	42be      	cmp	r6, r7
 8004134:	d900      	bls.n	8004138 <__ssputs_r+0x70>
 8004136:	463e      	mov	r6, r7
 8004138:	6820      	ldr	r0, [r4, #0]
 800413a:	4632      	mov	r2, r6
 800413c:	4641      	mov	r1, r8
 800413e:	f000 faab 	bl	8004698 <memmove>
 8004142:	68a3      	ldr	r3, [r4, #8]
 8004144:	1b9b      	subs	r3, r3, r6
 8004146:	60a3      	str	r3, [r4, #8]
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	4433      	add	r3, r6
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	2000      	movs	r0, #0
 8004150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004154:	462a      	mov	r2, r5
 8004156:	f000 fad7 	bl	8004708 <_realloc_r>
 800415a:	4606      	mov	r6, r0
 800415c:	2800      	cmp	r0, #0
 800415e:	d1e0      	bne.n	8004122 <__ssputs_r+0x5a>
 8004160:	6921      	ldr	r1, [r4, #16]
 8004162:	4650      	mov	r0, sl
 8004164:	f7ff feb8 	bl	8003ed8 <_free_r>
 8004168:	230c      	movs	r3, #12
 800416a:	f8ca 3000 	str.w	r3, [sl]
 800416e:	89a3      	ldrh	r3, [r4, #12]
 8004170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004174:	81a3      	strh	r3, [r4, #12]
 8004176:	f04f 30ff 	mov.w	r0, #4294967295
 800417a:	e7e9      	b.n	8004150 <__ssputs_r+0x88>

0800417c <_svfiprintf_r>:
 800417c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004180:	4698      	mov	r8, r3
 8004182:	898b      	ldrh	r3, [r1, #12]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	b09d      	sub	sp, #116	; 0x74
 8004188:	4607      	mov	r7, r0
 800418a:	460d      	mov	r5, r1
 800418c:	4614      	mov	r4, r2
 800418e:	d50e      	bpl.n	80041ae <_svfiprintf_r+0x32>
 8004190:	690b      	ldr	r3, [r1, #16]
 8004192:	b963      	cbnz	r3, 80041ae <_svfiprintf_r+0x32>
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	f7ff ff0b 	bl	8003fb0 <_malloc_r>
 800419a:	6028      	str	r0, [r5, #0]
 800419c:	6128      	str	r0, [r5, #16]
 800419e:	b920      	cbnz	r0, 80041aa <_svfiprintf_r+0x2e>
 80041a0:	230c      	movs	r3, #12
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	f04f 30ff 	mov.w	r0, #4294967295
 80041a8:	e0d0      	b.n	800434c <_svfiprintf_r+0x1d0>
 80041aa:	2340      	movs	r3, #64	; 0x40
 80041ac:	616b      	str	r3, [r5, #20]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9309      	str	r3, [sp, #36]	; 0x24
 80041b2:	2320      	movs	r3, #32
 80041b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80041bc:	2330      	movs	r3, #48	; 0x30
 80041be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004364 <_svfiprintf_r+0x1e8>
 80041c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041c6:	f04f 0901 	mov.w	r9, #1
 80041ca:	4623      	mov	r3, r4
 80041cc:	469a      	mov	sl, r3
 80041ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041d2:	b10a      	cbz	r2, 80041d8 <_svfiprintf_r+0x5c>
 80041d4:	2a25      	cmp	r2, #37	; 0x25
 80041d6:	d1f9      	bne.n	80041cc <_svfiprintf_r+0x50>
 80041d8:	ebba 0b04 	subs.w	fp, sl, r4
 80041dc:	d00b      	beq.n	80041f6 <_svfiprintf_r+0x7a>
 80041de:	465b      	mov	r3, fp
 80041e0:	4622      	mov	r2, r4
 80041e2:	4629      	mov	r1, r5
 80041e4:	4638      	mov	r0, r7
 80041e6:	f7ff ff6f 	bl	80040c8 <__ssputs_r>
 80041ea:	3001      	adds	r0, #1
 80041ec:	f000 80a9 	beq.w	8004342 <_svfiprintf_r+0x1c6>
 80041f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041f2:	445a      	add	r2, fp
 80041f4:	9209      	str	r2, [sp, #36]	; 0x24
 80041f6:	f89a 3000 	ldrb.w	r3, [sl]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 80a1 	beq.w	8004342 <_svfiprintf_r+0x1c6>
 8004200:	2300      	movs	r3, #0
 8004202:	f04f 32ff 	mov.w	r2, #4294967295
 8004206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800420a:	f10a 0a01 	add.w	sl, sl, #1
 800420e:	9304      	str	r3, [sp, #16]
 8004210:	9307      	str	r3, [sp, #28]
 8004212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004216:	931a      	str	r3, [sp, #104]	; 0x68
 8004218:	4654      	mov	r4, sl
 800421a:	2205      	movs	r2, #5
 800421c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004220:	4850      	ldr	r0, [pc, #320]	; (8004364 <_svfiprintf_r+0x1e8>)
 8004222:	f7fb ffe5 	bl	80001f0 <memchr>
 8004226:	9a04      	ldr	r2, [sp, #16]
 8004228:	b9d8      	cbnz	r0, 8004262 <_svfiprintf_r+0xe6>
 800422a:	06d0      	lsls	r0, r2, #27
 800422c:	bf44      	itt	mi
 800422e:	2320      	movmi	r3, #32
 8004230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004234:	0711      	lsls	r1, r2, #28
 8004236:	bf44      	itt	mi
 8004238:	232b      	movmi	r3, #43	; 0x2b
 800423a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800423e:	f89a 3000 	ldrb.w	r3, [sl]
 8004242:	2b2a      	cmp	r3, #42	; 0x2a
 8004244:	d015      	beq.n	8004272 <_svfiprintf_r+0xf6>
 8004246:	9a07      	ldr	r2, [sp, #28]
 8004248:	4654      	mov	r4, sl
 800424a:	2000      	movs	r0, #0
 800424c:	f04f 0c0a 	mov.w	ip, #10
 8004250:	4621      	mov	r1, r4
 8004252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004256:	3b30      	subs	r3, #48	; 0x30
 8004258:	2b09      	cmp	r3, #9
 800425a:	d94d      	bls.n	80042f8 <_svfiprintf_r+0x17c>
 800425c:	b1b0      	cbz	r0, 800428c <_svfiprintf_r+0x110>
 800425e:	9207      	str	r2, [sp, #28]
 8004260:	e014      	b.n	800428c <_svfiprintf_r+0x110>
 8004262:	eba0 0308 	sub.w	r3, r0, r8
 8004266:	fa09 f303 	lsl.w	r3, r9, r3
 800426a:	4313      	orrs	r3, r2
 800426c:	9304      	str	r3, [sp, #16]
 800426e:	46a2      	mov	sl, r4
 8004270:	e7d2      	b.n	8004218 <_svfiprintf_r+0x9c>
 8004272:	9b03      	ldr	r3, [sp, #12]
 8004274:	1d19      	adds	r1, r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	9103      	str	r1, [sp, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	bfbb      	ittet	lt
 800427e:	425b      	neglt	r3, r3
 8004280:	f042 0202 	orrlt.w	r2, r2, #2
 8004284:	9307      	strge	r3, [sp, #28]
 8004286:	9307      	strlt	r3, [sp, #28]
 8004288:	bfb8      	it	lt
 800428a:	9204      	strlt	r2, [sp, #16]
 800428c:	7823      	ldrb	r3, [r4, #0]
 800428e:	2b2e      	cmp	r3, #46	; 0x2e
 8004290:	d10c      	bne.n	80042ac <_svfiprintf_r+0x130>
 8004292:	7863      	ldrb	r3, [r4, #1]
 8004294:	2b2a      	cmp	r3, #42	; 0x2a
 8004296:	d134      	bne.n	8004302 <_svfiprintf_r+0x186>
 8004298:	9b03      	ldr	r3, [sp, #12]
 800429a:	1d1a      	adds	r2, r3, #4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	9203      	str	r2, [sp, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bfb8      	it	lt
 80042a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042a8:	3402      	adds	r4, #2
 80042aa:	9305      	str	r3, [sp, #20]
 80042ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004374 <_svfiprintf_r+0x1f8>
 80042b0:	7821      	ldrb	r1, [r4, #0]
 80042b2:	2203      	movs	r2, #3
 80042b4:	4650      	mov	r0, sl
 80042b6:	f7fb ff9b 	bl	80001f0 <memchr>
 80042ba:	b138      	cbz	r0, 80042cc <_svfiprintf_r+0x150>
 80042bc:	9b04      	ldr	r3, [sp, #16]
 80042be:	eba0 000a 	sub.w	r0, r0, sl
 80042c2:	2240      	movs	r2, #64	; 0x40
 80042c4:	4082      	lsls	r2, r0
 80042c6:	4313      	orrs	r3, r2
 80042c8:	3401      	adds	r4, #1
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042d0:	4825      	ldr	r0, [pc, #148]	; (8004368 <_svfiprintf_r+0x1ec>)
 80042d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042d6:	2206      	movs	r2, #6
 80042d8:	f7fb ff8a 	bl	80001f0 <memchr>
 80042dc:	2800      	cmp	r0, #0
 80042de:	d038      	beq.n	8004352 <_svfiprintf_r+0x1d6>
 80042e0:	4b22      	ldr	r3, [pc, #136]	; (800436c <_svfiprintf_r+0x1f0>)
 80042e2:	bb1b      	cbnz	r3, 800432c <_svfiprintf_r+0x1b0>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	3307      	adds	r3, #7
 80042e8:	f023 0307 	bic.w	r3, r3, #7
 80042ec:	3308      	adds	r3, #8
 80042ee:	9303      	str	r3, [sp, #12]
 80042f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042f2:	4433      	add	r3, r6
 80042f4:	9309      	str	r3, [sp, #36]	; 0x24
 80042f6:	e768      	b.n	80041ca <_svfiprintf_r+0x4e>
 80042f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042fc:	460c      	mov	r4, r1
 80042fe:	2001      	movs	r0, #1
 8004300:	e7a6      	b.n	8004250 <_svfiprintf_r+0xd4>
 8004302:	2300      	movs	r3, #0
 8004304:	3401      	adds	r4, #1
 8004306:	9305      	str	r3, [sp, #20]
 8004308:	4619      	mov	r1, r3
 800430a:	f04f 0c0a 	mov.w	ip, #10
 800430e:	4620      	mov	r0, r4
 8004310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004314:	3a30      	subs	r2, #48	; 0x30
 8004316:	2a09      	cmp	r2, #9
 8004318:	d903      	bls.n	8004322 <_svfiprintf_r+0x1a6>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0c6      	beq.n	80042ac <_svfiprintf_r+0x130>
 800431e:	9105      	str	r1, [sp, #20]
 8004320:	e7c4      	b.n	80042ac <_svfiprintf_r+0x130>
 8004322:	fb0c 2101 	mla	r1, ip, r1, r2
 8004326:	4604      	mov	r4, r0
 8004328:	2301      	movs	r3, #1
 800432a:	e7f0      	b.n	800430e <_svfiprintf_r+0x192>
 800432c:	ab03      	add	r3, sp, #12
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	462a      	mov	r2, r5
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <_svfiprintf_r+0x1f4>)
 8004334:	a904      	add	r1, sp, #16
 8004336:	4638      	mov	r0, r7
 8004338:	f3af 8000 	nop.w
 800433c:	1c42      	adds	r2, r0, #1
 800433e:	4606      	mov	r6, r0
 8004340:	d1d6      	bne.n	80042f0 <_svfiprintf_r+0x174>
 8004342:	89ab      	ldrh	r3, [r5, #12]
 8004344:	065b      	lsls	r3, r3, #25
 8004346:	f53f af2d 	bmi.w	80041a4 <_svfiprintf_r+0x28>
 800434a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800434c:	b01d      	add	sp, #116	; 0x74
 800434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004352:	ab03      	add	r3, sp, #12
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	462a      	mov	r2, r5
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <_svfiprintf_r+0x1f4>)
 800435a:	a904      	add	r1, sp, #16
 800435c:	4638      	mov	r0, r7
 800435e:	f000 f879 	bl	8004454 <_printf_i>
 8004362:	e7eb      	b.n	800433c <_svfiprintf_r+0x1c0>
 8004364:	080047c4 	.word	0x080047c4
 8004368:	080047ce 	.word	0x080047ce
 800436c:	00000000 	.word	0x00000000
 8004370:	080040c9 	.word	0x080040c9
 8004374:	080047ca 	.word	0x080047ca

08004378 <_printf_common>:
 8004378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	4616      	mov	r6, r2
 800437e:	4699      	mov	r9, r3
 8004380:	688a      	ldr	r2, [r1, #8]
 8004382:	690b      	ldr	r3, [r1, #16]
 8004384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004388:	4293      	cmp	r3, r2
 800438a:	bfb8      	it	lt
 800438c:	4613      	movlt	r3, r2
 800438e:	6033      	str	r3, [r6, #0]
 8004390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004394:	4607      	mov	r7, r0
 8004396:	460c      	mov	r4, r1
 8004398:	b10a      	cbz	r2, 800439e <_printf_common+0x26>
 800439a:	3301      	adds	r3, #1
 800439c:	6033      	str	r3, [r6, #0]
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	0699      	lsls	r1, r3, #26
 80043a2:	bf42      	ittt	mi
 80043a4:	6833      	ldrmi	r3, [r6, #0]
 80043a6:	3302      	addmi	r3, #2
 80043a8:	6033      	strmi	r3, [r6, #0]
 80043aa:	6825      	ldr	r5, [r4, #0]
 80043ac:	f015 0506 	ands.w	r5, r5, #6
 80043b0:	d106      	bne.n	80043c0 <_printf_common+0x48>
 80043b2:	f104 0a19 	add.w	sl, r4, #25
 80043b6:	68e3      	ldr	r3, [r4, #12]
 80043b8:	6832      	ldr	r2, [r6, #0]
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	42ab      	cmp	r3, r5
 80043be:	dc26      	bgt.n	800440e <_printf_common+0x96>
 80043c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043c4:	1e13      	subs	r3, r2, #0
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	bf18      	it	ne
 80043ca:	2301      	movne	r3, #1
 80043cc:	0692      	lsls	r2, r2, #26
 80043ce:	d42b      	bmi.n	8004428 <_printf_common+0xb0>
 80043d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043d4:	4649      	mov	r1, r9
 80043d6:	4638      	mov	r0, r7
 80043d8:	47c0      	blx	r8
 80043da:	3001      	adds	r0, #1
 80043dc:	d01e      	beq.n	800441c <_printf_common+0xa4>
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	6922      	ldr	r2, [r4, #16]
 80043e2:	f003 0306 	and.w	r3, r3, #6
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	bf02      	ittt	eq
 80043ea:	68e5      	ldreq	r5, [r4, #12]
 80043ec:	6833      	ldreq	r3, [r6, #0]
 80043ee:	1aed      	subeq	r5, r5, r3
 80043f0:	68a3      	ldr	r3, [r4, #8]
 80043f2:	bf0c      	ite	eq
 80043f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f8:	2500      	movne	r5, #0
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bfc4      	itt	gt
 80043fe:	1a9b      	subgt	r3, r3, r2
 8004400:	18ed      	addgt	r5, r5, r3
 8004402:	2600      	movs	r6, #0
 8004404:	341a      	adds	r4, #26
 8004406:	42b5      	cmp	r5, r6
 8004408:	d11a      	bne.n	8004440 <_printf_common+0xc8>
 800440a:	2000      	movs	r0, #0
 800440c:	e008      	b.n	8004420 <_printf_common+0xa8>
 800440e:	2301      	movs	r3, #1
 8004410:	4652      	mov	r2, sl
 8004412:	4649      	mov	r1, r9
 8004414:	4638      	mov	r0, r7
 8004416:	47c0      	blx	r8
 8004418:	3001      	adds	r0, #1
 800441a:	d103      	bne.n	8004424 <_printf_common+0xac>
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004424:	3501      	adds	r5, #1
 8004426:	e7c6      	b.n	80043b6 <_printf_common+0x3e>
 8004428:	18e1      	adds	r1, r4, r3
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	2030      	movs	r0, #48	; 0x30
 800442e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004432:	4422      	add	r2, r4
 8004434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800443c:	3302      	adds	r3, #2
 800443e:	e7c7      	b.n	80043d0 <_printf_common+0x58>
 8004440:	2301      	movs	r3, #1
 8004442:	4622      	mov	r2, r4
 8004444:	4649      	mov	r1, r9
 8004446:	4638      	mov	r0, r7
 8004448:	47c0      	blx	r8
 800444a:	3001      	adds	r0, #1
 800444c:	d0e6      	beq.n	800441c <_printf_common+0xa4>
 800444e:	3601      	adds	r6, #1
 8004450:	e7d9      	b.n	8004406 <_printf_common+0x8e>
	...

08004454 <_printf_i>:
 8004454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004458:	7e0f      	ldrb	r7, [r1, #24]
 800445a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800445c:	2f78      	cmp	r7, #120	; 0x78
 800445e:	4691      	mov	r9, r2
 8004460:	4680      	mov	r8, r0
 8004462:	460c      	mov	r4, r1
 8004464:	469a      	mov	sl, r3
 8004466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800446a:	d807      	bhi.n	800447c <_printf_i+0x28>
 800446c:	2f62      	cmp	r7, #98	; 0x62
 800446e:	d80a      	bhi.n	8004486 <_printf_i+0x32>
 8004470:	2f00      	cmp	r7, #0
 8004472:	f000 80d4 	beq.w	800461e <_printf_i+0x1ca>
 8004476:	2f58      	cmp	r7, #88	; 0x58
 8004478:	f000 80c0 	beq.w	80045fc <_printf_i+0x1a8>
 800447c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004484:	e03a      	b.n	80044fc <_printf_i+0xa8>
 8004486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800448a:	2b15      	cmp	r3, #21
 800448c:	d8f6      	bhi.n	800447c <_printf_i+0x28>
 800448e:	a101      	add	r1, pc, #4	; (adr r1, 8004494 <_printf_i+0x40>)
 8004490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004494:	080044ed 	.word	0x080044ed
 8004498:	08004501 	.word	0x08004501
 800449c:	0800447d 	.word	0x0800447d
 80044a0:	0800447d 	.word	0x0800447d
 80044a4:	0800447d 	.word	0x0800447d
 80044a8:	0800447d 	.word	0x0800447d
 80044ac:	08004501 	.word	0x08004501
 80044b0:	0800447d 	.word	0x0800447d
 80044b4:	0800447d 	.word	0x0800447d
 80044b8:	0800447d 	.word	0x0800447d
 80044bc:	0800447d 	.word	0x0800447d
 80044c0:	08004605 	.word	0x08004605
 80044c4:	0800452d 	.word	0x0800452d
 80044c8:	080045bf 	.word	0x080045bf
 80044cc:	0800447d 	.word	0x0800447d
 80044d0:	0800447d 	.word	0x0800447d
 80044d4:	08004627 	.word	0x08004627
 80044d8:	0800447d 	.word	0x0800447d
 80044dc:	0800452d 	.word	0x0800452d
 80044e0:	0800447d 	.word	0x0800447d
 80044e4:	0800447d 	.word	0x0800447d
 80044e8:	080045c7 	.word	0x080045c7
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	1d1a      	adds	r2, r3, #4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	602a      	str	r2, [r5, #0]
 80044f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044fc:	2301      	movs	r3, #1
 80044fe:	e09f      	b.n	8004640 <_printf_i+0x1ec>
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	0607      	lsls	r7, r0, #24
 8004506:	f103 0104 	add.w	r1, r3, #4
 800450a:	6029      	str	r1, [r5, #0]
 800450c:	d501      	bpl.n	8004512 <_printf_i+0xbe>
 800450e:	681e      	ldr	r6, [r3, #0]
 8004510:	e003      	b.n	800451a <_printf_i+0xc6>
 8004512:	0646      	lsls	r6, r0, #25
 8004514:	d5fb      	bpl.n	800450e <_printf_i+0xba>
 8004516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800451a:	2e00      	cmp	r6, #0
 800451c:	da03      	bge.n	8004526 <_printf_i+0xd2>
 800451e:	232d      	movs	r3, #45	; 0x2d
 8004520:	4276      	negs	r6, r6
 8004522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004526:	485a      	ldr	r0, [pc, #360]	; (8004690 <_printf_i+0x23c>)
 8004528:	230a      	movs	r3, #10
 800452a:	e012      	b.n	8004552 <_printf_i+0xfe>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	6029      	str	r1, [r5, #0]
 8004534:	0605      	lsls	r5, r0, #24
 8004536:	d501      	bpl.n	800453c <_printf_i+0xe8>
 8004538:	681e      	ldr	r6, [r3, #0]
 800453a:	e002      	b.n	8004542 <_printf_i+0xee>
 800453c:	0641      	lsls	r1, r0, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0xe4>
 8004540:	881e      	ldrh	r6, [r3, #0]
 8004542:	4853      	ldr	r0, [pc, #332]	; (8004690 <_printf_i+0x23c>)
 8004544:	2f6f      	cmp	r7, #111	; 0x6f
 8004546:	bf0c      	ite	eq
 8004548:	2308      	moveq	r3, #8
 800454a:	230a      	movne	r3, #10
 800454c:	2100      	movs	r1, #0
 800454e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004552:	6865      	ldr	r5, [r4, #4]
 8004554:	60a5      	str	r5, [r4, #8]
 8004556:	2d00      	cmp	r5, #0
 8004558:	bfa2      	ittt	ge
 800455a:	6821      	ldrge	r1, [r4, #0]
 800455c:	f021 0104 	bicge.w	r1, r1, #4
 8004560:	6021      	strge	r1, [r4, #0]
 8004562:	b90e      	cbnz	r6, 8004568 <_printf_i+0x114>
 8004564:	2d00      	cmp	r5, #0
 8004566:	d04b      	beq.n	8004600 <_printf_i+0x1ac>
 8004568:	4615      	mov	r5, r2
 800456a:	fbb6 f1f3 	udiv	r1, r6, r3
 800456e:	fb03 6711 	mls	r7, r3, r1, r6
 8004572:	5dc7      	ldrb	r7, [r0, r7]
 8004574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004578:	4637      	mov	r7, r6
 800457a:	42bb      	cmp	r3, r7
 800457c:	460e      	mov	r6, r1
 800457e:	d9f4      	bls.n	800456a <_printf_i+0x116>
 8004580:	2b08      	cmp	r3, #8
 8004582:	d10b      	bne.n	800459c <_printf_i+0x148>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	07de      	lsls	r6, r3, #31
 8004588:	d508      	bpl.n	800459c <_printf_i+0x148>
 800458a:	6923      	ldr	r3, [r4, #16]
 800458c:	6861      	ldr	r1, [r4, #4]
 800458e:	4299      	cmp	r1, r3
 8004590:	bfde      	ittt	le
 8004592:	2330      	movle	r3, #48	; 0x30
 8004594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800459c:	1b52      	subs	r2, r2, r5
 800459e:	6122      	str	r2, [r4, #16]
 80045a0:	f8cd a000 	str.w	sl, [sp]
 80045a4:	464b      	mov	r3, r9
 80045a6:	aa03      	add	r2, sp, #12
 80045a8:	4621      	mov	r1, r4
 80045aa:	4640      	mov	r0, r8
 80045ac:	f7ff fee4 	bl	8004378 <_printf_common>
 80045b0:	3001      	adds	r0, #1
 80045b2:	d14a      	bne.n	800464a <_printf_i+0x1f6>
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	b004      	add	sp, #16
 80045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	f043 0320 	orr.w	r3, r3, #32
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	4833      	ldr	r0, [pc, #204]	; (8004694 <_printf_i+0x240>)
 80045c8:	2778      	movs	r7, #120	; 0x78
 80045ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	6829      	ldr	r1, [r5, #0]
 80045d2:	061f      	lsls	r7, r3, #24
 80045d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80045d8:	d402      	bmi.n	80045e0 <_printf_i+0x18c>
 80045da:	065f      	lsls	r7, r3, #25
 80045dc:	bf48      	it	mi
 80045de:	b2b6      	uxthmi	r6, r6
 80045e0:	07df      	lsls	r7, r3, #31
 80045e2:	bf48      	it	mi
 80045e4:	f043 0320 	orrmi.w	r3, r3, #32
 80045e8:	6029      	str	r1, [r5, #0]
 80045ea:	bf48      	it	mi
 80045ec:	6023      	strmi	r3, [r4, #0]
 80045ee:	b91e      	cbnz	r6, 80045f8 <_printf_i+0x1a4>
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	f023 0320 	bic.w	r3, r3, #32
 80045f6:	6023      	str	r3, [r4, #0]
 80045f8:	2310      	movs	r3, #16
 80045fa:	e7a7      	b.n	800454c <_printf_i+0xf8>
 80045fc:	4824      	ldr	r0, [pc, #144]	; (8004690 <_printf_i+0x23c>)
 80045fe:	e7e4      	b.n	80045ca <_printf_i+0x176>
 8004600:	4615      	mov	r5, r2
 8004602:	e7bd      	b.n	8004580 <_printf_i+0x12c>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	6826      	ldr	r6, [r4, #0]
 8004608:	6961      	ldr	r1, [r4, #20]
 800460a:	1d18      	adds	r0, r3, #4
 800460c:	6028      	str	r0, [r5, #0]
 800460e:	0635      	lsls	r5, r6, #24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	d501      	bpl.n	8004618 <_printf_i+0x1c4>
 8004614:	6019      	str	r1, [r3, #0]
 8004616:	e002      	b.n	800461e <_printf_i+0x1ca>
 8004618:	0670      	lsls	r0, r6, #25
 800461a:	d5fb      	bpl.n	8004614 <_printf_i+0x1c0>
 800461c:	8019      	strh	r1, [r3, #0]
 800461e:	2300      	movs	r3, #0
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	4615      	mov	r5, r2
 8004624:	e7bc      	b.n	80045a0 <_printf_i+0x14c>
 8004626:	682b      	ldr	r3, [r5, #0]
 8004628:	1d1a      	adds	r2, r3, #4
 800462a:	602a      	str	r2, [r5, #0]
 800462c:	681d      	ldr	r5, [r3, #0]
 800462e:	6862      	ldr	r2, [r4, #4]
 8004630:	2100      	movs	r1, #0
 8004632:	4628      	mov	r0, r5
 8004634:	f7fb fddc 	bl	80001f0 <memchr>
 8004638:	b108      	cbz	r0, 800463e <_printf_i+0x1ea>
 800463a:	1b40      	subs	r0, r0, r5
 800463c:	6060      	str	r0, [r4, #4]
 800463e:	6863      	ldr	r3, [r4, #4]
 8004640:	6123      	str	r3, [r4, #16]
 8004642:	2300      	movs	r3, #0
 8004644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004648:	e7aa      	b.n	80045a0 <_printf_i+0x14c>
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	462a      	mov	r2, r5
 800464e:	4649      	mov	r1, r9
 8004650:	4640      	mov	r0, r8
 8004652:	47d0      	blx	sl
 8004654:	3001      	adds	r0, #1
 8004656:	d0ad      	beq.n	80045b4 <_printf_i+0x160>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	079b      	lsls	r3, r3, #30
 800465c:	d413      	bmi.n	8004686 <_printf_i+0x232>
 800465e:	68e0      	ldr	r0, [r4, #12]
 8004660:	9b03      	ldr	r3, [sp, #12]
 8004662:	4298      	cmp	r0, r3
 8004664:	bfb8      	it	lt
 8004666:	4618      	movlt	r0, r3
 8004668:	e7a6      	b.n	80045b8 <_printf_i+0x164>
 800466a:	2301      	movs	r3, #1
 800466c:	4632      	mov	r2, r6
 800466e:	4649      	mov	r1, r9
 8004670:	4640      	mov	r0, r8
 8004672:	47d0      	blx	sl
 8004674:	3001      	adds	r0, #1
 8004676:	d09d      	beq.n	80045b4 <_printf_i+0x160>
 8004678:	3501      	adds	r5, #1
 800467a:	68e3      	ldr	r3, [r4, #12]
 800467c:	9903      	ldr	r1, [sp, #12]
 800467e:	1a5b      	subs	r3, r3, r1
 8004680:	42ab      	cmp	r3, r5
 8004682:	dcf2      	bgt.n	800466a <_printf_i+0x216>
 8004684:	e7eb      	b.n	800465e <_printf_i+0x20a>
 8004686:	2500      	movs	r5, #0
 8004688:	f104 0619 	add.w	r6, r4, #25
 800468c:	e7f5      	b.n	800467a <_printf_i+0x226>
 800468e:	bf00      	nop
 8004690:	080047d5 	.word	0x080047d5
 8004694:	080047e6 	.word	0x080047e6

08004698 <memmove>:
 8004698:	4288      	cmp	r0, r1
 800469a:	b510      	push	{r4, lr}
 800469c:	eb01 0402 	add.w	r4, r1, r2
 80046a0:	d902      	bls.n	80046a8 <memmove+0x10>
 80046a2:	4284      	cmp	r4, r0
 80046a4:	4623      	mov	r3, r4
 80046a6:	d807      	bhi.n	80046b8 <memmove+0x20>
 80046a8:	1e43      	subs	r3, r0, #1
 80046aa:	42a1      	cmp	r1, r4
 80046ac:	d008      	beq.n	80046c0 <memmove+0x28>
 80046ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046b6:	e7f8      	b.n	80046aa <memmove+0x12>
 80046b8:	4402      	add	r2, r0
 80046ba:	4601      	mov	r1, r0
 80046bc:	428a      	cmp	r2, r1
 80046be:	d100      	bne.n	80046c2 <memmove+0x2a>
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ca:	e7f7      	b.n	80046bc <memmove+0x24>

080046cc <_sbrk_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d06      	ldr	r5, [pc, #24]	; (80046e8 <_sbrk_r+0x1c>)
 80046d0:	2300      	movs	r3, #0
 80046d2:	4604      	mov	r4, r0
 80046d4:	4608      	mov	r0, r1
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	f7fc fc1a 	bl	8000f10 <_sbrk>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d102      	bne.n	80046e6 <_sbrk_r+0x1a>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	b103      	cbz	r3, 80046e6 <_sbrk_r+0x1a>
 80046e4:	6023      	str	r3, [r4, #0]
 80046e6:	bd38      	pop	{r3, r4, r5, pc}
 80046e8:	20000310 	.word	0x20000310

080046ec <memcpy>:
 80046ec:	440a      	add	r2, r1
 80046ee:	4291      	cmp	r1, r2
 80046f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f4:	d100      	bne.n	80046f8 <memcpy+0xc>
 80046f6:	4770      	bx	lr
 80046f8:	b510      	push	{r4, lr}
 80046fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004702:	4291      	cmp	r1, r2
 8004704:	d1f9      	bne.n	80046fa <memcpy+0xe>
 8004706:	bd10      	pop	{r4, pc}

08004708 <_realloc_r>:
 8004708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470c:	4680      	mov	r8, r0
 800470e:	4614      	mov	r4, r2
 8004710:	460e      	mov	r6, r1
 8004712:	b921      	cbnz	r1, 800471e <_realloc_r+0x16>
 8004714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	4611      	mov	r1, r2
 800471a:	f7ff bc49 	b.w	8003fb0 <_malloc_r>
 800471e:	b92a      	cbnz	r2, 800472c <_realloc_r+0x24>
 8004720:	f7ff fbda 	bl	8003ed8 <_free_r>
 8004724:	4625      	mov	r5, r4
 8004726:	4628      	mov	r0, r5
 8004728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800472c:	f000 f81b 	bl	8004766 <_malloc_usable_size_r>
 8004730:	4284      	cmp	r4, r0
 8004732:	4607      	mov	r7, r0
 8004734:	d802      	bhi.n	800473c <_realloc_r+0x34>
 8004736:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800473a:	d812      	bhi.n	8004762 <_realloc_r+0x5a>
 800473c:	4621      	mov	r1, r4
 800473e:	4640      	mov	r0, r8
 8004740:	f7ff fc36 	bl	8003fb0 <_malloc_r>
 8004744:	4605      	mov	r5, r0
 8004746:	2800      	cmp	r0, #0
 8004748:	d0ed      	beq.n	8004726 <_realloc_r+0x1e>
 800474a:	42bc      	cmp	r4, r7
 800474c:	4622      	mov	r2, r4
 800474e:	4631      	mov	r1, r6
 8004750:	bf28      	it	cs
 8004752:	463a      	movcs	r2, r7
 8004754:	f7ff ffca 	bl	80046ec <memcpy>
 8004758:	4631      	mov	r1, r6
 800475a:	4640      	mov	r0, r8
 800475c:	f7ff fbbc 	bl	8003ed8 <_free_r>
 8004760:	e7e1      	b.n	8004726 <_realloc_r+0x1e>
 8004762:	4635      	mov	r5, r6
 8004764:	e7df      	b.n	8004726 <_realloc_r+0x1e>

08004766 <_malloc_usable_size_r>:
 8004766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800476a:	1f18      	subs	r0, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	bfbc      	itt	lt
 8004770:	580b      	ldrlt	r3, [r1, r0]
 8004772:	18c0      	addlt	r0, r0, r3
 8004774:	4770      	bx	lr
	...

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
